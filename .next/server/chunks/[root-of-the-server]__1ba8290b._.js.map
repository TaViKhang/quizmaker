{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\n\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\r\n"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\"\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\r\nimport { db } from \"@/lib/db\"\r\nimport GoogleProvider from \"next-auth/providers/google\"\r\nimport { ROLES, RoleType } from \"@/lib/constants\"\r\n\r\n// Domain email được ủy quyền cao hơn\r\nconst AUTHORIZED_TEACHER_DOMAINS = ['school.edu', 'university.edu', 'teacher.org']\r\n\r\n// Fix cho type adapter\r\nconst prismaAdapter = PrismaAdapter(db) as any\r\n\r\n// Cải thiện error handling\r\nconst handleAuthError = (error: any, context: string) => {\r\n  console.error(`[Auth Error] ${context}:`, error);\r\n  return false;\r\n}\r\n\r\nexport const authOptions: AuthOptions = {\r\n  adapter: prismaAdapter,\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n      allowDangerousEmailAccountLinking: true,\r\n    }),\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n    maxAge: 24 * 60 * 60, // 24 hours\r\n    updateAge: 4 * 60 * 60, // 4 hours\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user, account, profile, trigger }) {\r\n      try {\r\n        // Trường hợp đăng nhập - Chỉ cập nhật token khi có user từ đăng nhập\r\n        if (user) {\r\n          // Đảm bảo role có thể null\r\n          token.role = user.role as RoleType | null;\r\n          token.id = user.id;\r\n          return token;\r\n        }\r\n        \r\n        // Trường hợp trigger update - Cập nhật token khi có sự thay đổi rõ ràng\r\n        if (trigger === 'update' && token?.sub) {\r\n          try {\r\n            const dbUser = await db.user.findUnique({\r\n              where: { id: token.sub },\r\n              select: { \r\n                id: true, \r\n                name: true, \r\n                email: true, \r\n                role: true, \r\n                image: true \r\n              }\r\n            });\r\n            \r\n            if (dbUser) {\r\n              // Cập nhật token với giá trị mới\r\n              token.role = dbUser.role as RoleType | null;\r\n              token.name = dbUser.name;\r\n              token.email = dbUser.email;\r\n              token.picture = dbUser.image;\r\n              \r\n              // Thêm timestamp để đảm bảo không cache token cũ\r\n              token.updatedAt = Date.now();\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error updating token:\", error);\r\n          }\r\n          return token;\r\n        }\r\n        \r\n        // Trường hợp token từ session: kiểm tra nếu cần cập nhật\r\n        if (token?.sub && (!token.role || !token.updatedAt || Date.now() - (token.updatedAt as number || 0) > 60 * 1000)) {\r\n          try {\r\n            const dbUser = await db.user.findUnique({\r\n              where: { id: token.sub },\r\n              select: { role: true }\r\n            });\r\n            \r\n            if (dbUser) {\r\n              token.role = dbUser.role as RoleType | null;\r\n              token.updatedAt = Date.now();\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error refreshing token:\", error);\r\n          }\r\n        }\r\n        \r\n        return token;\r\n      } catch (error) {\r\n        console.error(\"JWT callback error:\", error);\r\n        return token;\r\n      }\r\n    },\r\n    async session({ session, token }) {\r\n      try {\r\n        if (session.user && token) {\r\n          // Đảm bảo role có thể null\r\n          session.user.role = token.role as RoleType | null;\r\n          session.user.id = token.id as string;\r\n        }\r\n        return session;\r\n      } catch (error) {\r\n        console.error(\"Session callback error:\", error);\r\n        return session;\r\n      }\r\n    },\r\n    async signIn({ user, account, profile }) {\r\n      // Nếu user có email\r\n      if (user?.email) {\r\n        try {\r\n          // Kiểm tra user đã tồn tại chưa\r\n          const existingUser = await db.user.findUnique({\r\n            where: { email: user.email },\r\n          })\r\n          \r\n          if (!existingUser) {\r\n            // Tạo user mới không có role (null) để người dùng chọn sau\r\n            await db.user.create({\r\n              data: {\r\n                id: user.id,\r\n                email: user.email,\r\n                name: user.name,\r\n                image: user.image,\r\n                role: null, // Không thiết lập role mặc định\r\n              },\r\n            })\r\n            \r\n            // Đánh dấu để redirect tới trang chọn role\r\n            return true\r\n          }\r\n          \r\n          return true\r\n        } catch (error) {\r\n          return handleAuthError(error, \"signIn callback\");\r\n        }\r\n      }\r\n      \r\n      return true\r\n    }\r\n  },\r\n  pages: {\r\n    signIn: '/auth/signin',\r\n    signOut: '/',\r\n    error: '/auth/error',\r\n    newUser: '/auth/select-role' // Điều hướng người dùng mới đến trang chọn role\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  debug: process.env.NODE_ENV === \"development\",\r\n  logger: {\r\n    error(code, ...message) {\r\n      console.error(`[NextAuth Error] ${code}:`, ...message);\r\n    },\r\n    warn(code, ...message) {\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.warn(`[NextAuth Warning] ${code}:`, ...message);\r\n      }\r\n    },\r\n    debug(code, ...message) {\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.debug(`[NextAuth Debug] ${code}:`, ...message);\r\n      }\r\n    },\r\n  },\r\n}\r\n\r\nconst handler = NextAuth(authOptions)\r\nexport { handler as GET, handler as POST }\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/api-response.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { ZodError } from \"zod\";\r\n\r\n/**\r\n * Standard response structure for paginated data\r\n */\r\nexport interface PaginatedResponseData<T> {\r\n  success: boolean;\r\n  data: {\r\n    items: T[];\r\n    pagination: {\r\n      total: number;\r\n      page: number;\r\n      limit: number;\r\n      totalPages: number;\r\n    };\r\n  };\r\n  meta?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Standard response structure for single item data\r\n */\r\nexport interface SingleResponseData<T> {\r\n  success: boolean;\r\n  data: T;\r\n  meta?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Standard error response structure\r\n */\r\nexport interface ErrorResponseData {\r\n  success: boolean;\r\n  error: {\r\n    code: string;\r\n    message: string;\r\n    details?: any;\r\n  };\r\n}\r\n\r\n/**\r\n * Create a successful response with pagination\r\n */\r\nexport function createPaginatedResponse<T>(\r\n  data: T[],\r\n  total: number,\r\n  page: number,\r\n  limit: number,\r\n  meta?: Record<string, any>,\r\n  headers?: HeadersInit\r\n): NextResponse {\r\n  const response: PaginatedResponseData<T> = {\r\n    success: true,\r\n    data: {\r\n      items: data,\r\n      pagination: {\r\n        total,\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil(total / limit)\r\n      }\r\n    }\r\n  };\r\n\r\n  if (meta) {\r\n    response.meta = meta;\r\n  }\r\n\r\n  return NextResponse.json(response, { headers });\r\n}\r\n\r\n/**\r\n * Create a successful response for a single item\r\n */\r\nexport function createSuccessResponse<T>(\r\n  data: T,\r\n  status: number = 200,\r\n  meta?: Record<string, any>,\r\n  headers?: HeadersInit\r\n): NextResponse {\r\n  const response: SingleResponseData<T> = { \r\n    success: true,\r\n    data \r\n  };\r\n  \r\n  if (meta) {\r\n    response.meta = meta;\r\n  }\r\n  \r\n  return NextResponse.json(response, { status, headers });\r\n}\r\n\r\n/**\r\n * Create an error response\r\n */\r\nexport function createErrorResponse(\r\n  code: string,\r\n  message: string,\r\n  details?: any,\r\n  status: number = 400\r\n): NextResponse {\r\n  const response: ErrorResponseData = {\r\n    success: false,\r\n    error: {\r\n      code,\r\n      message\r\n    }\r\n  };\r\n  \r\n  if (details) {\r\n    response.error.details = details;\r\n  }\r\n  \r\n  return NextResponse.json(response, { status });\r\n}\r\n\r\n/**\r\n * Format Zod validation errors\r\n */\r\nexport function formatZodError(error: ZodError) {\r\n  return {\r\n    code: \"VALIDATION_ERROR\",\r\n    message: \"Invalid input data\",\r\n    details: error.errors.map(err => ({\r\n      path: err.path.join('.'),\r\n      message: err.message\r\n    }))\r\n  };\r\n}\r\n\r\n/**\r\n * Create an authenticated error response (401)\r\n */\r\nexport function createAuthenticationError(): NextResponse {\r\n  return createErrorResponse(\r\n    \"UNAUTHENTICATED\",\r\n    \"You must be logged in to access this resource\",\r\n    undefined,\r\n    401\r\n  );\r\n}\r\n\r\n/**\r\n * Create a permission error response (403)\r\n */\r\nexport function createPermissionError(message: string = \"You don't have permission to access this resource\"): NextResponse {\r\n  return createErrorResponse(\r\n    \"UNAUTHORIZED\", \r\n    message,\r\n    undefined,\r\n    403\r\n  );\r\n}\r\n\r\n/**\r\n * Create a not found error response (404)\r\n */\r\nexport function createNotFoundError(resource: string = \"Resource\"): NextResponse {\r\n  return createErrorResponse(\r\n    \"NOT_FOUND\",\r\n    `${resource} not found`,\r\n    undefined,\r\n    404\r\n  );\r\n}\r\n\r\n/**\r\n * Create a server error response (500)\r\n */\r\nexport function createServerError(error?: Error): NextResponse {\r\n  console.error(\"Server error:\", error);\r\n  \r\n  return createErrorResponse(\r\n    \"SERVER_ERROR\",\r\n    \"An unexpected error occurred\",\r\n    process.env.NODE_ENV === 'development' ? error?.message : undefined,\r\n    500\r\n  );\r\n}\r\n\r\n/**\r\n * Create a validation error response (400)\r\n */\r\nexport function createValidationError(details?: any): NextResponse {\r\n  return createErrorResponse(\r\n    \"VALIDATION_ERROR\",\r\n    \"Invalid input data\",\r\n    details,\r\n    400\r\n  );\r\n} "],"names":[],"mappings":";;;;;;;;;;;AAAA;;AA4CO,SAAS,wBACd,IAAS,EACT,KAAa,EACb,IAAY,EACZ,KAAa,EACb,IAA0B,EAC1B,OAAqB;IAErB,MAAM,WAAqC;QACzC,SAAS;QACT,MAAM;YACJ,OAAO;YACP,YAAY;gBACV;gBACA;gBACA;gBACA,YAAY,KAAK,IAAI,CAAC,QAAQ;YAChC;QACF;IACF;IAEA,IAAI,MAAM;QACR,SAAS,IAAI,GAAG;IAClB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;IAAQ;AAC/C;AAKO,SAAS,sBACd,IAAO,EACP,SAAiB,GAAG,EACpB,IAA0B,EAC1B,OAAqB;IAErB,MAAM,WAAkC;QACtC,SAAS;QACT;IACF;IAEA,IAAI,MAAM;QACR,SAAS,IAAI,GAAG;IAClB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;QAAQ;IAAQ;AACvD;AAKO,SAAS,oBACd,IAAY,EACZ,OAAe,EACf,OAAa,EACb,SAAiB,GAAG;IAEpB,MAAM,WAA8B;QAClC,SAAS;QACT,OAAO;YACL;YACA;QACF;IACF;IAEA,IAAI,SAAS;QACX,SAAS,KAAK,CAAC,OAAO,GAAG;IAC3B;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;IAAO;AAC9C;AAKO,SAAS,eAAe,KAAe;IAC5C,OAAO;QACL,MAAM;QACN,SAAS;QACT,SAAS,MAAM,MAAM,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;gBAChC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC;gBACpB,SAAS,IAAI,OAAO;YACtB,CAAC;IACH;AACF;AAKO,SAAS;IACd,OAAO,oBACL,mBACA,iDACA,WACA;AAEJ;AAKO,SAAS,sBAAsB,UAAkB,mDAAmD;IACzG,OAAO,oBACL,gBACA,SACA,WACA;AAEJ;AAKO,SAAS,oBAAoB,WAAmB,UAAU;IAC/D,OAAO,oBACL,aACA,GAAG,SAAS,UAAU,CAAC,EACvB,WACA;AAEJ;AAKO,SAAS,kBAAkB,KAAa;IAC7C,QAAQ,KAAK,CAAC,iBAAiB;IAE/B,OAAO,oBACL,gBACA,gCACA,uCAAyC,OAAO,gDAChD;AAEJ;AAKO,SAAS,sBAAsB,OAAa;IACjD,OAAO,oBACL,oBACA,sBACA,SACA;AAEJ","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/notification-service.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\r\n\r\n// Define notification categories as string literals\r\nexport type NotificationCategory = \r\n  | 'NEW_QUIZ'\r\n  | 'QUIZ_REMINDER'\r\n  | 'QUIZ_GRADED'\r\n  | 'CLASS_JOINED'\r\n  | 'CLASS_UPDATED'\r\n  | 'SYSTEM';\r\n\r\n/**\r\n * Create a notification for a single user\r\n */\r\nexport async function createNotification({\r\n  userId,\r\n  title,\r\n  message,\r\n  category,\r\n  resourceId,\r\n  resourceType,\r\n  expiredAt\r\n}: {\r\n  userId: string;\r\n  title: string;\r\n  message: string;\r\n  category: NotificationCategory;\r\n  resourceId?: string;\r\n  resourceType?: string;\r\n  expiredAt?: Date;\r\n}) {\r\n  return db.notification.create({\r\n    data: {\r\n      userId,\r\n      title,\r\n      message,\r\n      category: category as any, // Type cast to handle any enum conversion issues\r\n      resourceId,\r\n      resourceType,\r\n      expiredAt\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Create notifications for all students in a class\r\n */\r\nexport async function createNotificationsForClass({\r\n  classId,\r\n  title,\r\n  message,\r\n  category,\r\n  resourceId,\r\n  resourceType,\r\n  expiredAt,\r\n  excludeUserIds = []\r\n}: {\r\n  classId: string;\r\n  title: string;\r\n  message: string;\r\n  category: NotificationCategory;\r\n  resourceId?: string;\r\n  resourceType?: string;\r\n  expiredAt?: Date;\r\n  excludeUserIds?: string[];\r\n}) {\r\n  // Get all students in the class\r\n  const enrollments = await db.classEnrollment.findMany({\r\n    where: {\r\n      classId,\r\n      studentId: {\r\n        notIn: excludeUserIds\r\n      }\r\n    },\r\n    select: {\r\n      studentId: true\r\n    }\r\n  });\r\n  \r\n  // Create notifications for all students\r\n  if (enrollments.length > 0) {\r\n    await db.notification.createMany({\r\n      data: enrollments.map(enrollment => ({\r\n        userId: enrollment.studentId,\r\n        title,\r\n        message,\r\n        category: category as any, // Type cast to handle any enum conversion issues\r\n        resourceId,\r\n        resourceType,\r\n        expiredAt\r\n      }))\r\n    });\r\n  }\r\n  \r\n  return enrollments.length;\r\n}\r\n\r\n/**\r\n * Mark notifications as read\r\n */\r\nexport async function markNotificationsAsRead(userId: string, notificationIds?: string[]) {\r\n  if (notificationIds && notificationIds.length > 0) {\r\n    // Mark specific notifications as read\r\n    return db.notification.updateMany({\r\n      where: {\r\n        id: { in: notificationIds },\r\n        userId\r\n      },\r\n      data: {\r\n        isRead: true\r\n      }\r\n    });\r\n  } else {\r\n    // Mark all notifications as read\r\n    return db.notification.updateMany({\r\n      where: {\r\n        userId,\r\n        isRead: false\r\n      },\r\n      data: {\r\n        isRead: true\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Delete expired notifications\r\n * (This can be run as a scheduled job)\r\n */\r\nexport async function deleteExpiredNotifications() {\r\n  const now = new Date();\r\n  \r\n  return db.notification.deleteMany({\r\n    where: {\r\n      expiredAt: {\r\n        lt: now\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Create automated quiz reminders\r\n * (This can be run as a scheduled job)\r\n */\r\nexport async function createQuizReminders() {\r\n  const now = new Date();\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(tomorrow.getDate() + 1);\r\n  \r\n  // Find quizzes ending within the next 24 hours\r\n  const upcomingQuizzes = await db.quiz.findMany({\r\n    where: {\r\n      endDate: {\r\n        gte: now,\r\n        lte: tomorrow\r\n      },\r\n      isActive: true,\r\n      isPublished: true\r\n    },\r\n    include: {\r\n      class: {\r\n        select: {\r\n          id: true,\r\n          name: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Create reminder notifications\r\n  for (const quiz of upcomingQuizzes) {\r\n    if (quiz.classId) {\r\n      await createNotificationsForClass({\r\n        classId: quiz.classId,\r\n        title: \"Quiz Reminder\",\r\n        message: `The quiz \"${quiz.title}\" in class \"${quiz.class?.name}\" will end on ${quiz.endDate.toLocaleString()}`,\r\n        category: 'QUIZ_REMINDER',\r\n        resourceId: quiz.id,\r\n        resourceType: \"quiz\",\r\n        expiredAt: quiz.endDate\r\n      });\r\n    }\r\n  }\r\n  \r\n  return upcomingQuizzes.length;\r\n} "],"names":[],"mappings":";;;;;;;AAAA;;AAcO,eAAe,mBAAmB,EACvC,MAAM,EACN,KAAK,EACL,OAAO,EACP,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,SAAS,EASV;IACC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,MAAM,CAAC;QAC5B,MAAM;YACJ;YACA;YACA;YACA,UAAU;YACV;YACA;YACA;QACF;IACF;AACF;AAKO,eAAe,4BAA4B,EAChD,OAAO,EACP,KAAK,EACL,OAAO,EACP,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,SAAS,EACT,iBAAiB,EAAE,EAUpB;IACC,gCAAgC;IAChC,MAAM,cAAc,MAAM,2GAAA,CAAA,KAAE,CAAC,eAAe,CAAC,QAAQ,CAAC;QACpD,OAAO;YACL;YACA,WAAW;gBACT,OAAO;YACT;QACF;QACA,QAAQ;YACN,WAAW;QACb;IACF;IAEA,wCAAwC;IACxC,IAAI,YAAY,MAAM,GAAG,GAAG;QAC1B,MAAM,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAC/B,MAAM,YAAY,GAAG,CAAC,CAAA,aAAc,CAAC;oBACnC,QAAQ,WAAW,SAAS;oBAC5B;oBACA;oBACA,UAAU;oBACV;oBACA;oBACA;gBACF,CAAC;QACH;IACF;IAEA,OAAO,YAAY,MAAM;AAC3B;AAKO,eAAe,wBAAwB,MAAc,EAAE,eAA0B;IACtF,IAAI,mBAAmB,gBAAgB,MAAM,GAAG,GAAG;QACjD,sCAAsC;QACtC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,OAAO;gBACL,IAAI;oBAAE,IAAI;gBAAgB;gBAC1B;YACF;YACA,MAAM;gBACJ,QAAQ;YACV;QACF;IACF,OAAO;QACL,iCAAiC;QACjC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,OAAO;gBACL;gBACA,QAAQ;YACV;YACA,MAAM;gBACJ,QAAQ;YACV;QACF;IACF;AACF;AAMO,eAAe;IACpB,MAAM,MAAM,IAAI;IAEhB,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;QAChC,OAAO;YACL,WAAW;gBACT,IAAI;YACN;QACF;IACF;AACF;AAMO,eAAe;IACpB,MAAM,MAAM,IAAI;IAChB,MAAM,WAAW,IAAI,KAAK;IAC1B,SAAS,OAAO,CAAC,SAAS,OAAO,KAAK;IAEtC,+CAA+C;IAC/C,MAAM,kBAAkB,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC7C,OAAO;YACL,SAAS;gBACP,KAAK;gBACL,KAAK;YACP;YACA,UAAU;YACV,aAAa;QACf;QACA,SAAS;YACP,OAAO;gBACL,QAAQ;oBACN,IAAI;oBACJ,MAAM;gBACR;YACF;QACF;IACF;IAEA,gCAAgC;IAChC,KAAK,MAAM,QAAQ,gBAAiB;QAClC,IAAI,KAAK,OAAO,EAAE;YAChB,MAAM,4BAA4B;gBAChC,SAAS,KAAK,OAAO;gBACrB,OAAO;gBACP,SAAS,CAAC,UAAU,EAAE,KAAK,KAAK,CAAC,YAAY,EAAE,KAAK,KAAK,EAAE,KAAK,cAAc,EAAE,KAAK,OAAO,CAAC,cAAc,IAAI;gBAC/G,UAAU;gBACV,YAAY,KAAK,EAAE;gBACnB,cAAc;gBACd,WAAW,KAAK,OAAO;YACzB;QACF;IACF;IAEA,OAAO,gBAAgB,MAAM;AAC/B","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/notifications/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\r\nimport { db } from \"@/lib/db\";\r\nimport { \r\n  createSuccessResponse, \r\n  createAuthenticationError, \r\n  createErrorResponse,\r\n  createServerError \r\n} from \"@/lib/api-response\";\r\nimport { markNotificationsAsRead } from \"@/lib/notification-service\";\r\nimport { z } from \"zod\";\r\n\r\n/**\r\n * GET /api/notifications\r\n * Fetch user notifications with optional filtering\r\n */\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session?.user) {\r\n      return createAuthenticationError();\r\n    }\r\n    \r\n    const { searchParams } = new URL(request.url);\r\n    const unreadOnly = searchParams.get(\"unreadOnly\") === \"true\";\r\n    const limit = parseInt(searchParams.get(\"limit\") || \"30\");\r\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\r\n    const offset = (page - 1) * limit;\r\n    \r\n    // Build query conditions\r\n    const where = {\r\n      userId: session.user.id,\r\n      ...(unreadOnly ? { isRead: false } : {})\r\n    };\r\n    \r\n    // Get total count for pagination\r\n    const total = await db.notification.count({ where });\r\n    \r\n    // Get notifications with pagination\r\n    const notifications = await db.notification.findMany({\r\n      where,\r\n      orderBy: {\r\n        createdAt: \"desc\"\r\n      },\r\n      skip: offset,\r\n      take: Math.min(limit, 50) // Cap at 50 to prevent abuse\r\n    });\r\n    \r\n    // Count unread notifications\r\n    const unreadCount = await db.notification.count({\r\n      where: {\r\n        userId: session.user.id,\r\n        isRead: false\r\n      }\r\n    });\r\n    \r\n    return createSuccessResponse({\r\n      notifications,\r\n      unreadCount,\r\n      pagination: {\r\n        total,\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil(total / limit)\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching notifications:\", error);\r\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\r\n  }\r\n}\r\n\r\n// Schema for validating PATCH request\r\nconst updateNotificationSchema = z.object({\r\n  notificationIds: z.array(z.string()).optional(),\r\n  markAllRead: z.boolean().optional()\r\n});\r\n\r\n/**\r\n * PATCH /api/notifications\r\n * Mark notifications as read\r\n */\r\nexport async function PATCH(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session?.user) {\r\n      return createAuthenticationError();\r\n    }\r\n    \r\n    const body = await request.json();\r\n    const validationResult = updateNotificationSchema.safeParse(body);\r\n    \r\n    if (!validationResult.success) {\r\n      return createErrorResponse(\r\n        \"VALIDATION_ERROR\",\r\n        \"Invalid request data\",\r\n        validationResult.error.flatten()\r\n      );\r\n    }\r\n    \r\n    const { notificationIds, markAllRead } = validationResult.data;\r\n    \r\n    // Update notifications\r\n    await markNotificationsAsRead(\r\n      session.user.id, \r\n      markAllRead ? undefined : notificationIds\r\n    );\r\n    \r\n    // Get new unread count\r\n    const unreadCount = await db.notification.count({\r\n      where: {\r\n        userId: session.user.id,\r\n        isRead: false\r\n      }\r\n    });\r\n    \r\n    return createSuccessResponse({ \r\n      message: \"Notifications updated\",\r\n      unreadCount\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating notifications:\", error);\r\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\r\n  }\r\n}\r\n\r\n// Schema for validating POST request to create notifications\r\nconst createNotificationSchema = z.object({\r\n  userId: z.string(),\r\n  title: z.string().min(1).max(255),\r\n  message: z.string().min(1).max(1000),\r\n  category: z.enum([\r\n    \"NEW_QUIZ\", \r\n    \"QUIZ_REMINDER\", \r\n    \"QUIZ_GRADED\", \r\n    \"CLASS_JOINED\", \r\n    \"CLASS_UPDATED\", \r\n    \"SYSTEM\"\r\n  ]),\r\n  resourceId: z.string().optional(),\r\n  resourceType: z.string().optional(),\r\n});\r\n\r\n/**\r\n * POST /api/notifications\r\n * Create a new notification for a user\r\n */\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session?.user) {\r\n      return createAuthenticationError();\r\n    }\r\n    \r\n    // Only teachers and admins can create notifications\r\n    const isTeacher = session.user.role === \"TEACHER\";\r\n    if (!isTeacher) {\r\n      return createErrorResponse(\r\n        \"PERMISSION_DENIED\",\r\n        \"Only teachers can create notifications\",\r\n        { details: \"Insufficient permissions\" }\r\n      );\r\n    }\r\n    \r\n    const body = await request.json();\r\n    const validationResult = createNotificationSchema.safeParse(body);\r\n    \r\n    if (!validationResult.success) {\r\n      return createErrorResponse(\r\n        \"VALIDATION_ERROR\",\r\n        \"Invalid notification data\",\r\n        validationResult.error.flatten()\r\n      );\r\n    }\r\n    \r\n    const { \r\n      userId, \r\n      title, \r\n      message, \r\n      category, \r\n      resourceId, \r\n      resourceType \r\n    } = validationResult.data;\r\n    \r\n    // Create the notification\r\n    const notification = await db.notification.create({\r\n      data: {\r\n        userId,\r\n        title,\r\n        message,\r\n        category,\r\n        resourceId,\r\n        resourceType,\r\n        isRead: false,\r\n        expiredAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // Expires in 30 days\r\n      },\r\n    });\r\n    \r\n    return createSuccessResponse({\r\n      message: \"Notification created successfully\",\r\n      notification,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error creating notification:\", error);\r\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}
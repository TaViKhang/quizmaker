{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\n"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { db } from \"@/lib/db\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { ROLES, RoleType } from \"@/lib/constants\"\n\n// Domain email được ủy quyền cao hơn\nconst AUTHORIZED_TEACHER_DOMAINS = ['school.edu', 'university.edu', 'teacher.org']\n\n// Fix cho type adapter\nconst prismaAdapter = PrismaAdapter(db) as any\n\n// Cải thiện error handling\nconst handleAuthError = (error: any, context: string) => {\n  console.error(`[Auth Error] ${context}:`, error);\n  return false;\n}\n\nexport const authOptions: AuthOptions = {\n  adapter: prismaAdapter,\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      allowDangerousEmailAccountLinking: true,\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60, // 24 hours\n    updateAge: 4 * 60 * 60, // 4 hours\n  },\n  callbacks: {\n    async jwt({ token, user, account, profile, trigger }) {\n      try {\n        // Trường hợp đăng nhập - Chỉ cập nhật token khi có user từ đăng nhập\n        if (user) {\n          // Đảm bảo role có thể null\n          token.role = user.role as RoleType | null;\n          token.id = user.id;\n          return token;\n        }\n        \n        // Trường hợp trigger update - Cập nhật token khi có sự thay đổi rõ ràng\n        if (trigger === 'update' && token?.sub) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { \n                id: true, \n                name: true, \n                email: true, \n                role: true, \n                image: true \n              }\n            });\n            \n            if (dbUser) {\n              // Cập nhật token với giá trị mới\n              token.role = dbUser.role as RoleType | null;\n              token.name = dbUser.name;\n              token.email = dbUser.email;\n              token.picture = dbUser.image;\n              \n              // Thêm timestamp để đảm bảo không cache token cũ\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error updating token:\", error);\n          }\n          return token;\n        }\n        \n        // Trường hợp token từ session: kiểm tra nếu cần cập nhật\n        if (token?.sub && (!token.role || !token.updatedAt || Date.now() - (token.updatedAt as number || 0) > 60 * 1000)) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { role: true }\n            });\n            \n            if (dbUser) {\n              token.role = dbUser.role as RoleType | null;\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error refreshing token:\", error);\n          }\n        }\n        \n        return token;\n      } catch (error) {\n        console.error(\"JWT callback error:\", error);\n        return token;\n      }\n    },\n    async session({ session, token }) {\n      try {\n        if (session.user && token) {\n          // Đảm bảo role có thể null\n          session.user.role = token.role as RoleType | null;\n          session.user.id = token.id as string;\n        }\n        return session;\n      } catch (error) {\n        console.error(\"Session callback error:\", error);\n        return session;\n      }\n    },\n    async signIn({ user, account, profile }) {\n      // Nếu user có email\n      if (user?.email) {\n        try {\n          // Kiểm tra user đã tồn tại chưa\n          const existingUser = await db.user.findUnique({\n            where: { email: user.email },\n          })\n          \n          if (!existingUser) {\n            // Tạo user mới không có role (null) để người dùng chọn sau\n            await db.user.create({\n              data: {\n                id: user.id,\n                email: user.email,\n                name: user.name,\n                image: user.image,\n                role: null, // Không thiết lập role mặc định\n              },\n            })\n            \n            // Đánh dấu để redirect tới trang chọn role\n            return true\n          }\n          \n          return true\n        } catch (error) {\n          return handleAuthError(error, \"signIn callback\");\n        }\n      }\n      \n      return true\n    }\n  },\n  pages: {\n    signIn: '/auth/signin',\n    signOut: '/',\n    error: '/auth/error',\n    newUser: '/auth/select-role' // Điều hướng người dùng mới đến trang chọn role\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === \"development\",\n  logger: {\n    error(code, ...message) {\n      console.error(`[NextAuth Error] ${code}:`, ...message);\n    },\n    warn(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.warn(`[NextAuth Warning] ${code}:`, ...message);\n      }\n    },\n    debug(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.debug(`[NextAuth Debug] ${code}:`, ...message);\n      }\n    },\n  },\n}\n\nconst handler = NextAuth(authOptions)\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/prisma.ts"],"sourcesContent":["import { db } from './db';\n\n// Re-export với tên khác để không phá vỡ code đang sử dụng\nexport const prisma = db;"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,SAAS,2GAAA,CAAA,KAAE","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Safely access theme state to avoid hydration errors\n * This is useful for conditionally rendering theme-dependent UI\n * \n * @param theme Current theme from useTheme hook\n * @param mounted Boolean indicating if component is mounted\n * @returns Safe theme value or null if not mounted\n */\nexport function getSafeTheme(\n  theme: string | undefined, \n  mounted: boolean\n): \"light\" | \"dark\" | \"system\" | null {\n  if (!mounted) return null\n  return (theme as \"light\" | \"dark\" | \"system\") || null\n}\n\n/**\n * Generate a random alphanumeric code of specified length\n * @param length Length of the code to generate\n * @returns Random alphanumeric string\n */\nexport function generateRandomCode(length: number): string {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let code = '';\n  \n  for (let i = 0; i < length; i++) {\n    code += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  \n  return code;\n}\n\n/**\n * Format duration in milliseconds to a human-readable string\n * @param ms Duration in milliseconds\n * @returns Formatted duration string (e.g., \"1h 30m\" or \"45m\")\n */\nexport function formatDuration(ms: number): string {\n  if (!ms || ms <= 0) return \"0 minutes\";\n  \n  const seconds = Math.floor((ms / 1000) % 60);\n  const minutes = Math.floor((ms / (1000 * 60)) % 60);\n  const hours = Math.floor((ms / (1000 * 60 * 60)));\n  \n  const parts = [];\n  \n  if (hours > 0) {\n    parts.push(`${hours} ${hours === 1 ? 'hour' : 'hours'}`);\n  }\n  \n  if (minutes > 0) {\n    parts.push(`${minutes} ${minutes === 1 ? 'minute' : 'minutes'}`);\n  }\n  \n  if (seconds > 0 && hours === 0) {\n    parts.push(`${seconds} ${seconds === 1 ? 'second' : 'seconds'}`);\n  }\n  \n  return parts.join(' ');\n}\n\n/**\n * Normalize metadata to ensure correct format\n * @param metadata Metadata object or string to normalize\n * @returns Normalized object or null if invalid\n */\nexport function normalizeMetadata<T extends Record<string, any> = Record<string, any>>(metadata: unknown): T | null {\n  // Return null for falsy values (undefined, null, empty string, etc.)\n  if (!metadata) return null;\n  \n  try {\n    // If metadata is already an object, return it directly with type assertion\n    if (typeof metadata === 'object' && metadata !== null && !Array.isArray(metadata)) {\n      // Remove null/undefined values for consistency\n      const cleanedMetadata = Object.fromEntries(\n        Object.entries(metadata as Record<string, any>).filter(([_, v]) => v !== null && v !== undefined)\n      );\n      \n      return cleanedMetadata as T;\n    }\n    \n    // If metadata is a string, try to parse it as JSON\n    if (typeof metadata === 'string') {\n      try {\n        const parsed = JSON.parse(metadata);\n        \n        // Ensure the parsed result is actually an object\n        if (typeof parsed === 'object' && parsed !== null && !Array.isArray(parsed)) {\n          // Clean up null/undefined values\n          const cleanedMetadata = Object.fromEntries(\n            Object.entries(parsed).filter(([_, v]) => v !== null && v !== undefined)\n          );\n          \n          return cleanedMetadata as T;\n        }\n        \n        // If parsed but not an object, return null\n        return null;\n      } catch (parseError) {\n        console.warn(\"Failed to parse metadata string:\", parseError);\n        return null;\n    }\n    }\n    \n    // For all other types (number, boolean, etc.), return null\n    return null;\n  } catch (error) {\n    console.error(\"Failed to normalize metadata:\", error);\n    return null;\n  }\n}\n\n/**\n * Prepare metadata for database storage\n * @param metadata Metadata object to prepare\n * @returns Stringified metadata or null\n */\nexport function prepareMetadataForDB(metadata: Record<string, any> | null): string | null {\n  if (!metadata) return null;\n  \n  try {\n    // Remove null/undefined properties\n    const cleanMetadata = Object.fromEntries(\n      Object.entries(metadata).filter(([_, v]) => v !== null && v !== undefined)\n    );\n    \n    // Check if any properties remain\n    if (Object.keys(cleanMetadata).length === 0) {\n      return null;\n    }\n    \n    return JSON.stringify(cleanMetadata);\n  } catch (error) {\n    console.error(\"Failed to prepare metadata for DB:\", error);\n    return null;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/teacher/classes/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { prisma } from \"@/lib/prisma\";\nimport { Role, ClassType, Prisma } from \"@prisma/client\";\nimport { generateRandomCode } from \"@/lib/utils\";\nimport { z } from \"zod\";\n\n/**\n * GET handler for retrieving all classes for a teacher\n */\nexport async function GET(req: NextRequest) {\n  try {\n    // Get user session\n    const session = await getServerSession(authOptions);\n\n    // Check authentication\n    if (!session || !session.user) {\n      return NextResponse.json(\n        { error: \"Unauthorized access\" },\n        { status: 401 }\n      );\n    }\n\n    // Check if user is a teacher\n    if (session.user.role !== Role.TEACHER) {\n      return NextResponse.json(\n        { error: \"Access denied: Teacher role required\" },\n        { status: 403 }\n      );\n    }\n\n    // Parse query parameters\n    const url = new URL(req.url);\n    const rawParams = {\n      page: url.searchParams.get(\"page\") || \"1\",\n      limit: url.searchParams.get(\"limit\") || \"10\",\n      search: url.searchParams.get(\"search\") || \"\",\n      status: url.searchParams.get(\"status\") || \"all\",\n      sortBy: url.searchParams.get(\"sortBy\") || \"updatedAt\",\n      sortOrder: url.searchParams.get(\"sortOrder\") || \"desc\",\n    };\n\n    // Validate query parameters\n    const parsedParams = querySchema.parse(rawParams);\n\n    // Calculate pagination\n    const skip = (parsedParams.page - 1) * parsedParams.limit;\n\n    // Build filter conditions\n    let where: Prisma.ClassWhereInput = {\n      teacherId: session.user.id,\n    };\n\n    // Add search filter if provided\n    if (parsedParams.search) {\n      where.OR = [\n        { name: { contains: parsedParams.search, mode: \"insensitive\" } },\n        { description: { contains: parsedParams.search, mode: \"insensitive\" } },\n        { subject: { contains: parsedParams.search, mode: \"insensitive\" } },\n      ];\n    }\n\n    // Add status filter if provided\n    if (parsedParams.status === \"active\") {\n      where.isActive = true;\n    } else if (parsedParams.status === \"inactive\") {\n      where.isActive = false;\n    }\n\n    // Count total classes matching filter\n    const totalClasses = await prisma.class.count({ where });\n\n    // Setup order by\n    let orderBy: any = {};\n    if (parsedParams.sortBy === \"studentCount\") {\n      // Special case for studentCount\n      orderBy = { students: { _count: parsedParams.sortOrder } };\n    } else {\n      orderBy = { [parsedParams.sortBy || \"updatedAt\"]: parsedParams.sortOrder || \"desc\" };\n    }\n\n    // Get classes with pagination, filtering, and sorting\n    const classes = await prisma.class.findMany({\n      where,\n      orderBy,\n      skip,\n      take: parsedParams.limit,\n      include: {\n        _count: {\n          select: {\n            students: true,\n            quizzes: true,\n          },\n        },\n      },\n    });\n\n    // Get additional statistics\n    const formattedClasses = await Promise.all(\n      classes.map(async (classItem) => {\n        // Get the number of active quizzes\n        const activeQuizCount = await prisma.quiz.count({\n          where: {\n            classId: classItem.id,\n            isActive: true,\n            isPublished: true,\n          },\n        });\n\n        // Get average quiz score for this class\n        const quizAttempts = await prisma.quizAttempt.findMany({\n          where: {\n            quiz: {\n              classId: classItem.id,\n            },\n            completedAt: {\n              not: null,\n            },\n          },\n          select: {\n            score: true,\n          },\n        });\n\n        const scores = quizAttempts\n          .map((attempt) => attempt.score)\n          .filter((score): score is number => score !== null);\n\n        const averageScore = scores.length > 0\n          ? Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length)\n          : null;\n\n        // Calculate recent activity using separate queries instead of nested selects\n        const classInfo = await prisma.class.findUnique({\n          where: {\n            id: classItem.id,\n          },\n          select: {\n            updatedAt: true,\n          }\n        });\n\n        // Get most recent quiz update\n        const recentQuiz = await prisma.quiz.findFirst({\n          where: {\n            classId: classItem.id,\n          },\n          orderBy: {\n            updatedAt: 'desc',\n          },\n          select: {\n            updatedAt: true,\n          },\n        });\n\n        // Get most recent student enrollment\n        const recentEnrollment = await prisma.classEnrollment.findFirst({\n          where: {\n            classId: classItem.id,\n          },\n          orderBy: {\n            joinedAt: 'desc',\n          },\n          select: {\n            joinedAt: true,\n          },\n        });\n        \n        // Collect dates for finding most recent activity\n        const dates = [\n          classInfo?.updatedAt,\n          recentQuiz?.updatedAt,\n          recentEnrollment?.joinedAt\n        ].filter(Boolean) as Date[];\n        \n        const lastActiveDate = dates.length \n          ? new Date(Math.max(...dates.map(date => date.getTime())))\n          : classItem.createdAt;\n\n        return {\n          id: classItem.id,\n          name: classItem.name,\n          description: classItem.description,\n          subject: classItem.subject,\n          type: classItem.type || \"Regular\",\n          isActive: classItem.isActive,\n          // Use code field for inviteCode\n          inviteCode: classItem.code,\n          createdAt: classItem.createdAt.toISOString(),\n          updatedAt: classItem.updatedAt.toISOString(),\n          studentCount: classItem._count.students,\n          quizCount: classItem._count.quizzes,\n          activeQuizCount,\n          averageScore,\n          lastActiveDate: lastActiveDate.toISOString(),\n        };\n      })\n    );\n\n    // Calculate pagination data\n    const totalPages = Math.ceil(totalClasses / parsedParams.limit);\n\n    return NextResponse.json({\n      classes: formattedClasses,\n      pagination: {\n        page: parsedParams.page,\n        limit: parsedParams.limit,\n        total: totalClasses,\n        totalPages,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error fetching classes:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch classes\" },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST handler for creating a new class\n */\nexport async function POST(req: NextRequest) {\n  try {\n    // Get user session\n    const session = await getServerSession(authOptions);\n\n    // Check authentication\n    if (!session || !session.user) {\n      return NextResponse.json(\n        { error: \"Unauthorized access\" },\n        { status: 401 }\n      );\n    }\n\n    // Check if user is a teacher\n    if (session.user.role !== Role.TEACHER) {\n      return NextResponse.json(\n        { error: \"Access denied: Teacher role required\" },\n        { status: 403 }\n      );\n    }\n\n    // Parse request body\n    const body = await req.json();\n\n    // Validate request body with type casting for ClassType\n    const classSchema = z.object({\n      name: z.string().min(1, \"Class name is required\"),\n      description: z.string().optional().nullable(),\n      subject: z.string().optional().nullable(),\n      type: z.nativeEnum(ClassType).optional(),\n      isActive: z.boolean().optional().default(true),\n    });\n\n    const validatedData = classSchema.parse(body);\n\n    try {\n      // Generate a unique invite code\n      const code = generateInviteCode();\n      \n      console.log(\"Creating class with data:\", {\n        ...validatedData,\n        teacherId: session.user.id,\n        code\n      });\n\n      // Create a new class\n      const newClass = await prisma.class.create({\n        data: {\n          ...validatedData,\n          teacherId: session.user.id,\n          code, // Use code field instead of inviteCode\n        },\n      });\n\n      return NextResponse.json(newClass, { status: 201 });\n    } catch (error) {\n      console.error(\"Database error creating class:\", error);\n      return NextResponse.json(\n        { error: \"Failed to create class\", message: (error as Error).message },\n        { status: 500 }\n      );\n    }\n  } catch (error) {\n    console.error(\"Error creating class:\", error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: \"Validation error\", details: error.errors },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: \"Failed to create class\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper function to generate a random invite code\nfunction generateInviteCode(length = 6): string {\n  try {\n    return generateRandomCode(length);\n  } catch (error) {\n    console.error(\"Error generating invite code:\", error);\n    // Fallback to manual implementation if the util function fails\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n  }\n}\n\n// Schema for query validation\nconst querySchema = z.object({\n  page: z.coerce.number().optional().default(1),\n  limit: z.coerce.number().optional().default(10),\n  search: z.string().optional(),\n  status: z.enum([\"active\", \"inactive\", \"all\", \"\"]).optional().default(\"all\"),\n  sortBy: z.enum([\"name\", \"createdAt\", \"updatedAt\", \"studentCount\", \"\"]).optional().default(\"updatedAt\"),\n  sortOrder: z.enum([\"asc\", \"desc\", \"\"]).optional().default(\"desc\"),\n}); "],"names":[],"mappings":"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","debugId":null}}]
}
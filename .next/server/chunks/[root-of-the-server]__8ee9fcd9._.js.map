{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\n"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { db } from \"@/lib/db\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { ROLES, RoleType } from \"@/lib/constants\"\n\n// Domain email được ủy quyền cao hơn\nconst AUTHORIZED_TEACHER_DOMAINS = ['school.edu', 'university.edu', 'teacher.org']\n\n// Fix cho type adapter\nconst prismaAdapter = PrismaAdapter(db) as any\n\n// Cải thiện error handling\nconst handleAuthError = (error: any, context: string) => {\n  console.error(`[Auth Error] ${context}:`, error);\n  return false;\n}\n\nexport const authOptions: AuthOptions = {\n  adapter: prismaAdapter,\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      allowDangerousEmailAccountLinking: true,\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60, // 24 hours\n    updateAge: 4 * 60 * 60, // 4 hours\n  },\n  callbacks: {\n    async jwt({ token, user, account, profile, trigger }) {\n      try {\n        // Trường hợp đăng nhập - Chỉ cập nhật token khi có user từ đăng nhập\n        if (user) {\n          // Đảm bảo role có thể null\n          token.role = user.role as RoleType | null;\n          token.id = user.id;\n          return token;\n        }\n        \n        // Trường hợp trigger update - Cập nhật token khi có sự thay đổi rõ ràng\n        if (trigger === 'update' && token?.sub) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { \n                id: true, \n                name: true, \n                email: true, \n                role: true, \n                image: true \n              }\n            });\n            \n            if (dbUser) {\n              // Cập nhật token với giá trị mới\n              token.role = dbUser.role as RoleType | null;\n              token.name = dbUser.name;\n              token.email = dbUser.email;\n              token.picture = dbUser.image;\n              \n              // Thêm timestamp để đảm bảo không cache token cũ\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error updating token:\", error);\n          }\n          return token;\n        }\n        \n        // Trường hợp token từ session: kiểm tra nếu cần cập nhật\n        if (token?.sub && (!token.role || !token.updatedAt || Date.now() - (token.updatedAt as number || 0) > 60 * 1000)) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { role: true }\n            });\n            \n            if (dbUser) {\n              token.role = dbUser.role as RoleType | null;\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error refreshing token:\", error);\n          }\n        }\n        \n        return token;\n      } catch (error) {\n        console.error(\"JWT callback error:\", error);\n        return token;\n      }\n    },\n    async session({ session, token }) {\n      try {\n        if (session.user && token) {\n          // Đảm bảo role có thể null\n          session.user.role = token.role as RoleType | null;\n          session.user.id = token.id as string;\n        }\n        return session;\n      } catch (error) {\n        console.error(\"Session callback error:\", error);\n        return session;\n      }\n    },\n    async signIn({ user, account, profile }) {\n      // Nếu user có email\n      if (user?.email) {\n        try {\n          // Kiểm tra user đã tồn tại chưa\n          const existingUser = await db.user.findUnique({\n            where: { email: user.email },\n          })\n          \n          if (!existingUser) {\n            // Tạo user mới không có role (null) để người dùng chọn sau\n            await db.user.create({\n              data: {\n                id: user.id,\n                email: user.email,\n                name: user.name,\n                image: user.image,\n                role: null, // Không thiết lập role mặc định\n              },\n            })\n            \n            // Đánh dấu để redirect tới trang chọn role\n            return true\n          }\n          \n          return true\n        } catch (error) {\n          return handleAuthError(error, \"signIn callback\");\n        }\n      }\n      \n      return true\n    }\n  },\n  pages: {\n    signIn: '/auth/signin',\n    signOut: '/',\n    error: '/auth/error',\n    newUser: '/auth/select-role' // Điều hướng người dùng mới đến trang chọn role\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === \"development\",\n  logger: {\n    error(code, ...message) {\n      console.error(`[NextAuth Error] ${code}:`, ...message);\n    },\n    warn(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.warn(`[NextAuth Warning] ${code}:`, ...message);\n      }\n    },\n    debug(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.debug(`[NextAuth Debug] ${code}:`, ...message);\n      }\n    },\n  },\n}\n\nconst handler = NextAuth(authOptions)\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/teacher/grading/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { Role, Answer } from \"@prisma/client\";\nimport { z } from \"zod\";\nimport { db } from \"@/lib/db\";\n\n// Validation schema for grading essay questions\nconst gradeEssaySchema = z.object({\n  answerId: z.string().min(1, \"Answer ID is required\"),\n  score: z.number().min(0, \"Score cannot be negative\"),\n  feedback: z.string().optional(),\n});\n\nexport async function POST(req: Request) {\n  try {\n    // Check authentication\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return NextResponse.json(\n        { error: \"Authentication required\" },\n        { status: 401 }\n      );\n    }\n    \n    // Verify the user is a teacher\n    if (session.user.role !== Role.TEACHER) {\n      return NextResponse.json(\n        { error: \"Only teachers can grade submissions\" },\n        { status: 403 }\n      );\n    }\n    \n    // Parse and validate request body\n    const body = await req.json();\n    const validationResult = gradeEssaySchema.safeParse(body);\n    \n    if (!validationResult.success) {\n      return NextResponse.json(\n        { \n          error: \"Validation error\", \n          details: validationResult.error.format() \n        },\n        { status: 400 }\n      );\n    }\n    \n    const { answerId, score, feedback } = validationResult.data;\n    \n    // Find the answer to verify it exists and the quiz is owned by this teacher\n    const answer = await db.answer.findUnique({\n      where: { id: answerId },\n      include: {\n        question: {\n          select: {\n            quizId: true,\n            points: true,\n          }\n        },\n        attempt: {\n          select: {\n            quizId: true,\n            userId: true,\n          }\n        }\n      }\n    });\n    \n    if (!answer) {\n      return NextResponse.json(\n        { error: \"Answer not found\" },\n        { status: 404 }\n      );\n    }\n    \n    // Verify the teacher has permission to grade this quiz\n    const quiz = await db.quiz.findUnique({\n      where: { id: answer.attempt.quizId },\n      select: { authorId: true }\n    });\n    \n    if (!quiz || quiz.authorId !== session.user.id) {\n      return NextResponse.json(\n        { error: \"You don't have permission to grade this quiz\" },\n        { status: 403 }\n      );\n    }\n    \n    // Ensure score doesn't exceed max points for the question\n    const maxPoints = answer.question.points;\n    const finalScore = Math.min(score, maxPoints);\n    \n    // Update the answer with the grade and feedback\n    const updatedAnswer = await db.answer.update({\n      where: { id: answerId },\n      data: {\n        score: finalScore,\n        feedback: feedback || null,\n        isCorrect: finalScore > 0, // If any points were awarded, consider it correct\n      }\n    });\n    \n    // Check if all answers for this attempt are now graded\n    const ungradedAnswers = await db.answer.count({\n      where: {\n        attemptId: answer.attemptId,\n        score: null\n      }\n    });\n    \n    // If all answers are now graded, calculate and update the attempt's total score\n    if (ungradedAnswers === 0) {\n      // Get all answers for this attempt\n      const allAnswers = await db.answer.findMany({\n        where: { attemptId: answer.attemptId },\n        include: {\n          question: {\n            select: { points: true }\n          }\n        }\n      });\n      \n      // Calculate total score and max possible score\n      let totalScore = 0;\n      let maxPossibleScore = 0;\n      \n      allAnswers.forEach((answer: Answer & { question: { points: number } }) => {\n        totalScore += answer.score || 0;\n        maxPossibleScore += answer.question.points;\n      });\n      \n      // Calculate percentage score\n      const percentageScore = maxPossibleScore > 0 \n        ? (totalScore / maxPossibleScore) * 100 \n        : 0;\n      \n      // Update the attempt with the final score\n      await db.quizAttempt.update({\n        where: { id: answer.attemptId },\n        data: {\n          score: percentageScore,\n          completedAt: new Date()\n        }\n      });\n      \n      // Create a notification for the student\n      await db.notification.create({\n        data: {\n          userId: answer.attempt.userId,\n          title: \"Quiz Graded\",\n          message: `Your quiz has been graded by your teacher.`,\n          category: \"QUIZ_GRADED\",\n          resourceId: answer.attempt.quizId,\n          resourceType: \"quiz\"\n        }\n      });\n    }\n    \n    return NextResponse.json(\n      { success: true, answer: updatedAnswer },\n      { status: 200 }\n    );\n    \n  } catch (error) {\n    console.error(\"Error grading essay:\", error);\n    return NextResponse.json(\n      { error: \"An unexpected error occurred\" },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}
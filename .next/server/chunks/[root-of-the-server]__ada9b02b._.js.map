{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\n"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { db } from \"@/lib/db\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { ROLES, RoleType } from \"@/lib/constants\"\n\n// Domain email được ủy quyền cao hơn\nconst AUTHORIZED_TEACHER_DOMAINS = ['school.edu', 'university.edu', 'teacher.org']\n\n// Fix cho type adapter\nconst prismaAdapter = PrismaAdapter(db) as any\n\n// Cải thiện error handling\nconst handleAuthError = (error: any, context: string) => {\n  console.error(`[Auth Error] ${context}:`, error);\n  return false;\n}\n\nexport const authOptions: AuthOptions = {\n  adapter: prismaAdapter,\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      allowDangerousEmailAccountLinking: true,\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60, // 24 hours\n    updateAge: 4 * 60 * 60, // 4 hours\n  },\n  callbacks: {\n    async jwt({ token, user, account, profile, trigger }) {\n      try {\n        // Trường hợp đăng nhập - Chỉ cập nhật token khi có user từ đăng nhập\n        if (user) {\n          // Đảm bảo role có thể null\n          token.role = user.role as RoleType | null;\n          token.id = user.id;\n          return token;\n        }\n        \n        // Trường hợp trigger update - Cập nhật token khi có sự thay đổi rõ ràng\n        if (trigger === 'update' && token?.sub) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { \n                id: true, \n                name: true, \n                email: true, \n                role: true, \n                image: true \n              }\n            });\n            \n            if (dbUser) {\n              // Cập nhật token với giá trị mới\n              token.role = dbUser.role as RoleType | null;\n              token.name = dbUser.name;\n              token.email = dbUser.email;\n              token.picture = dbUser.image;\n              \n              // Thêm timestamp để đảm bảo không cache token cũ\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error updating token:\", error);\n          }\n          return token;\n        }\n        \n        // Trường hợp token từ session: kiểm tra nếu cần cập nhật\n        if (token?.sub && (!token.role || !token.updatedAt || Date.now() - (token.updatedAt as number || 0) > 60 * 1000)) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { role: true }\n            });\n            \n            if (dbUser) {\n              token.role = dbUser.role as RoleType | null;\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error refreshing token:\", error);\n          }\n        }\n        \n        return token;\n      } catch (error) {\n        console.error(\"JWT callback error:\", error);\n        return token;\n      }\n    },\n    async session({ session, token }) {\n      try {\n        if (session.user && token) {\n          // Đảm bảo role có thể null\n          session.user.role = token.role as RoleType | null;\n          session.user.id = token.id as string;\n        }\n        return session;\n      } catch (error) {\n        console.error(\"Session callback error:\", error);\n        return session;\n      }\n    },\n    async signIn({ user, account, profile }) {\n      // Nếu user có email\n      if (user?.email) {\n        try {\n          // Kiểm tra user đã tồn tại chưa\n          const existingUser = await db.user.findUnique({\n            where: { email: user.email },\n          })\n          \n          if (!existingUser) {\n            // Tạo user mới không có role (null) để người dùng chọn sau\n            await db.user.create({\n              data: {\n                id: user.id,\n                email: user.email,\n                name: user.name,\n                image: user.image,\n                role: null, // Không thiết lập role mặc định\n              },\n            })\n            \n            // Đánh dấu để redirect tới trang chọn role\n            return true\n          }\n          \n          return true\n        } catch (error) {\n          return handleAuthError(error, \"signIn callback\");\n        }\n      }\n      \n      return true\n    }\n  },\n  pages: {\n    signIn: '/auth/signin',\n    signOut: '/',\n    error: '/auth/error',\n    newUser: '/auth/select-role' // Điều hướng người dùng mới đến trang chọn role\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === \"development\",\n  logger: {\n    error(code, ...message) {\n      console.error(`[NextAuth Error] ${code}:`, ...message);\n    },\n    warn(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.warn(`[NextAuth Warning] ${code}:`, ...message);\n      }\n    },\n    debug(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.debug(`[NextAuth Debug] ${code}:`, ...message);\n      }\n    },\n  },\n}\n\nconst handler = NextAuth(authOptions)\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/api-response.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { ZodError } from \"zod\";\n\n/**\n * Standard response structure for paginated data\n */\nexport interface PaginatedResponseData<T> {\n  success: boolean;\n  data: {\n    items: T[];\n    pagination: {\n      total: number;\n      page: number;\n      limit: number;\n      totalPages: number;\n    };\n  };\n  meta?: Record<string, any>;\n}\n\n/**\n * Standard response structure for single item data\n */\nexport interface SingleResponseData<T> {\n  success: boolean;\n  data: T;\n  meta?: Record<string, any>;\n}\n\n/**\n * Standard error response structure\n */\nexport interface ErrorResponseData {\n  success: boolean;\n  error: {\n    code: string;\n    message: string;\n    details?: any;\n  };\n}\n\n/**\n * Create a successful response with pagination\n */\nexport function createPaginatedResponse<T>(\n  data: T[],\n  total: number,\n  page: number,\n  limit: number,\n  meta?: Record<string, any>,\n  headers?: HeadersInit\n): NextResponse {\n  const response: PaginatedResponseData<T> = {\n    success: true,\n    data: {\n      items: data,\n      pagination: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit)\n      }\n    }\n  };\n\n  if (meta) {\n    response.meta = meta;\n  }\n\n  return NextResponse.json(response, { headers });\n}\n\n/**\n * Create a successful response for a single item\n */\nexport function createSuccessResponse<T>(\n  data: T,\n  status: number = 200,\n  meta?: Record<string, any>,\n  headers?: HeadersInit\n): NextResponse {\n  const response: SingleResponseData<T> = { \n    success: true,\n    data \n  };\n  \n  if (meta) {\n    response.meta = meta;\n  }\n  \n  return NextResponse.json(response, { status, headers });\n}\n\n/**\n * Create an error response\n */\nexport function createErrorResponse(\n  code: string,\n  message: string,\n  details?: any,\n  status: number = 400\n): NextResponse {\n  const response: ErrorResponseData = {\n    success: false,\n    error: {\n      code,\n      message\n    }\n  };\n  \n  if (details) {\n    response.error.details = details;\n  }\n  \n  return NextResponse.json(response, { status });\n}\n\n/**\n * Format Zod validation errors\n */\nexport function formatZodError(error: ZodError) {\n  return {\n    code: \"VALIDATION_ERROR\",\n    message: \"Invalid input data\",\n    details: error.errors.map(err => ({\n      path: err.path.join('.'),\n      message: err.message\n    }))\n  };\n}\n\n/**\n * Create an authenticated error response (401)\n */\nexport function createAuthenticationError(): NextResponse {\n  return createErrorResponse(\n    \"UNAUTHENTICATED\",\n    \"You must be logged in to access this resource\",\n    undefined,\n    401\n  );\n}\n\n/**\n * Create a permission error response (403)\n */\nexport function createPermissionError(message: string = \"You don't have permission to access this resource\"): NextResponse {\n  return createErrorResponse(\n    \"UNAUTHORIZED\", \n    message,\n    undefined,\n    403\n  );\n}\n\n/**\n * Create a not found error response (404)\n */\nexport function createNotFoundError(resource: string = \"Resource\"): NextResponse {\n  return createErrorResponse(\n    \"NOT_FOUND\",\n    `${resource} not found`,\n    undefined,\n    404\n  );\n}\n\n/**\n * Create a server error response (500)\n */\nexport function createServerError(error?: Error): NextResponse {\n  console.error(\"Server error:\", error);\n  \n  return createErrorResponse(\n    \"SERVER_ERROR\",\n    \"An unexpected error occurred\",\n    process.env.NODE_ENV === 'development' ? error?.message : undefined,\n    500\n  );\n}\n\n/**\n * Create a validation error response (400)\n */\nexport function createValidationError(details?: any): NextResponse {\n  return createErrorResponse(\n    \"VALIDATION_ERROR\",\n    \"Invalid input data\",\n    details,\n    400\n  );\n} "],"names":[],"mappings":";;;;;;;;;;;AAAA;;AA4CO,SAAS,wBACd,IAAS,EACT,KAAa,EACb,IAAY,EACZ,KAAa,EACb,IAA0B,EAC1B,OAAqB;IAErB,MAAM,WAAqC;QACzC,SAAS;QACT,MAAM;YACJ,OAAO;YACP,YAAY;gBACV;gBACA;gBACA;gBACA,YAAY,KAAK,IAAI,CAAC,QAAQ;YAChC;QACF;IACF;IAEA,IAAI,MAAM;QACR,SAAS,IAAI,GAAG;IAClB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;IAAQ;AAC/C;AAKO,SAAS,sBACd,IAAO,EACP,SAAiB,GAAG,EACpB,IAA0B,EAC1B,OAAqB;IAErB,MAAM,WAAkC;QACtC,SAAS;QACT;IACF;IAEA,IAAI,MAAM;QACR,SAAS,IAAI,GAAG;IAClB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;QAAQ;IAAQ;AACvD;AAKO,SAAS,oBACd,IAAY,EACZ,OAAe,EACf,OAAa,EACb,SAAiB,GAAG;IAEpB,MAAM,WAA8B;QAClC,SAAS;QACT,OAAO;YACL;YACA;QACF;IACF;IAEA,IAAI,SAAS;QACX,SAAS,KAAK,CAAC,OAAO,GAAG;IAC3B;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;IAAO;AAC9C;AAKO,SAAS,eAAe,KAAe;IAC5C,OAAO;QACL,MAAM;QACN,SAAS;QACT,SAAS,MAAM,MAAM,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;gBAChC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC;gBACpB,SAAS,IAAI,OAAO;YACtB,CAAC;IACH;AACF;AAKO,SAAS;IACd,OAAO,oBACL,mBACA,iDACA,WACA;AAEJ;AAKO,SAAS,sBAAsB,UAAkB,mDAAmD;IACzG,OAAO,oBACL,gBACA,SACA,WACA;AAEJ;AAKO,SAAS,oBAAoB,WAAmB,UAAU;IAC/D,OAAO,oBACL,aACA,GAAG,SAAS,UAAU,CAAC,EACvB,WACA;AAEJ;AAKO,SAAS,kBAAkB,KAAa;IAC7C,QAAQ,KAAK,CAAC,iBAAiB;IAE/B,OAAO,oBACL,gBACA,gCACA,uCAAyC,OAAO,gDAChD;AAEJ;AAKO,SAAS,sBAAsB,OAAa;IACjD,OAAO,oBACL,oBACA,sBACA,SACA;AAEJ","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/notification-service.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\r\n\r\n// Define notification categories as string literals\r\nexport type NotificationCategory = \r\n  | 'NEW_QUIZ'\r\n  | 'QUIZ_REMINDER'\r\n  | 'QUIZ_GRADED'\r\n  | 'CLASS_JOINED'\r\n  | 'CLASS_UPDATED'\r\n  | 'SYSTEM';\r\n\r\n/**\r\n * Create a notification for a single user\r\n */\r\nexport async function createNotification({\r\n  userId,\r\n  title,\r\n  message,\r\n  category,\r\n  resourceId,\r\n  resourceType,\r\n  expiredAt\r\n}: {\r\n  userId: string;\r\n  title: string;\r\n  message: string;\r\n  category: NotificationCategory;\r\n  resourceId?: string;\r\n  resourceType?: string;\r\n  expiredAt?: Date;\r\n}) {\r\n  return db.notification.create({\r\n    data: {\r\n      userId,\r\n      title,\r\n      message,\r\n      category: category as any, // Type cast to handle any enum conversion issues\r\n      resourceId,\r\n      resourceType,\r\n      expiredAt\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Create notifications for all students in a class\r\n */\r\nexport async function createNotificationsForClass({\r\n  classId,\r\n  title,\r\n  message,\r\n  category,\r\n  resourceId,\r\n  resourceType,\r\n  expiredAt,\r\n  excludeUserIds = []\r\n}: {\r\n  classId: string;\r\n  title: string;\r\n  message: string;\r\n  category: NotificationCategory;\r\n  resourceId?: string;\r\n  resourceType?: string;\r\n  expiredAt?: Date;\r\n  excludeUserIds?: string[];\r\n}) {\r\n  // Get all students in the class\r\n  const enrollments = await db.classEnrollment.findMany({\r\n    where: {\r\n      classId,\r\n      studentId: {\r\n        notIn: excludeUserIds\r\n      }\r\n    },\r\n    select: {\r\n      studentId: true\r\n    }\r\n  });\r\n  \r\n  // Create notifications for all students\r\n  if (enrollments.length > 0) {\r\n    await db.notification.createMany({\r\n      data: enrollments.map(enrollment => ({\r\n        userId: enrollment.studentId,\r\n        title,\r\n        message,\r\n        category: category as any, // Type cast to handle any enum conversion issues\r\n        resourceId,\r\n        resourceType,\r\n        expiredAt\r\n      }))\r\n    });\r\n  }\r\n  \r\n  return enrollments.length;\r\n}\r\n\r\n/**\r\n * Mark notifications as read\r\n */\r\nexport async function markNotificationsAsRead(userId: string, notificationIds?: string[]) {\r\n  if (notificationIds && notificationIds.length > 0) {\r\n    // Mark specific notifications as read\r\n    return db.notification.updateMany({\r\n      where: {\r\n        id: { in: notificationIds },\r\n        userId\r\n      },\r\n      data: {\r\n        isRead: true\r\n      }\r\n    });\r\n  } else {\r\n    // Mark all notifications as read\r\n    return db.notification.updateMany({\r\n      where: {\r\n        userId,\r\n        isRead: false\r\n      },\r\n      data: {\r\n        isRead: true\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Delete expired notifications\r\n * (This can be run as a scheduled job)\r\n */\r\nexport async function deleteExpiredNotifications() {\r\n  const now = new Date();\r\n  \r\n  return db.notification.deleteMany({\r\n    where: {\r\n      expiredAt: {\r\n        lt: now\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Create automated quiz reminders\r\n * (This can be run as a scheduled job)\r\n */\r\nexport async function createQuizReminders() {\r\n  const now = new Date();\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(tomorrow.getDate() + 1);\r\n  \r\n  // Find quizzes ending within the next 24 hours\r\n  const upcomingQuizzes = await db.quiz.findMany({\r\n    where: {\r\n      endDate: {\r\n        gte: now,\r\n        lte: tomorrow\r\n      },\r\n      isActive: true,\r\n      isPublished: true\r\n    },\r\n    include: {\r\n      class: {\r\n        select: {\r\n          id: true,\r\n          name: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Create reminder notifications\r\n  for (const quiz of upcomingQuizzes) {\r\n    if (quiz.classId) {\r\n      await createNotificationsForClass({\r\n        classId: quiz.classId,\r\n        title: \"Quiz Reminder\",\r\n        message: `The quiz \"${quiz.title}\" in class \"${quiz.class?.name}\" will end on ${quiz.endDate.toLocaleString()}`,\r\n        category: 'QUIZ_REMINDER',\r\n        resourceId: quiz.id,\r\n        resourceType: \"quiz\",\r\n        expiredAt: quiz.endDate\r\n      });\r\n    }\r\n  }\r\n  \r\n  return upcomingQuizzes.length;\r\n} "],"names":[],"mappings":";;;;;;;AAAA;;AAcO,eAAe,mBAAmB,EACvC,MAAM,EACN,KAAK,EACL,OAAO,EACP,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,SAAS,EASV;IACC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,MAAM,CAAC;QAC5B,MAAM;YACJ;YACA;YACA;YACA,UAAU;YACV;YACA;YACA;QACF;IACF;AACF;AAKO,eAAe,4BAA4B,EAChD,OAAO,EACP,KAAK,EACL,OAAO,EACP,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,SAAS,EACT,iBAAiB,EAAE,EAUpB;IACC,gCAAgC;IAChC,MAAM,cAAc,MAAM,2GAAA,CAAA,KAAE,CAAC,eAAe,CAAC,QAAQ,CAAC;QACpD,OAAO;YACL;YACA,WAAW;gBACT,OAAO;YACT;QACF;QACA,QAAQ;YACN,WAAW;QACb;IACF;IAEA,wCAAwC;IACxC,IAAI,YAAY,MAAM,GAAG,GAAG;QAC1B,MAAM,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAC/B,MAAM,YAAY,GAAG,CAAC,CAAA,aAAc,CAAC;oBACnC,QAAQ,WAAW,SAAS;oBAC5B;oBACA;oBACA,UAAU;oBACV;oBACA;oBACA;gBACF,CAAC;QACH;IACF;IAEA,OAAO,YAAY,MAAM;AAC3B;AAKO,eAAe,wBAAwB,MAAc,EAAE,eAA0B;IACtF,IAAI,mBAAmB,gBAAgB,MAAM,GAAG,GAAG;QACjD,sCAAsC;QACtC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,OAAO;gBACL,IAAI;oBAAE,IAAI;gBAAgB;gBAC1B;YACF;YACA,MAAM;gBACJ,QAAQ;YACV;QACF;IACF,OAAO;QACL,iCAAiC;QACjC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,OAAO;gBACL;gBACA,QAAQ;YACV;YACA,MAAM;gBACJ,QAAQ;YACV;QACF;IACF;AACF;AAMO,eAAe;IACpB,MAAM,MAAM,IAAI;IAEhB,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;QAChC,OAAO;YACL,WAAW;gBACT,IAAI;YACN;QACF;IACF;AACF;AAMO,eAAe;IACpB,MAAM,MAAM,IAAI;IAChB,MAAM,WAAW,IAAI,KAAK;IAC1B,SAAS,OAAO,CAAC,SAAS,OAAO,KAAK;IAEtC,+CAA+C;IAC/C,MAAM,kBAAkB,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC7C,OAAO;YACL,SAAS;gBACP,KAAK;gBACL,KAAK;YACP;YACA,UAAU;YACV,aAAa;QACf;QACA,SAAS;YACP,OAAO;gBACL,QAAQ;oBACN,IAAI;oBACJ,MAAM;gBACR;YACF;QACF;IACF;IAEA,gCAAgC;IAChC,KAAK,MAAM,QAAQ,gBAAiB;QAClC,IAAI,KAAK,OAAO,EAAE;YAChB,MAAM,4BAA4B;gBAChC,SAAS,KAAK,OAAO;gBACrB,OAAO;gBACP,SAAS,CAAC,UAAU,EAAE,KAAK,KAAK,CAAC,YAAY,EAAE,KAAK,KAAK,EAAE,KAAK,cAAc,EAAE,KAAK,OAAO,CAAC,cAAc,IAAI;gBAC/G,UAAU;gBACV,YAAY,KAAK,EAAE;gBACnB,cAAc;gBACd,WAAW,KAAK,OAAO;YACzB;QACF;IACF;IAEA,OAAO,gBAAgB,MAAM;AAC/B","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/quizzes/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { db } from \"@/lib/db\";\nimport { z } from \"zod\";\nimport { Role, QuestionType, NotificationType } from \"@prisma/client\";\nimport { \n  createSuccessResponse, \n  createErrorResponse, \n  createAuthenticationError,\n  createPermissionError,\n  createNotFoundError,\n  createServerError,\n  formatZodError\n} from \"@/lib/api-response\";\nimport { createNotificationsForClass } from \"@/lib/notification-service\";\n\n// Schema validation for updating a quiz\nconst updateQuizSchema = z.object({\n  title: z.string().min(1, \"Quiz title is required\").max(200, \"Quiz title too long\").optional(),\n  description: z.string().max(2000, \"Description too long\").optional().nullable(),\n  timeLimit: z.number().int().min(1, \"Time limit must be at least 1 minute\").optional(),\n  maxAttempts: z.number().int().positive().optional().nullable(),\n  passingScore: z.number().min(0).max(100, \"Passing score must be between 0-100\").optional().nullable(),\n  shuffleQuestions: z.boolean().optional(),\n  showResults: z.boolean().optional(),\n  startDate: z.string().datetime().optional().nullable(),\n  endDate: z.string().datetime().optional().nullable(),\n  isActive: z.boolean().optional(),\n  isPublished: z.boolean().optional(),\n  accessCode: z.string().max(20, \"Access code too long\").optional().nullable(),\n  category: z.string().max(50, \"Category too long\").optional().nullable(),\n  tags: z.array(z.string()).optional(),\n});\n\n// GET handler for retrieving a specific quiz by ID\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return createAuthenticationError();\n    }\n    \n    const quizId = params.id;\n    const isTeacher = session.user.role === Role.TEACHER;\n    \n    // Find quiz with different data based on user role\n    if (isTeacher) {\n      // Teacher view - include all information including questions and answers\n      const quiz = await db.quiz.findUnique({\n        where: { id: quizId },\n        include: {\n          author: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            }\n          },\n          class: {\n            select: {\n              id: true,\n              name: true,\n              code: true,\n              teacherId: true,\n              teacher: {\n                select: {\n                  id: true,\n                  name: true,\n                  image: true,\n                }\n              }\n            }\n          },\n          questions: {\n            orderBy: { order: 'asc' },\n            include: {\n              options: {\n                orderBy: { order: 'asc' },\n              },\n            }\n          },\n          _count: {\n            select: {\n              questions: true,\n              attempts: true,\n            }\n          }\n        }\n      });\n      \n      if (!quiz) {\n        return createNotFoundError(\"Quiz not found\");\n      }\n      \n      // Check if the teacher has permission to view this quiz\n      const isAuthor = quiz.authorId === session.user.id;\n      const isClassTeacher = quiz.class?.teacherId === session.user.id;\n      \n      if (!isAuthor && !isClassTeacher) {\n        return createPermissionError(\"You don't have permission to view this quiz\");\n      }\n      \n      return createSuccessResponse(quiz);\n    } else {\n      // Student view - don't include correct answers if student hasn't completed the quiz\n      // First check if the quiz is available to the student\n      const quizBasicInfo = await db.quiz.findUnique({\n        where: { \n          id: quizId,\n          isPublished: true,\n          isActive: true,\n        },\n        include: {\n          class: {\n            select: {\n              id: true,\n              name: true,\n              type: true,\n              students: {\n                where: {\n                  studentId: session.user.id\n                },\n                select: {\n                  id: true\n                }\n              }\n            }\n          }\n        }\n      });\n      \n      if (!quizBasicInfo) {\n        return createNotFoundError(\"Quiz not found or not available\");\n      }\n      \n      // Check if student is enrolled in the class (if quiz is attached to a class)\n      if (quizBasicInfo.classId) {\n        const isEnrolled = quizBasicInfo.class?.students && quizBasicInfo.class.students.length > 0;\n        const isPublicClass = quizBasicInfo.class?.type === \"PUBLIC\";\n        \n        if (!isEnrolled && !isPublicClass) {\n          return createPermissionError(\"You don't have access to this quiz\");\n        }\n      }\n      \n      // Check if quiz is within the available time frame\n      const now = new Date();\n      if (\n        (quizBasicInfo.startDate && new Date(quizBasicInfo.startDate) > now) ||\n        (quizBasicInfo.endDate && new Date(quizBasicInfo.endDate) < now)\n      ) {\n        return createErrorResponse(\n          \"QUIZ_NOT_AVAILABLE\",\n          \"This quiz is not available at this time\"\n        );\n      }\n      \n      // Check if student has remaining attempts\n      if (quizBasicInfo.maxAttempts) {\n        const attemptCount = await db.quizAttempt.count({\n          where: {\n            quizId,\n            userId: session.user.id\n          }\n        });\n        \n        if (attemptCount >= quizBasicInfo.maxAttempts) {\n          return createErrorResponse(\n            \"MAX_ATTEMPTS_REACHED\",\n            \"You have reached the maximum number of attempts for this quiz\"\n          );\n        }\n      }\n      \n      // Fetch quiz details for student (excluding correct answers)\n      const quiz = await db.quiz.findUnique({\n        where: { id: quizId },\n        include: {\n          author: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            }\n          },\n          class: {\n            select: {\n              id: true,\n              name: true,\n            }\n          },\n          questions: {\n            orderBy: { order: 'asc' },\n            select: {\n              id: true,\n              content: true,\n              type: true,\n              points: true,\n              order: true,\n              mediaUrl: true,\n              mediaType: true,\n              metadata: true,\n              category: true,\n              options: quizBasicInfo.shuffleQuestions \n                ? undefined \n                : {\n                    select: {\n                      id: true,\n                      content: true,\n                      order: true,\n                      matchId: true,\n                      group: true,\n                      position: true,\n                      // Don't include isCorrect\n                    },\n                    orderBy: { order: 'asc' },\n                  }\n            }\n          },\n          _count: {\n            select: {\n              questions: true,\n            }\n          },\n          attempts: {\n            where: {\n              userId: session.user.id\n            },\n            orderBy: {\n              startedAt: 'desc'\n            },\n            select: {\n              id: true,\n              startedAt: true,\n              completedAt: true,\n              score: true,\n              timeSpent: true,\n            },\n            take: 5 // Only return the most recent 5 attempts\n          }\n        }\n      });\n      \n      if (!quiz) {\n        return createNotFoundError(\"Quiz not found\");\n      }\n      \n      // Chuẩn bị kết quả cuối cùng để trả về\n      let finalResult = { ...quiz };\n      \n      // If quiz specifies to shuffle questions, randomize the order for the student\n      if (quizBasicInfo.shuffleQuestions && quiz.questions) {\n        // Make a deep copy to avoid mutation issues\n        const shuffledQuestions = [...quiz.questions].sort(() => Math.random() - 0.5);\n        \n        // For each question, fetch and shuffle options separately\n        const questionsWithOptions = await Promise.all(\n          shuffledQuestions.map(async (question) => {\n            const questionId = question.id;\n            \n            const options = await db.option.findMany({\n              where: { questionId },\n              select: {\n                id: true,\n                content: true,\n                order: true,\n                matchId: true,\n                group: true,\n                position: true,\n                // Don't include isCorrect\n              }\n            });\n            \n            // Shuffle options (except for certain question types where order matters)\n            if (\n              question.type !== QuestionType.FILL_BLANK && \n              question.type !== QuestionType.MATCHING\n            ) {\n              return { ...question, options: [...options].sort(() => Math.random() - 0.5) };\n            } else {\n              return { ...question, options };\n            }\n          })\n        );\n        \n        // Create a new object with shuffled questions instead of modifying finalResult\n        finalResult = {\n          ...finalResult,\n          questions: questionsWithOptions as any // Type assertion needed due to options field structure differences\n        };\n      }\n      \n      // Add attempt information\n      const attemptCount = await db.quizAttempt.count({\n        where: {\n          quizId,\n          userId: session.user.id\n        }\n      });\n      \n      // Add additional properties to our response\n      const enrichedQuizData = {\n        ...finalResult,\n        userAttemptCount: attemptCount,\n        attemptsRemaining: finalResult.maxAttempts \n          ? Math.max(0, finalResult.maxAttempts - attemptCount)\n          : null\n      };\n      \n      return createSuccessResponse(enrichedQuizData);\n    }\n    \n  } catch (error) {\n    console.error(\"Error fetching quiz:\", error);\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\n  }\n}\n\n// PUT handler for updating a quiz\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return createAuthenticationError();\n    }\n    \n    // Only teachers can update quizzes\n    if (session.user.role !== Role.TEACHER) {\n      return createPermissionError(\"Only teachers can update quizzes\");\n    }\n    \n    const quizId = params.id;\n    \n    // Check if quiz exists and teacher has permission to update it\n    const existingQuiz = await db.quiz.findUnique({\n      where: {\n        id: quizId,\n      },\n      include: {\n        attempts: {\n          select: {\n            id: true,\n          },\n          take: 1, // We only need to check if there are any attempts\n        },\n      }\n    });\n    \n    if (!existingQuiz) {\n      return createNotFoundError(\"Quiz not found\");\n    }\n    \n    // Only the author can update the quiz\n    if (existingQuiz.authorId !== session.user.id) {\n      return createPermissionError(\"You don't have permission to update this quiz\");\n    }\n    \n    const body = await request.json();\n    \n    const validationResult = updateQuizSchema.safeParse(body);\n    \n    if (!validationResult.success) {\n      return createErrorResponse(\n        \"VALIDATION_ERROR\",\n        \"Invalid quiz data\",\n        formatZodError(validationResult.error)\n      );\n    }\n    \n    const data = validationResult.data;\n    \n    // Validate dates if provided\n    if (data.startDate && data.endDate) {\n      const startDate = new Date(data.startDate);\n      const endDate = new Date(data.endDate);\n      \n      if (startDate > endDate) {\n        return createErrorResponse(\n          \"VALIDATION_ERROR\",\n          \"Start date must be before end date\",\n          { startDate: \"Start date must be before end date\" }\n        );\n      }\n    }\n    \n    // Check if quiz has attempts - restrict changes if it does\n    const hasAttempts = existingQuiz.attempts.length > 0;\n    \n    if (hasAttempts) {\n      // Only restrict certain fields, but allow updating time-related fields\n      const restrictedFields = ['shuffleQuestions'];\n      \n      for (const field of restrictedFields) {\n        // Safe type checking using type assertion and explicit checks\n        const fieldName = field as keyof typeof data;\n        if (fieldName in data && data[fieldName] !== undefined) {\n          const quizField = field as keyof typeof existingQuiz;\n          if (data[fieldName] !== existingQuiz[quizField]) {\n            return createErrorResponse(\n              \"CANNOT_MODIFY\",\n              `Cannot modify ${field} for quizzes that have been attempted`,\n              { [field]: `Cannot modify ${field} for quizzes that have been attempted` }\n            );\n          }\n        }\n      }\n    }\n    \n    // Parse dates for database\n    const parsedData = {\n      ...data,\n      startDate: data.startDate !== undefined \n        ? (data.startDate === null ? null : new Date(data.startDate)) \n        : undefined,\n      endDate: data.endDate !== undefined \n        ? (data.endDate === null ? null : new Date(data.endDate)) \n        : undefined,\n    };\n    \n    // Update quiz\n    const updatedQuiz = await db.quiz.update({\n      where: {\n        id: quizId,\n      },\n      data: parsedData,\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        classId: true,\n        timeLimit: true,\n        maxAttempts: true,\n        passingScore: true,\n        shuffleQuestions: true,\n        showResults: true,\n        startDate: true,\n        endDate: true,\n        isActive: true,\n        isPublished: true,\n        accessCode: true,\n        category: true,\n        tags: true,\n        updatedAt: true,\n      }\n    });\n    \n    // Create notifications if the quiz is published or its publish state changed\n    if (data.isPublished === true && !existingQuiz.isPublished && existingQuiz.classId) {\n      const classDetails = await db.class.findUnique({\n        where: { id: existingQuiz.classId },\n        select: { name: true }\n      });\n      \n      if (classDetails) {\n        await createNotificationsForClass({\n          classId: existingQuiz.classId,\n          title: \"New Quiz Available\",\n          message: `A new quiz \"${updatedQuiz.title}\" is available in class \"${classDetails.name}\"`,\n          category: 'NEW_QUIZ',\n          resourceId: updatedQuiz.id,\n          resourceType: \"quiz\",\n          expiredAt: updatedQuiz.endDate ? new Date(updatedQuiz.endDate) : undefined\n        });\n      }\n    }\n    \n    // If significant details changed, notify students\n    if (\n      existingQuiz.isPublished && \n      data.isPublished !== false && \n      existingQuiz.classId &&\n      (data.title || data.startDate || data.endDate || data.timeLimit)\n    ) {\n      const classDetails = await db.class.findUnique({\n        where: { id: existingQuiz.classId },\n        select: { name: true }\n      });\n      \n      if (classDetails) {\n        let changeMessage = \"The following details have been updated: \";\n        const changes = [];\n        \n        if (data.title && data.title !== existingQuiz.title) changes.push(\"title\");\n        if (data.startDate && existingQuiz.startDate?.toISOString() !== new Date(data.startDate).toISOString()) changes.push(\"start date\");\n        if (data.endDate && existingQuiz.endDate?.toISOString() !== new Date(data.endDate).toISOString()) changes.push(\"end date\");\n        if (data.timeLimit && data.timeLimit !== existingQuiz.timeLimit) changes.push(\"time limit\");\n        \n        changeMessage += changes.join(\", \");\n        \n        // Create notification with properly typed dates\n        await createNotificationsForClass({\n          classId: existingQuiz.classId,\n          title: \"Quiz Updated\",\n          message: `Quiz \"${updatedQuiz.title}\" in class \"${classDetails.name}\" has been updated. ${changeMessage}`,\n          category: 'NEW_QUIZ',\n          resourceId: updatedQuiz.id,\n          resourceType: \"quiz\",\n          expiredAt: data.endDate ? new Date(data.endDate) : undefined\n        });\n        \n        // If the quiz was updated to have a start date in the future, set a reminder\n        if (data.startDate && new Date(data.startDate) > new Date()) {\n          const reminderTime = new Date(data.startDate);\n          reminderTime.setHours(reminderTime.getHours() - 24); // 24 hours before\n          \n          if (reminderTime > new Date()) {\n            // Schedule a reminder notification - but API doesn't support scheduled notifications so just create a reminder notification\n            await db.notification.create({\n              data: {\n                userId: existingQuiz.authorId,\n                category: NotificationType.QUIZ_REMINDER,\n                title: 'Quiz Reminder',\n                message: `Don't forget to check your quiz \"${updatedQuiz.title}\"`,\n                resourceId: updatedQuiz.id,\n                resourceType: \"quiz\"\n              }\n            });\n          }\n        }\n      }\n    }\n    \n    return createSuccessResponse(updatedQuiz);\n  } catch (error) {\n    console.error(\"Error updating quiz:\", error);\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\n  }\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;AACA;AACA;AASA;;;;;;;;AAEA,wCAAwC;AACxC,MAAM,mBAAmB,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,0BAA0B,GAAG,CAAC,KAAK,uBAAuB,QAAQ;IAC3F,aAAa,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,wBAAwB,QAAQ,GAAG,QAAQ;IAC7E,WAAW,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,wCAAwC,QAAQ;IACnF,aAAa,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ;IAC5D,cAAc,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,uCAAuC,QAAQ,GAAG,QAAQ;IACnG,kBAAkB,sIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ;IACtC,aAAa,sIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ;IACjC,WAAW,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ;IACpD,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ;IAClD,UAAU,sIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ;IAC9B,aAAa,sIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ;IACjC,YAAY,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,wBAAwB,QAAQ,GAAG,QAAQ;IAC1E,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,qBAAqB,QAAQ,GAAG,QAAQ;IACrE,MAAM,sIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ;AACpC;AAGO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,mJAAA,CAAA,cAAW;QAElD,IAAI,CAAC,SAAS,MAAM;YAClB,OAAO,CAAA,GAAA,wHAAA,CAAA,4BAAyB,AAAD;QACjC;QAEA,MAAM,SAAS,OAAO,EAAE;QACxB,MAAM,YAAY,QAAQ,IAAI,CAAC,IAAI,KAAK,6HAAA,CAAA,OAAI,CAAC,OAAO;QAEpD,mDAAmD;QACnD,IAAI,WAAW;YACb,yEAAyE;YACzE,MAAM,OAAO,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;gBACpC,OAAO;oBAAE,IAAI;gBAAO;gBACpB,SAAS;oBACP,QAAQ;wBACN,QAAQ;4BACN,IAAI;4BACJ,MAAM;4BACN,OAAO;wBACT;oBACF;oBACA,OAAO;wBACL,QAAQ;4BACN,IAAI;4BACJ,MAAM;4BACN,MAAM;4BACN,WAAW;4BACX,SAAS;gCACP,QAAQ;oCACN,IAAI;oCACJ,MAAM;oCACN,OAAO;gCACT;4BACF;wBACF;oBACF;oBACA,WAAW;wBACT,SAAS;4BAAE,OAAO;wBAAM;wBACxB,SAAS;4BACP,SAAS;gCACP,SAAS;oCAAE,OAAO;gCAAM;4BAC1B;wBACF;oBACF;oBACA,QAAQ;wBACN,QAAQ;4BACN,WAAW;4BACX,UAAU;wBACZ;oBACF;gBACF;YACF;YAEA,IAAI,CAAC,MAAM;gBACT,OAAO,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD,EAAE;YAC7B;YAEA,wDAAwD;YACxD,MAAM,WAAW,KAAK,QAAQ,KAAK,QAAQ,IAAI,CAAC,EAAE;YAClD,MAAM,iBAAiB,KAAK,KAAK,EAAE,cAAc,QAAQ,IAAI,CAAC,EAAE;YAEhE,IAAI,CAAC,YAAY,CAAC,gBAAgB;gBAChC,OAAO,CAAA,GAAA,wHAAA,CAAA,wBAAqB,AAAD,EAAE;YAC/B;YAEA,OAAO,CAAA,GAAA,wHAAA,CAAA,wBAAqB,AAAD,EAAE;QAC/B,OAAO;YACL,oFAAoF;YACpF,sDAAsD;YACtD,MAAM,gBAAgB,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC7C,OAAO;oBACL,IAAI;oBACJ,aAAa;oBACb,UAAU;gBACZ;gBACA,SAAS;oBACP,OAAO;wBACL,QAAQ;4BACN,IAAI;4BACJ,MAAM;4BACN,MAAM;4BACN,UAAU;gCACR,OAAO;oCACL,WAAW,QAAQ,IAAI,CAAC,EAAE;gCAC5B;gCACA,QAAQ;oCACN,IAAI;gCACN;4BACF;wBACF;oBACF;gBACF;YACF;YAEA,IAAI,CAAC,eAAe;gBAClB,OAAO,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD,EAAE;YAC7B;YAEA,6EAA6E;YAC7E,IAAI,cAAc,OAAO,EAAE;gBACzB,MAAM,aAAa,cAAc,KAAK,EAAE,YAAY,cAAc,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG;gBAC1F,MAAM,gBAAgB,cAAc,KAAK,EAAE,SAAS;gBAEpD,IAAI,CAAC,cAAc,CAAC,eAAe;oBACjC,OAAO,CAAA,GAAA,wHAAA,CAAA,wBAAqB,AAAD,EAAE;gBAC/B;YACF;YAEA,mDAAmD;YACnD,MAAM,MAAM,IAAI;YAChB,IACE,AAAC,cAAc,SAAS,IAAI,IAAI,KAAK,cAAc,SAAS,IAAI,OAC/D,cAAc,OAAO,IAAI,IAAI,KAAK,cAAc,OAAO,IAAI,KAC5D;gBACA,OAAO,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD,EACvB,sBACA;YAEJ;YAEA,0CAA0C;YAC1C,IAAI,cAAc,WAAW,EAAE;gBAC7B,MAAM,eAAe,MAAM,2GAAA,CAAA,KAAE,CAAC,WAAW,CAAC,KAAK,CAAC;oBAC9C,OAAO;wBACL;wBACA,QAAQ,QAAQ,IAAI,CAAC,EAAE;oBACzB;gBACF;gBAEA,IAAI,gBAAgB,cAAc,WAAW,EAAE;oBAC7C,OAAO,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD,EACvB,wBACA;gBAEJ;YACF;YAEA,6DAA6D;YAC7D,MAAM,OAAO,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;gBACpC,OAAO;oBAAE,IAAI;gBAAO;gBACpB,SAAS;oBACP,QAAQ;wBACN,QAAQ;4BACN,IAAI;4BACJ,MAAM;4BACN,OAAO;wBACT;oBACF;oBACA,OAAO;wBACL,QAAQ;4BACN,IAAI;4BACJ,MAAM;wBACR;oBACF;oBACA,WAAW;wBACT,SAAS;4BAAE,OAAO;wBAAM;wBACxB,QAAQ;4BACN,IAAI;4BACJ,SAAS;4BACT,MAAM;4BACN,QAAQ;4BACR,OAAO;4BACP,UAAU;4BACV,WAAW;4BACX,UAAU;4BACV,UAAU;4BACV,SAAS,cAAc,gBAAgB,GACnC,YACA;gCACE,QAAQ;oCACN,IAAI;oCACJ,SAAS;oCACT,OAAO;oCACP,SAAS;oCACT,OAAO;oCACP,UAAU;gCAEZ;gCACA,SAAS;oCAAE,OAAO;gCAAM;4BAC1B;wBACN;oBACF;oBACA,QAAQ;wBACN,QAAQ;4BACN,WAAW;wBACb;oBACF;oBACA,UAAU;wBACR,OAAO;4BACL,QAAQ,QAAQ,IAAI,CAAC,EAAE;wBACzB;wBACA,SAAS;4BACP,WAAW;wBACb;wBACA,QAAQ;4BACN,IAAI;4BACJ,WAAW;4BACX,aAAa;4BACb,OAAO;4BACP,WAAW;wBACb;wBACA,MAAM,EAAE,yCAAyC;oBACnD;gBACF;YACF;YAEA,IAAI,CAAC,MAAM;gBACT,OAAO,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD,EAAE;YAC7B;YAEA,uCAAuC;YACvC,IAAI,cAAc;gBAAE,GAAG,IAAI;YAAC;YAE5B,8EAA8E;YAC9E,IAAI,cAAc,gBAAgB,IAAI,KAAK,SAAS,EAAE;gBACpD,4CAA4C;gBAC5C,MAAM,oBAAoB;uBAAI,KAAK,SAAS;iBAAC,CAAC,IAAI,CAAC,IAAM,KAAK,MAAM,KAAK;gBAEzE,0DAA0D;gBAC1D,MAAM,uBAAuB,MAAM,QAAQ,GAAG,CAC5C,kBAAkB,GAAG,CAAC,OAAO;oBAC3B,MAAM,aAAa,SAAS,EAAE;oBAE9B,MAAM,UAAU,MAAM,2GAAA,CAAA,KAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;wBACvC,OAAO;4BAAE;wBAAW;wBACpB,QAAQ;4BACN,IAAI;4BACJ,SAAS;4BACT,OAAO;4BACP,SAAS;4BACT,OAAO;4BACP,UAAU;wBAEZ;oBACF;oBAEA,0EAA0E;oBAC1E,IACE,SAAS,IAAI,KAAK,6HAAA,CAAA,eAAY,CAAC,UAAU,IACzC,SAAS,IAAI,KAAK,6HAAA,CAAA,eAAY,CAAC,QAAQ,EACvC;wBACA,OAAO;4BAAE,GAAG,QAAQ;4BAAE,SAAS;mCAAI;6BAAQ,CAAC,IAAI,CAAC,IAAM,KAAK,MAAM,KAAK;wBAAK;oBAC9E,OAAO;wBACL,OAAO;4BAAE,GAAG,QAAQ;4BAAE;wBAAQ;oBAChC;gBACF;gBAGF,+EAA+E;gBAC/E,cAAc;oBACZ,GAAG,WAAW;oBACd,WAAW;gBACb;YACF;YAEA,0BAA0B;YAC1B,MAAM,eAAe,MAAM,2GAAA,CAAA,KAAE,CAAC,WAAW,CAAC,KAAK,CAAC;gBAC9C,OAAO;oBACL;oBACA,QAAQ,QAAQ,IAAI,CAAC,EAAE;gBACzB;YACF;YAEA,4CAA4C;YAC5C,MAAM,mBAAmB;gBACvB,GAAG,WAAW;gBACd,kBAAkB;gBAClB,mBAAmB,YAAY,WAAW,GACtC,KAAK,GAAG,CAAC,GAAG,YAAY,WAAW,GAAG,gBACtC;YACN;YAEA,OAAO,CAAA,GAAA,wHAAA,CAAA,wBAAqB,AAAD,EAAE;QAC/B;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD,EAAE,iBAAiB,QAAQ,QAAQ,IAAI,MAAM;IACtE;AACF;AAGO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,mJAAA,CAAA,cAAW;QAElD,IAAI,CAAC,SAAS,MAAM;YAClB,OAAO,CAAA,GAAA,wHAAA,CAAA,4BAAyB,AAAD;QACjC;QAEA,mCAAmC;QACnC,IAAI,QAAQ,IAAI,CAAC,IAAI,KAAK,6HAAA,CAAA,OAAI,CAAC,OAAO,EAAE;YACtC,OAAO,CAAA,GAAA,wHAAA,CAAA,wBAAqB,AAAD,EAAE;QAC/B;QAEA,MAAM,SAAS,OAAO,EAAE;QAExB,+DAA+D;QAC/D,MAAM,eAAe,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YAC5C,OAAO;gBACL,IAAI;YACN;YACA,SAAS;gBACP,UAAU;oBACR,QAAQ;wBACN,IAAI;oBACN;oBACA,MAAM;gBACR;YACF;QACF;QAEA,IAAI,CAAC,cAAc;YACjB,OAAO,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD,EAAE;QAC7B;QAEA,sCAAsC;QACtC,IAAI,aAAa,QAAQ,KAAK,QAAQ,IAAI,CAAC,EAAE,EAAE;YAC7C,OAAO,CAAA,GAAA,wHAAA,CAAA,wBAAqB,AAAD,EAAE;QAC/B;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,mBAAmB,iBAAiB,SAAS,CAAC;QAEpD,IAAI,CAAC,iBAAiB,OAAO,EAAE;YAC7B,OAAO,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD,EACvB,oBACA,qBACA,CAAA,GAAA,wHAAA,CAAA,iBAAc,AAAD,EAAE,iBAAiB,KAAK;QAEzC;QAEA,MAAM,OAAO,iBAAiB,IAAI;QAElC,6BAA6B;QAC7B,IAAI,KAAK,SAAS,IAAI,KAAK,OAAO,EAAE;YAClC,MAAM,YAAY,IAAI,KAAK,KAAK,SAAS;YACzC,MAAM,UAAU,IAAI,KAAK,KAAK,OAAO;YAErC,IAAI,YAAY,SAAS;gBACvB,OAAO,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD,EACvB,oBACA,sCACA;oBAAE,WAAW;gBAAqC;YAEtD;QACF;QAEA,2DAA2D;QAC3D,MAAM,cAAc,aAAa,QAAQ,CAAC,MAAM,GAAG;QAEnD,IAAI,aAAa;YACf,uEAAuE;YACvE,MAAM,mBAAmB;gBAAC;aAAmB;YAE7C,KAAK,MAAM,SAAS,iBAAkB;gBACpC,8DAA8D;gBAC9D,MAAM,YAAY;gBAClB,IAAI,aAAa,QAAQ,IAAI,CAAC,UAAU,KAAK,WAAW;oBACtD,MAAM,YAAY;oBAClB,IAAI,IAAI,CAAC,UAAU,KAAK,YAAY,CAAC,UAAU,EAAE;wBAC/C,OAAO,CAAA,GAAA,wHAAA,CAAA,sBAAmB,AAAD,EACvB,iBACA,CAAC,cAAc,EAAE,MAAM,qCAAqC,CAAC,EAC7D;4BAAE,CAAC,MAAM,EAAE,CAAC,cAAc,EAAE,MAAM,qCAAqC,CAAC;wBAAC;oBAE7E;gBACF;YACF;QACF;QAEA,2BAA2B;QAC3B,MAAM,aAAa;YACjB,GAAG,IAAI;YACP,WAAW,KAAK,SAAS,KAAK,YACzB,KAAK,SAAS,KAAK,OAAO,OAAO,IAAI,KAAK,KAAK,SAAS,IACzD;YACJ,SAAS,KAAK,OAAO,KAAK,YACrB,KAAK,OAAO,KAAK,OAAO,OAAO,IAAI,KAAK,KAAK,OAAO,IACrD;QACN;QAEA,cAAc;QACd,MAAM,cAAc,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACvC,OAAO;gBACL,IAAI;YACN;YACA,MAAM;YACN,QAAQ;gBACN,IAAI;gBACJ,OAAO;gBACP,aAAa;gBACb,SAAS;gBACT,WAAW;gBACX,aAAa;gBACb,cAAc;gBACd,kBAAkB;gBAClB,aAAa;gBACb,WAAW;gBACX,SAAS;gBACT,UAAU;gBACV,aAAa;gBACb,YAAY;gBACZ,UAAU;gBACV,MAAM;gBACN,WAAW;YACb;QACF;QAEA,6EAA6E;QAC7E,IAAI,KAAK,WAAW,KAAK,QAAQ,CAAC,aAAa,WAAW,IAAI,aAAa,OAAO,EAAE;YAClF,MAAM,eAAe,MAAM,2GAAA,CAAA,KAAE,CAAC,KAAK,CAAC,UAAU,CAAC;gBAC7C,OAAO;oBAAE,IAAI,aAAa,OAAO;gBAAC;gBAClC,QAAQ;oBAAE,MAAM;gBAAK;YACvB;YAEA,IAAI,cAAc;gBAChB,MAAM,CAAA,GAAA,gIAAA,CAAA,8BAA2B,AAAD,EAAE;oBAChC,SAAS,aAAa,OAAO;oBAC7B,OAAO;oBACP,SAAS,CAAC,YAAY,EAAE,YAAY,KAAK,CAAC,yBAAyB,EAAE,aAAa,IAAI,CAAC,CAAC,CAAC;oBACzF,UAAU;oBACV,YAAY,YAAY,EAAE;oBAC1B,cAAc;oBACd,WAAW,YAAY,OAAO,GAAG,IAAI,KAAK,YAAY,OAAO,IAAI;gBACnE;YACF;QACF;QAEA,kDAAkD;QAClD,IACE,aAAa,WAAW,IACxB,KAAK,WAAW,KAAK,SACrB,aAAa,OAAO,IACpB,CAAC,KAAK,KAAK,IAAI,KAAK,SAAS,IAAI,KAAK,OAAO,IAAI,KAAK,SAAS,GAC/D;YACA,MAAM,eAAe,MAAM,2GAAA,CAAA,KAAE,CAAC,KAAK,CAAC,UAAU,CAAC;gBAC7C,OAAO;oBAAE,IAAI,aAAa,OAAO;gBAAC;gBAClC,QAAQ;oBAAE,MAAM;gBAAK;YACvB;YAEA,IAAI,cAAc;gBAChB,IAAI,gBAAgB;gBACpB,MAAM,UAAU,EAAE;gBAElB,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,aAAa,KAAK,EAAE,QAAQ,IAAI,CAAC;gBAClE,IAAI,KAAK,SAAS,IAAI,aAAa,SAAS,EAAE,kBAAkB,IAAI,KAAK,KAAK,SAAS,EAAE,WAAW,IAAI,QAAQ,IAAI,CAAC;gBACrH,IAAI,KAAK,OAAO,IAAI,aAAa,OAAO,EAAE,kBAAkB,IAAI,KAAK,KAAK,OAAO,EAAE,WAAW,IAAI,QAAQ,IAAI,CAAC;gBAC/G,IAAI,KAAK,SAAS,IAAI,KAAK,SAAS,KAAK,aAAa,SAAS,EAAE,QAAQ,IAAI,CAAC;gBAE9E,iBAAiB,QAAQ,IAAI,CAAC;gBAE9B,gDAAgD;gBAChD,MAAM,CAAA,GAAA,gIAAA,CAAA,8BAA2B,AAAD,EAAE;oBAChC,SAAS,aAAa,OAAO;oBAC7B,OAAO;oBACP,SAAS,CAAC,MAAM,EAAE,YAAY,KAAK,CAAC,YAAY,EAAE,aAAa,IAAI,CAAC,oBAAoB,EAAE,eAAe;oBACzG,UAAU;oBACV,YAAY,YAAY,EAAE;oBAC1B,cAAc;oBACd,WAAW,KAAK,OAAO,GAAG,IAAI,KAAK,KAAK,OAAO,IAAI;gBACrD;gBAEA,6EAA6E;gBAC7E,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,IAAI,QAAQ;oBAC3D,MAAM,eAAe,IAAI,KAAK,KAAK,SAAS;oBAC5C,aAAa,QAAQ,CAAC,aAAa,QAAQ,KAAK,KAAK,kBAAkB;oBAEvE,IAAI,eAAe,IAAI,QAAQ;wBAC7B,4HAA4H;wBAC5H,MAAM,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,MAAM,CAAC;4BAC3B,MAAM;gCACJ,QAAQ,aAAa,QAAQ;gCAC7B,UAAU,6HAAA,CAAA,mBAAgB,CAAC,aAAa;gCACxC,OAAO;gCACP,SAAS,CAAC,iCAAiC,EAAE,YAAY,KAAK,CAAC,CAAC,CAAC;gCACjE,YAAY,YAAY,EAAE;gCAC1B,cAAc;4BAChB;wBACF;oBACF;gBACF;YACF;QACF;QAEA,OAAO,CAAA,GAAA,wHAAA,CAAA,wBAAqB,AAAD,EAAE;IAC/B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD,EAAE,iBAAiB,QAAQ,QAAQ,IAAI,MAAM;IACtE;AACF","debugId":null}}]
}
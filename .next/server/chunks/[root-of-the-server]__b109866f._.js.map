{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\n"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { db } from \"@/lib/db\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { ROLES, RoleType } from \"@/lib/constants\"\n\n// Domain email được ủy quyền cao hơn\nconst AUTHORIZED_TEACHER_DOMAINS = ['school.edu', 'university.edu', 'teacher.org']\n\n// Fix cho type adapter\nconst prismaAdapter = PrismaAdapter(db) as any\n\n// Cải thiện error handling\nconst handleAuthError = (error: any, context: string) => {\n  console.error(`[Auth Error] ${context}:`, error);\n  return false;\n}\n\nexport const authOptions: AuthOptions = {\n  adapter: prismaAdapter,\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      allowDangerousEmailAccountLinking: true,\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60, // 24 hours\n    updateAge: 4 * 60 * 60, // 4 hours\n  },\n  callbacks: {\n    async jwt({ token, user, account, profile, trigger }) {\n      try {\n        // Trường hợp đăng nhập - Chỉ cập nhật token khi có user từ đăng nhập\n        if (user) {\n          // Đảm bảo role có thể null\n          token.role = user.role as RoleType | null;\n          token.id = user.id;\n          return token;\n        }\n        \n        // Trường hợp trigger update - Cập nhật token khi có sự thay đổi rõ ràng\n        if (trigger === 'update' && token?.sub) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { \n                id: true, \n                name: true, \n                email: true, \n                role: true, \n                image: true \n              }\n            });\n            \n            if (dbUser) {\n              // Cập nhật token với giá trị mới\n              token.role = dbUser.role as RoleType | null;\n              token.name = dbUser.name;\n              token.email = dbUser.email;\n              token.picture = dbUser.image;\n              \n              // Thêm timestamp để đảm bảo không cache token cũ\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error updating token:\", error);\n          }\n          return token;\n        }\n        \n        // Trường hợp token từ session: kiểm tra nếu cần cập nhật\n        if (token?.sub && (!token.role || !token.updatedAt || Date.now() - (token.updatedAt as number || 0) > 60 * 1000)) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { role: true }\n            });\n            \n            if (dbUser) {\n              token.role = dbUser.role as RoleType | null;\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error refreshing token:\", error);\n          }\n        }\n        \n        return token;\n      } catch (error) {\n        console.error(\"JWT callback error:\", error);\n        return token;\n      }\n    },\n    async session({ session, token }) {\n      try {\n        if (session.user && token) {\n          // Đảm bảo role có thể null\n          session.user.role = token.role as RoleType | null;\n          session.user.id = token.id as string;\n        }\n        return session;\n      } catch (error) {\n        console.error(\"Session callback error:\", error);\n        return session;\n      }\n    },\n    async signIn({ user, account, profile }) {\n      // Nếu user có email\n      if (user?.email) {\n        try {\n          // Kiểm tra user đã tồn tại chưa\n          const existingUser = await db.user.findUnique({\n            where: { email: user.email },\n          })\n          \n          if (!existingUser) {\n            // Tạo user mới không có role (null) để người dùng chọn sau\n            await db.user.create({\n              data: {\n                id: user.id,\n                email: user.email,\n                name: user.name,\n                image: user.image,\n                role: null, // Không thiết lập role mặc định\n              },\n            })\n            \n            // Đánh dấu để redirect tới trang chọn role\n            return true\n          }\n          \n          return true\n        } catch (error) {\n          return handleAuthError(error, \"signIn callback\");\n        }\n      }\n      \n      return true\n    }\n  },\n  pages: {\n    signIn: '/auth/signin',\n    signOut: '/',\n    error: '/auth/error',\n    newUser: '/auth/select-role' // Điều hướng người dùng mới đến trang chọn role\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === \"development\",\n  logger: {\n    error(code, ...message) {\n      console.error(`[NextAuth Error] ${code}:`, ...message);\n    },\n    warn(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.warn(`[NextAuth Warning] ${code}:`, ...message);\n      }\n    },\n    debug(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.debug(`[NextAuth Debug] ${code}:`, ...message);\n      }\n    },\n  },\n}\n\nconst handler = NextAuth(authOptions)\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/api-response.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { ZodError } from \"zod\";\n\n/**\n * Standard response structure for paginated data\n */\nexport interface PaginatedResponseData<T> {\n  success: boolean;\n  data: {\n    items: T[];\n    pagination: {\n      total: number;\n      page: number;\n      limit: number;\n      totalPages: number;\n    };\n  };\n  meta?: Record<string, any>;\n}\n\n/**\n * Standard response structure for single item data\n */\nexport interface SingleResponseData<T> {\n  success: boolean;\n  data: T;\n  meta?: Record<string, any>;\n}\n\n/**\n * Standard error response structure\n */\nexport interface ErrorResponseData {\n  success: boolean;\n  error: {\n    code: string;\n    message: string;\n    details?: any;\n  };\n}\n\n/**\n * Create a successful response with pagination\n */\nexport function createPaginatedResponse<T>(\n  data: T[],\n  total: number,\n  page: number,\n  limit: number,\n  meta?: Record<string, any>,\n  headers?: HeadersInit\n): NextResponse {\n  const response: PaginatedResponseData<T> = {\n    success: true,\n    data: {\n      items: data,\n      pagination: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit)\n      }\n    }\n  };\n\n  if (meta) {\n    response.meta = meta;\n  }\n\n  return NextResponse.json(response, { headers });\n}\n\n/**\n * Create a successful response for a single item\n */\nexport function createSuccessResponse<T>(\n  data: T,\n  status: number = 200,\n  meta?: Record<string, any>,\n  headers?: HeadersInit\n): NextResponse {\n  const response: SingleResponseData<T> = { \n    success: true,\n    data \n  };\n  \n  if (meta) {\n    response.meta = meta;\n  }\n  \n  return NextResponse.json(response, { status, headers });\n}\n\n/**\n * Create an error response\n */\nexport function createErrorResponse(\n  code: string,\n  message: string,\n  details?: any,\n  status: number = 400\n): NextResponse {\n  const response: ErrorResponseData = {\n    success: false,\n    error: {\n      code,\n      message\n    }\n  };\n  \n  if (details) {\n    response.error.details = details;\n  }\n  \n  return NextResponse.json(response, { status });\n}\n\n/**\n * Format Zod validation errors\n */\nexport function formatZodError(error: ZodError) {\n  return {\n    code: \"VALIDATION_ERROR\",\n    message: \"Invalid input data\",\n    details: error.errors.map(err => ({\n      path: err.path.join('.'),\n      message: err.message\n    }))\n  };\n}\n\n/**\n * Create an authenticated error response (401)\n */\nexport function createAuthenticationError(): NextResponse {\n  return createErrorResponse(\n    \"UNAUTHENTICATED\",\n    \"You must be logged in to access this resource\",\n    undefined,\n    401\n  );\n}\n\n/**\n * Create a permission error response (403)\n */\nexport function createPermissionError(message: string = \"You don't have permission to access this resource\"): NextResponse {\n  return createErrorResponse(\n    \"UNAUTHORIZED\", \n    message,\n    undefined,\n    403\n  );\n}\n\n/**\n * Create a not found error response (404)\n */\nexport function createNotFoundError(resource: string = \"Resource\"): NextResponse {\n  return createErrorResponse(\n    \"NOT_FOUND\",\n    `${resource} not found`,\n    undefined,\n    404\n  );\n}\n\n/**\n * Create a server error response (500)\n */\nexport function createServerError(error?: Error): NextResponse {\n  console.error(\"Server error:\", error);\n  \n  return createErrorResponse(\n    \"SERVER_ERROR\",\n    \"An unexpected error occurred\",\n    process.env.NODE_ENV === 'development' ? error?.message : undefined,\n    500\n  );\n}\n\n/**\n * Create a validation error response (400)\n */\nexport function createValidationError(details?: any): NextResponse {\n  return createErrorResponse(\n    \"VALIDATION_ERROR\",\n    \"Invalid input data\",\n    details,\n    400\n  );\n} "],"names":[],"mappings":";;;;;;;;;;;AAAA;;AA4CO,SAAS,wBACd,IAAS,EACT,KAAa,EACb,IAAY,EACZ,KAAa,EACb,IAA0B,EAC1B,OAAqB;IAErB,MAAM,WAAqC;QACzC,SAAS;QACT,MAAM;YACJ,OAAO;YACP,YAAY;gBACV;gBACA;gBACA;gBACA,YAAY,KAAK,IAAI,CAAC,QAAQ;YAChC;QACF;IACF;IAEA,IAAI,MAAM;QACR,SAAS,IAAI,GAAG;IAClB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;IAAQ;AAC/C;AAKO,SAAS,sBACd,IAAO,EACP,SAAiB,GAAG,EACpB,IAA0B,EAC1B,OAAqB;IAErB,MAAM,WAAkC;QACtC,SAAS;QACT;IACF;IAEA,IAAI,MAAM;QACR,SAAS,IAAI,GAAG;IAClB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;QAAQ;IAAQ;AACvD;AAKO,SAAS,oBACd,IAAY,EACZ,OAAe,EACf,OAAa,EACb,SAAiB,GAAG;IAEpB,MAAM,WAA8B;QAClC,SAAS;QACT,OAAO;YACL;YACA;QACF;IACF;IAEA,IAAI,SAAS;QACX,SAAS,KAAK,CAAC,OAAO,GAAG;IAC3B;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;IAAO;AAC9C;AAKO,SAAS,eAAe,KAAe;IAC5C,OAAO;QACL,MAAM;QACN,SAAS;QACT,SAAS,MAAM,MAAM,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;gBAChC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC;gBACpB,SAAS,IAAI,OAAO;YACtB,CAAC;IACH;AACF;AAKO,SAAS;IACd,OAAO,oBACL,mBACA,iDACA,WACA;AAEJ;AAKO,SAAS,sBAAsB,UAAkB,mDAAmD;IACzG,OAAO,oBACL,gBACA,SACA,WACA;AAEJ;AAKO,SAAS,oBAAoB,WAAmB,UAAU;IAC/D,OAAO,oBACL,aACA,GAAG,SAAS,UAAU,CAAC,EACvB,WACA;AAEJ;AAKO,SAAS,kBAAkB,KAAa;IAC7C,QAAQ,KAAK,CAAC,iBAAiB;IAE/B,OAAO,oBACL,gBACA,gCACA,uCAAyC,OAAO,gDAChD;AAEJ;AAKO,SAAS,sBAAsB,OAAa;IACjD,OAAO,oBACL,oBACA,sBACA,SACA;AAEJ","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/notification-service.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\r\n\r\n// Define notification categories as string literals\r\nexport type NotificationCategory = \r\n  | 'NEW_QUIZ'\r\n  | 'QUIZ_REMINDER'\r\n  | 'QUIZ_GRADED'\r\n  | 'CLASS_JOINED'\r\n  | 'CLASS_UPDATED'\r\n  | 'SYSTEM';\r\n\r\n/**\r\n * Create a notification for a single user\r\n */\r\nexport async function createNotification({\r\n  userId,\r\n  title,\r\n  message,\r\n  category,\r\n  resourceId,\r\n  resourceType,\r\n  expiredAt\r\n}: {\r\n  userId: string;\r\n  title: string;\r\n  message: string;\r\n  category: NotificationCategory;\r\n  resourceId?: string;\r\n  resourceType?: string;\r\n  expiredAt?: Date;\r\n}) {\r\n  return db.notification.create({\r\n    data: {\r\n      userId,\r\n      title,\r\n      message,\r\n      category: category as any, // Type cast to handle any enum conversion issues\r\n      resourceId,\r\n      resourceType,\r\n      expiredAt\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Create notifications for all students in a class\r\n */\r\nexport async function createNotificationsForClass({\r\n  classId,\r\n  title,\r\n  message,\r\n  category,\r\n  resourceId,\r\n  resourceType,\r\n  expiredAt,\r\n  excludeUserIds = []\r\n}: {\r\n  classId: string;\r\n  title: string;\r\n  message: string;\r\n  category: NotificationCategory;\r\n  resourceId?: string;\r\n  resourceType?: string;\r\n  expiredAt?: Date;\r\n  excludeUserIds?: string[];\r\n}) {\r\n  // Get all students in the class\r\n  const enrollments = await db.classEnrollment.findMany({\r\n    where: {\r\n      classId,\r\n      studentId: {\r\n        notIn: excludeUserIds\r\n      }\r\n    },\r\n    select: {\r\n      studentId: true\r\n    }\r\n  });\r\n  \r\n  // Create notifications for all students\r\n  if (enrollments.length > 0) {\r\n    await db.notification.createMany({\r\n      data: enrollments.map(enrollment => ({\r\n        userId: enrollment.studentId,\r\n        title,\r\n        message,\r\n        category: category as any, // Type cast to handle any enum conversion issues\r\n        resourceId,\r\n        resourceType,\r\n        expiredAt\r\n      }))\r\n    });\r\n  }\r\n  \r\n  return enrollments.length;\r\n}\r\n\r\n/**\r\n * Mark notifications as read\r\n */\r\nexport async function markNotificationsAsRead(userId: string, notificationIds?: string[]) {\r\n  if (notificationIds && notificationIds.length > 0) {\r\n    // Mark specific notifications as read\r\n    return db.notification.updateMany({\r\n      where: {\r\n        id: { in: notificationIds },\r\n        userId\r\n      },\r\n      data: {\r\n        isRead: true\r\n      }\r\n    });\r\n  } else {\r\n    // Mark all notifications as read\r\n    return db.notification.updateMany({\r\n      where: {\r\n        userId,\r\n        isRead: false\r\n      },\r\n      data: {\r\n        isRead: true\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Delete expired notifications\r\n * (This can be run as a scheduled job)\r\n */\r\nexport async function deleteExpiredNotifications() {\r\n  const now = new Date();\r\n  \r\n  return db.notification.deleteMany({\r\n    where: {\r\n      expiredAt: {\r\n        lt: now\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Create automated quiz reminders\r\n * (This can be run as a scheduled job)\r\n */\r\nexport async function createQuizReminders() {\r\n  const now = new Date();\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(tomorrow.getDate() + 1);\r\n  \r\n  // Find quizzes ending within the next 24 hours\r\n  const upcomingQuizzes = await db.quiz.findMany({\r\n    where: {\r\n      endDate: {\r\n        gte: now,\r\n        lte: tomorrow\r\n      },\r\n      isActive: true,\r\n      isPublished: true\r\n    },\r\n    include: {\r\n      class: {\r\n        select: {\r\n          id: true,\r\n          name: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Create reminder notifications\r\n  for (const quiz of upcomingQuizzes) {\r\n    if (quiz.classId) {\r\n      await createNotificationsForClass({\r\n        classId: quiz.classId,\r\n        title: \"Quiz Reminder\",\r\n        message: `The quiz \"${quiz.title}\" in class \"${quiz.class?.name}\" will end on ${quiz.endDate.toLocaleString()}`,\r\n        category: 'QUIZ_REMINDER',\r\n        resourceId: quiz.id,\r\n        resourceType: \"quiz\",\r\n        expiredAt: quiz.endDate\r\n      });\r\n    }\r\n  }\r\n  \r\n  return upcomingQuizzes.length;\r\n} "],"names":[],"mappings":";;;;;;;AAAA;;AAcO,eAAe,mBAAmB,EACvC,MAAM,EACN,KAAK,EACL,OAAO,EACP,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,SAAS,EASV;IACC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,MAAM,CAAC;QAC5B,MAAM;YACJ;YACA;YACA;YACA,UAAU;YACV;YACA;YACA;QACF;IACF;AACF;AAKO,eAAe,4BAA4B,EAChD,OAAO,EACP,KAAK,EACL,OAAO,EACP,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,SAAS,EACT,iBAAiB,EAAE,EAUpB;IACC,gCAAgC;IAChC,MAAM,cAAc,MAAM,2GAAA,CAAA,KAAE,CAAC,eAAe,CAAC,QAAQ,CAAC;QACpD,OAAO;YACL;YACA,WAAW;gBACT,OAAO;YACT;QACF;QACA,QAAQ;YACN,WAAW;QACb;IACF;IAEA,wCAAwC;IACxC,IAAI,YAAY,MAAM,GAAG,GAAG;QAC1B,MAAM,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAC/B,MAAM,YAAY,GAAG,CAAC,CAAA,aAAc,CAAC;oBACnC,QAAQ,WAAW,SAAS;oBAC5B;oBACA;oBACA,UAAU;oBACV;oBACA;oBACA;gBACF,CAAC;QACH;IACF;IAEA,OAAO,YAAY,MAAM;AAC3B;AAKO,eAAe,wBAAwB,MAAc,EAAE,eAA0B;IACtF,IAAI,mBAAmB,gBAAgB,MAAM,GAAG,GAAG;QACjD,sCAAsC;QACtC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,OAAO;gBACL,IAAI;oBAAE,IAAI;gBAAgB;gBAC1B;YACF;YACA,MAAM;gBACJ,QAAQ;YACV;QACF;IACF,OAAO;QACL,iCAAiC;QACjC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,OAAO;gBACL;gBACA,QAAQ;YACV;YACA,MAAM;gBACJ,QAAQ;YACV;QACF;IACF;AACF;AAMO,eAAe;IACpB,MAAM,MAAM,IAAI;IAEhB,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;QAChC,OAAO;YACL,WAAW;gBACT,IAAI;YACN;QACF;IACF;AACF;AAMO,eAAe;IACpB,MAAM,MAAM,IAAI;IAChB,MAAM,WAAW,IAAI,KAAK;IAC1B,SAAS,OAAO,CAAC,SAAS,OAAO,KAAK;IAEtC,+CAA+C;IAC/C,MAAM,kBAAkB,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC7C,OAAO;YACL,SAAS;gBACP,KAAK;gBACL,KAAK;YACP;YACA,UAAU;YACV,aAAa;QACf;QACA,SAAS;YACP,OAAO;gBACL,QAAQ;oBACN,IAAI;oBACJ,MAAM;gBACR;YACF;QACF;IACF;IAEA,gCAAgC;IAChC,KAAK,MAAM,QAAQ,gBAAiB;QAClC,IAAI,KAAK,OAAO,EAAE;YAChB,MAAM,4BAA4B;gBAChC,SAAS,KAAK,OAAO;gBACrB,OAAO;gBACP,SAAS,CAAC,UAAU,EAAE,KAAK,KAAK,CAAC,YAAY,EAAE,KAAK,KAAK,EAAE,KAAK,cAAc,EAAE,KAAK,OAAO,CAAC,cAAc,IAAI;gBAC/G,UAAU;gBACV,YAAY,KAAK,EAAE;gBACnB,cAAc;gBACd,WAAW,KAAK,OAAO;YACzB;QACF;IACF;IAEA,OAAO,gBAAgB,MAAM;AAC/B","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/service-trigger.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\r\nimport { createNotification, createNotificationsForClass, NotificationCategory } from \"@/lib/notification-service\";\r\n\r\n/**\r\n * Service triggers for handling notifications across the application\r\n * This file contains functions that can be called after certain events\r\n * to trigger notifications and other side effects\r\n */\r\n\r\n/**\r\n * Creates notifications for all students in a class when a new announcement is created\r\n */\r\nexport async function triggerClassAnnouncementNotification({\r\n  classId,\r\n  announcementId,\r\n  title,\r\n  content,\r\n  teacherId,\r\n}: {\r\n  classId: string;\r\n  announcementId: string;\r\n  title: string;\r\n  content: string;\r\n  teacherId: string;\r\n}) {\r\n  try {\r\n    // Get class details for the notification message\r\n    const classDetails = await db.class.findUnique({\r\n      where: { id: classId },\r\n      select: { name: true }\r\n    });\r\n\r\n    if (!classDetails) {\r\n      console.error(`Could not find class with ID ${classId} for announcement notification`);\r\n      return 0;\r\n    }\r\n\r\n    // Create notifications for all students in the class\r\n    const notifiedCount = await createNotificationsForClass({\r\n      classId,\r\n      title: \"New Class Announcement\",\r\n      message: `New announcement in \"${classDetails.name}\": ${title}`,\r\n      category: 'CLASS_UPDATED',\r\n      resourceId: classId, // Use the class ID as the resource (linking to the class page)\r\n      resourceType: \"class\",\r\n      // Exclude the teacher who created the announcement\r\n      excludeUserIds: [teacherId],\r\n    });\r\n\r\n    return notifiedCount;\r\n  } catch (error) {\r\n    console.error(\"Error creating class announcement notifications:\", error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates notifications when a class is updated (details changed)\r\n */\r\nexport async function triggerClassUpdatedNotification({\r\n  classId,\r\n  className,\r\n  teacherId,\r\n  updatedFields = []\r\n}: {\r\n  classId: string;\r\n  className: string;\r\n  teacherId: string;\r\n  updatedFields?: string[];\r\n}) {\r\n  try {\r\n    let message = `The class \"${className}\" has been updated`;\r\n    \r\n    // Add specific details about what was updated if available\r\n    if (updatedFields.length > 0) {\r\n      message += `: ${updatedFields.join(\", \")}`;\r\n    }\r\n\r\n    // Create notifications for all students in the class\r\n    const notifiedCount = await createNotificationsForClass({\r\n      classId,\r\n      title: \"Class Updated\",\r\n      message,\r\n      category: 'CLASS_UPDATED',\r\n      resourceId: classId,\r\n      resourceType: \"class\",\r\n      // Exclude the teacher who made the update\r\n      excludeUserIds: [teacherId]\r\n    });\r\n\r\n    return notifiedCount;\r\n  } catch (error) {\r\n    console.error(\"Error creating class updated notifications:\", error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates notifications when a quiz is graded\r\n */\r\nexport async function triggerQuizGradedNotification({\r\n  quizId,\r\n  quizTitle,\r\n  studentId,\r\n  score,\r\n  totalScore,\r\n  classId,\r\n  className,\r\n}: {\r\n  quizId: string;\r\n  quizTitle: string;\r\n  studentId: string;\r\n  score: number;\r\n  totalScore: number;\r\n  classId?: string;\r\n  className?: string;\r\n}) {\r\n  try {\r\n    let message = `Your quiz \"${quizTitle}\" has been graded. Score: ${score}/${totalScore}`;\r\n    \r\n    // Add class info if available\r\n    if (className) {\r\n      message += ` in class \"${className}\"`;\r\n    }\r\n\r\n    // Create notification for the student\r\n    await createNotification({\r\n      userId: studentId,\r\n      title: \"Quiz Graded\",\r\n      message,\r\n      category: 'QUIZ_GRADED',\r\n      resourceId: quizId,\r\n      resourceType: \"quiz\"\r\n    });\r\n\r\n    return 1;\r\n  } catch (error) {\r\n    console.error(\"Error creating quiz graded notification:\", error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Run scheduled tasks like sending reminders, etc.\r\n * This can be called from a cron job or similar\r\n */\r\nexport async function runScheduledNotificationTasks() {\r\n  try {\r\n    // Import the function here to avoid circular dependencies\r\n    const { createQuizReminders, deleteExpiredNotifications } = require(\"./notification-service\");\r\n    \r\n    // Run scheduled tasks\r\n    const reminderCount = await createQuizReminders();\r\n    const deletedCount = await deleteExpiredNotifications();\r\n    \r\n    return {\r\n      remindersSent: reminderCount,\r\n      notificationsDeleted: deletedCount\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error running scheduled notification tasks:\", error);\r\n    return {\r\n      remindersSent: 0,\r\n      notificationsDeleted: 0,\r\n      error: error instanceof Error ? error.message : \"Unknown error\"\r\n    };\r\n  }\r\n} "],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAWO,eAAe,qCAAqC,EACzD,OAAO,EACP,cAAc,EACd,KAAK,EACL,OAAO,EACP,SAAS,EAOV;IACC,IAAI;QACF,iDAAiD;QACjD,MAAM,eAAe,MAAM,2GAAA,CAAA,KAAE,CAAC,KAAK,CAAC,UAAU,CAAC;YAC7C,OAAO;gBAAE,IAAI;YAAQ;YACrB,QAAQ;gBAAE,MAAM;YAAK;QACvB;QAEA,IAAI,CAAC,cAAc;YACjB,QAAQ,KAAK,CAAC,CAAC,6BAA6B,EAAE,QAAQ,8BAA8B,CAAC;YACrF,OAAO;QACT;QAEA,qDAAqD;QACrD,MAAM,gBAAgB,MAAM,CAAA,GAAA,gIAAA,CAAA,8BAA2B,AAAD,EAAE;YACtD;YACA,OAAO;YACP,SAAS,CAAC,qBAAqB,EAAE,aAAa,IAAI,CAAC,GAAG,EAAE,OAAO;YAC/D,UAAU;YACV,YAAY;YACZ,cAAc;YACd,mDAAmD;YACnD,gBAAgB;gBAAC;aAAU;QAC7B;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oDAAoD;QAClE,OAAO;IACT;AACF;AAKO,eAAe,gCAAgC,EACpD,OAAO,EACP,SAAS,EACT,SAAS,EACT,gBAAgB,EAAE,EAMnB;IACC,IAAI;QACF,IAAI,UAAU,CAAC,WAAW,EAAE,UAAU,kBAAkB,CAAC;QAEzD,2DAA2D;QAC3D,IAAI,cAAc,MAAM,GAAG,GAAG;YAC5B,WAAW,CAAC,EAAE,EAAE,cAAc,IAAI,CAAC,OAAO;QAC5C;QAEA,qDAAqD;QACrD,MAAM,gBAAgB,MAAM,CAAA,GAAA,gIAAA,CAAA,8BAA2B,AAAD,EAAE;YACtD;YACA,OAAO;YACP;YACA,UAAU;YACV,YAAY;YACZ,cAAc;YACd,0CAA0C;YAC1C,gBAAgB;gBAAC;aAAU;QAC7B;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO;IACT;AACF;AAKO,eAAe,8BAA8B,EAClD,MAAM,EACN,SAAS,EACT,SAAS,EACT,KAAK,EACL,UAAU,EACV,OAAO,EACP,SAAS,EASV;IACC,IAAI;QACF,IAAI,UAAU,CAAC,WAAW,EAAE,UAAU,0BAA0B,EAAE,MAAM,CAAC,EAAE,YAAY;QAEvF,8BAA8B;QAC9B,IAAI,WAAW;YACb,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QACvC;QAEA,sCAAsC;QACtC,MAAM,CAAA,GAAA,gIAAA,CAAA,qBAAkB,AAAD,EAAE;YACvB,QAAQ;YACR,OAAO;YACP;YACA,UAAU;YACV,YAAY;YACZ,cAAc;QAChB;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,OAAO;IACT;AACF;AAMO,eAAe;IACpB,IAAI;QACF,0DAA0D;QAC1D,MAAM,EAAE,mBAAmB,EAAE,0BAA0B,EAAE;QAEzD,sBAAsB;QACtB,MAAM,gBAAgB,MAAM;QAC5B,MAAM,eAAe,MAAM;QAE3B,OAAO;YACL,eAAe;YACf,sBAAsB;QACxB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO;YACL,eAAe;YACf,sBAAsB;YACtB,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD;IACF;AACF","debugId":null}},
    {"offset": {"line": 694, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/classes/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { db } from \"@/lib/db\";\nimport { z } from \"zod\";\nimport { Role, ClassType, Prisma, Class, User } from \"@prisma/client\";\nimport { \n  createSuccessResponse, \n  createErrorResponse, \n  createAuthenticationError,\n  createPermissionError,\n  createNotFoundError,\n  createServerError,\n  formatZodError\n} from \"@/lib/api-response\";\nimport { triggerClassUpdatedNotification } from \"@/lib/service-trigger\";\n\n// Schema validation for updating a class\nconst updateClassSchema = z.object({\n  name: z.string().min(1, \"Class name is required\").max(100, \"Class name too long\").optional(),\n  description: z.string().max(1000, \"Description too long\").optional().nullable(),\n  subject: z.string().max(100, \"Subject name too long\").optional(),\n  type: z.enum([ClassType.PUBLIC, ClassType.PRIVATE]).optional(),\n  coverImage: z.string().url(\"Invalid image URL\").optional().nullable(),\n  maxStudents: z.number().int().positive().max(500, \"Maximum students too high\").optional(),\n  isActive: z.boolean().optional(),\n  code: z.string().regex(/^[A-Z0-9]{6,8}$/, \"Class code must be 6-8 uppercase letters or numbers\").optional(),\n});\n\n// Response interfaces\ninterface TeacherClassDetails {\n  id: string;\n  name: string;\n  description: string | null;\n  subject: string | null;\n  type: ClassType;\n  coverImage: string | null;\n  isActive: boolean;\n  maxStudents: number | null;\n  createdAt: Date;\n  updatedAt: Date;\n  teacherId: string;\n  teacher: {\n    id: string;\n    name: string | null;\n    image: string | null;\n  };\n  studentsCount: number;\n  quizzesCount: number;\n  announcementsCount: number;\n  materialsCount: number;\n  code: string | null;\n  students: Array<{\n    id: string;\n    name: string | null;\n    email: string;\n    image: string | null;\n    enrollmentId: string;\n    joinedAt: Date;\n  }>;\n}\n\ninterface StudentClassDetails {\n  id: string;\n  name: string;\n  description: string | null;\n  subject: string | null;\n  type: ClassType;\n  coverImage: string | null;\n  isActive: boolean;\n  maxStudents: number | null;\n  createdAt: Date;\n  updatedAt: Date;\n  teacherId: string;\n  teacher: {\n    id: string;\n    name: string | null;\n    image: string | null;\n  };\n  studentsCount: number;\n  quizzesCount: number;\n  announcementsCount: number;\n  materialsCount: number;\n  upcomingQuizCount?: number;\n  recentAnnouncementCount?: number;\n  isEnrolled: boolean;\n  enrollmentId?: string;\n  joinedAt?: Date;\n}\n\n// Prisma query result type for teacher view\ntype TeacherClassQueryResult = Class & {\n  teacher: Pick<User, 'id' | 'name' | 'image'>;\n  students: Array<{\n    id: string;\n    joinedAt: Date;\n    student: {\n      id: string;\n      name: string | null;\n      email: string;\n      image: string | null;\n    }\n  }>;\n  _count: {\n    students: number;\n    quizzes: number;\n    announcements: number;\n    materials: number;\n  };\n};\n\n// Prisma query result type for student view\ntype StudentClassQueryResult = Class & {\n  subject: string | null;\n  teacher: Pick<User, 'id' | 'name' | 'image'>;\n  students: Array<{\n    id: string;\n    joinedAt: Date;\n  }>;\n  quizzes: Array<{\n    id: string;\n  }>;\n  announcements: Array<{\n    id: string;\n  }>;\n  _count: {\n    students: number;\n    quizzes: number;\n    announcements: number;\n    materials: number;\n  };\n};\n\n// GET handler for retrieving a specific class by ID\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return createAuthenticationError();\n    }\n    \n    const classId = params.id;\n    const isTeacher = session.user.role === Role.TEACHER;\n    \n    if (isTeacher) {\n      // Teacher query\n      const classItem = await db.class.findUnique({\n        where: { id: classId },\n        include: {\n          teacher: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            }\n          },\n          students: {\n            include: {\n              student: {\n                select: {\n                  id: true,\n                  name: true,\n                  email: true,\n                  image: true,\n                }\n              }\n            },\n            orderBy: {\n              joinedAt: 'desc'\n            }\n          },\n          _count: {\n            select: {\n              students: true,\n              quizzes: true,\n              announcements: true,\n              materials: true,\n            }\n          },\n        },\n      }) as TeacherClassQueryResult | null;\n      \n      if (!classItem) {\n        return createNotFoundError(\"Class not found\");\n      }\n      \n      const teacherResponse: TeacherClassDetails = {\n        id: classItem.id,\n        name: classItem.name,\n        description: classItem.description,\n        subject: classItem.subject,\n        type: classItem.type,\n        coverImage: classItem.coverImage,\n        isActive: classItem.isActive,\n        maxStudents: classItem.maxStudents,\n        createdAt: classItem.createdAt,\n        updatedAt: classItem.updatedAt,\n        teacherId: classItem.teacherId,\n        teacher: {\n          id: classItem.teacher.id,\n          name: classItem.teacher.name,\n          image: classItem.teacher.image,\n        },\n        studentsCount: classItem._count.students,\n        quizzesCount: classItem._count.quizzes,\n        announcementsCount: classItem._count.announcements,\n        materialsCount: classItem._count.materials,\n        code: classItem.code,\n        students: classItem.students.map(enrollment => ({\n          id: enrollment.student.id,\n          name: enrollment.student.name,\n          email: enrollment.student.email,\n          image: enrollment.student.image,\n          enrollmentId: enrollment.id,\n          joinedAt: enrollment.joinedAt\n        }))\n      };\n      \n      return createSuccessResponse(teacherResponse);\n    } else {\n      // Student query\n      const classItem = await db.class.findUnique({\n        where: { id: classId },\n        include: {\n          teacher: {\n            select: {\n              id: true,\n              name: true,\n              image: true,\n            }\n          },\n          students: {\n            where: {\n              studentId: session.user.id\n            },\n            select: {\n              id: true,\n              joinedAt: true\n            }\n          },\n          quizzes: {\n            where: {\n              isPublished: true,\n              isActive: true,\n              OR: [\n                // Upcoming quizzes (start date in the future)\n                {\n                  startDate: {\n                    gt: new Date()\n                  }\n                },\n                // Ongoing quizzes (started but not ended)\n                {\n                  startDate: {\n                    lte: new Date()\n                  },\n                  endDate: {\n                    gte: new Date()\n                  }\n                }\n              ]\n            },\n            select: { id: true }\n          },\n          announcements: {\n            where: {\n              createdAt: {\n                gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Last 7 days\n              }\n            },\n            select: { id: true }\n          },\n          _count: {\n            select: {\n              students: true,\n              quizzes: true,\n              announcements: true,\n              materials: true,\n            }\n          },\n        },\n      }) as any; // Temporarily use 'any' type due to added relations\n      \n      if (!classItem) {\n        return createNotFoundError(\"Class not found\");\n      }\n      \n      // Permission check - Students can only view classes they're enrolled in or public classes\n      const isEnrolled = classItem.students.length > 0;\n      const isPublic = classItem.type === ClassType.PUBLIC;\n      \n      if (!isEnrolled && !isPublic) {\n        return createPermissionError(\"You don't have access to this class\");\n      }\n      \n      const studentResponse: StudentClassDetails = {\n        id: classItem.id,\n        name: classItem.name,\n        description: classItem.description,\n        subject: classItem.subject,\n        type: classItem.type,\n        coverImage: classItem.coverImage,\n        isActive: classItem.isActive,\n        maxStudents: classItem.maxStudents,\n        createdAt: classItem.createdAt,\n        updatedAt: classItem.updatedAt,\n        teacherId: classItem.teacherId,\n        teacher: {\n          id: classItem.teacher.id,\n          name: classItem.teacher.name,\n          image: classItem.teacher.image,\n        },\n        studentsCount: classItem._count.students,\n        quizzesCount: classItem._count.quizzes,\n        announcementsCount: classItem._count.announcements,\n        materialsCount: classItem._count.materials,\n        upcomingQuizCount: classItem.quizzes.length,\n        recentAnnouncementCount: classItem.announcements.length,\n        isEnrolled: isEnrolled\n      };\n      \n      if (isEnrolled) {\n        studentResponse.enrollmentId = classItem.students[0].id;\n        studentResponse.joinedAt = classItem.students[0].joinedAt;\n      }\n      \n      return createSuccessResponse(studentResponse);\n    }\n  } catch (error) {\n    console.error(\"Error fetching class:\", error);\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\n  }\n}\n\n// PUT handler for updating a class\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return createAuthenticationError();\n    }\n    \n    // Only teachers who own the class can update it\n    const classId = params.id;\n    \n    const existingClass = await db.class.findUnique({\n      where: {\n        id: classId,\n      },\n      select: {\n        teacherId: true,\n        code: true,\n        name: true,\n      }\n    });\n    \n    if (!existingClass) {\n      return createNotFoundError(\"Class not found\");\n    }\n    \n    // Check if user is the teacher of this class\n    if (existingClass.teacherId !== session.user.id) {\n      return createPermissionError(\"You don't have permission to update this class\");\n    }\n    \n    const body = await request.json();\n    \n    // Validate the update data\n    const validationResult = updateClassSchema.safeParse(body);\n    \n    if (!validationResult.success) {\n      return createErrorResponse(\n        \"VALIDATION_ERROR\",\n        \"Invalid class data\",\n        formatZodError(validationResult.error)\n      );\n    }\n    \n    const data = validationResult.data;\n    \n    // If code is being updated, check for duplicates\n    if (data.code && data.code !== existingClass.code) {\n      const classByCode = await db.class.findUnique({\n        where: {\n          code: data.code\n        }\n      });\n      \n      if (classByCode && classByCode.id !== classId) {\n        return createErrorResponse(\n          \"DUPLICATE_CODE\",\n          \"Class code already exists, please choose a different code\"\n        );\n      }\n    }\n\n    // Track updated fields to include in notification\n    const updatedFields = [];\n    if (data.name && data.name !== existingClass.name) {\n      updatedFields.push('name');\n    }\n    if (data.description) {\n      updatedFields.push('description');\n    }\n    if (data.subject) {\n      updatedFields.push('subject');\n    }\n    if (data.type) {\n      updatedFields.push('type');\n    }\n    if (data.isActive !== undefined) {\n      updatedFields.push('status');\n    }\n    if (data.maxStudents) {\n      updatedFields.push('maximum students');\n    }\n    if (data.coverImage) {\n      updatedFields.push('cover image');\n    }\n    if (data.code && data.code !== existingClass.code) {\n      updatedFields.push('class code');\n    }\n    \n    // Update the class\n    const updatedClass = await db.class.update({\n      where: {\n        id: classId,\n      },\n      data,\n    });\n\n    // Send notifications if significant changes were made\n    if (updatedFields.length > 0) {\n      // Send notifications to all enrolled students\n      await triggerClassUpdatedNotification({\n        classId,\n        className: updatedClass.name,\n        teacherId: session.user.id,\n        updatedFields\n      });\n    }\n    \n    return createSuccessResponse({\n      id: updatedClass.id,\n      name: updatedClass.name,\n      code: updatedClass.code,\n      type: updatedClass.type,\n      isActive: updatedClass.isActive,\n      updatedAt: updatedClass.updatedAt\n    });\n    \n  } catch (error) {\n    console.error(\"Error updating class:\", error);\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\n  }\n}\n\n// DELETE handler for deleting a class\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return createAuthenticationError();\n    }\n    \n    const classId = params.id;\n    \n    // Check if class exists and user is the teacher\n    const existingClass = await db.class.findUnique({\n      where: {\n        id: classId,\n      },\n      select: {\n        id: true,\n        name: true,\n        teacherId: true,\n      }\n    });\n    \n    if (!existingClass) {\n      return createNotFoundError(\"Class not found\");\n    }\n    \n    // Only the teacher who created the class can delete it\n    if (existingClass.teacherId !== session.user.id) {\n      return createPermissionError(\"You don't have permission to delete this class\");\n    }\n    \n    // Use a transaction to handle related records properly\n    await db.$transaction([\n      // Delete class announcements\n      db.classAnnouncement.deleteMany({\n        where: { classId }\n      }),\n      \n      // Delete class enrollments\n      db.classEnrollment.deleteMany({\n        where: { classId }\n      }),\n      \n      // Update quizzes to remove class association\n      db.quiz.updateMany({\n        where: { classId },\n        data: { classId: null }\n      }),\n      \n      // Finally delete the class\n      db.class.delete({\n        where: { id: classId }\n      })\n    ]);\n    \n    return createSuccessResponse({\n      message: \"Class deleted successfully\",\n      deletedClassId: classId\n    });\n    \n  } catch (error) {\n    console.error(\"Error deleting class:\", error);\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}
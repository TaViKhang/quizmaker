{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient | undefined;\r\n}\r\n\r\nexport const db = globalThis.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\r\n"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\"\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\r\nimport { db } from \"@/lib/db\"\r\nimport GoogleProvider from \"next-auth/providers/google\"\r\nimport { ROLES, RoleType } from \"@/lib/constants\"\r\n\r\n// Domain email được ủy quyền cao hơn\r\nconst AUTHORIZED_TEACHER_DOMAINS = ['school.edu', 'university.edu', 'teacher.org']\r\n\r\n// Fix cho type adapter\r\nconst prismaAdapter = PrismaAdapter(db) as any\r\n\r\n// Cải thiện error handling\r\nconst handleAuthError = (error: any, context: string) => {\r\n  console.error(`[Auth Error] ${context}:`, error);\r\n  return false;\r\n}\r\n\r\nexport const authOptions: AuthOptions = {\r\n  adapter: prismaAdapter,\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n      allowDangerousEmailAccountLinking: true,\r\n    }),\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n    maxAge: 24 * 60 * 60, // 24 hours\r\n    updateAge: 4 * 60 * 60, // 4 hours\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user, account, profile, trigger }) {\r\n      try {\r\n        // Trường hợp đăng nhập - Chỉ cập nhật token khi có user từ đăng nhập\r\n        if (user) {\r\n          // Đảm bảo role có thể null\r\n          token.role = user.role as RoleType | null;\r\n          token.id = user.id;\r\n          return token;\r\n        }\r\n        \r\n        // Trường hợp trigger update - Cập nhật token khi có sự thay đổi rõ ràng\r\n        if (trigger === 'update' && token?.sub) {\r\n          try {\r\n            const dbUser = await db.user.findUnique({\r\n              where: { id: token.sub },\r\n              select: { \r\n                id: true, \r\n                name: true, \r\n                email: true, \r\n                role: true, \r\n                image: true \r\n              }\r\n            });\r\n            \r\n            if (dbUser) {\r\n              // Cập nhật token với giá trị mới\r\n              token.role = dbUser.role as RoleType | null;\r\n              token.name = dbUser.name;\r\n              token.email = dbUser.email;\r\n              token.picture = dbUser.image;\r\n              \r\n              // Thêm timestamp để đảm bảo không cache token cũ\r\n              token.updatedAt = Date.now();\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error updating token:\", error);\r\n          }\r\n          return token;\r\n        }\r\n        \r\n        // Trường hợp token từ session: kiểm tra nếu cần cập nhật\r\n        if (token?.sub && (!token.role || !token.updatedAt || Date.now() - (token.updatedAt as number || 0) > 60 * 1000)) {\r\n          try {\r\n            const dbUser = await db.user.findUnique({\r\n              where: { id: token.sub },\r\n              select: { role: true }\r\n            });\r\n            \r\n            if (dbUser) {\r\n              token.role = dbUser.role as RoleType | null;\r\n              token.updatedAt = Date.now();\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error refreshing token:\", error);\r\n          }\r\n        }\r\n        \r\n        return token;\r\n      } catch (error) {\r\n        console.error(\"JWT callback error:\", error);\r\n        return token;\r\n      }\r\n    },\r\n    async session({ session, token }) {\r\n      try {\r\n        if (session.user && token) {\r\n          // Đảm bảo role có thể null\r\n          session.user.role = token.role as RoleType | null;\r\n          session.user.id = token.id as string;\r\n        }\r\n        return session;\r\n      } catch (error) {\r\n        console.error(\"Session callback error:\", error);\r\n        return session;\r\n      }\r\n    },\r\n    async signIn({ user, account, profile }) {\r\n      // Nếu user có email\r\n      if (user?.email) {\r\n        try {\r\n          // Kiểm tra user đã tồn tại chưa\r\n          const existingUser = await db.user.findUnique({\r\n            where: { email: user.email },\r\n          })\r\n          \r\n          if (!existingUser) {\r\n            // Tạo user mới không có role (null) để người dùng chọn sau\r\n            await db.user.create({\r\n              data: {\r\n                id: user.id,\r\n                email: user.email,\r\n                name: user.name,\r\n                image: user.image,\r\n                role: null, // Không thiết lập role mặc định\r\n              },\r\n            })\r\n            \r\n            // Đánh dấu để redirect tới trang chọn role\r\n            return true\r\n          }\r\n          \r\n          return true\r\n        } catch (error) {\r\n          return handleAuthError(error, \"signIn callback\");\r\n        }\r\n      }\r\n      \r\n      return true\r\n    }\r\n  },\r\n  pages: {\r\n    signIn: '/auth/signin',\r\n    signOut: '/',\r\n    error: '/auth/error',\r\n    newUser: '/auth/select-role' // Điều hướng người dùng mới đến trang chọn role\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  debug: process.env.NODE_ENV === \"development\",\r\n  logger: {\r\n    error(code, ...message) {\r\n      console.error(`[NextAuth Error] ${code}:`, ...message);\r\n    },\r\n    warn(code, ...message) {\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.warn(`[NextAuth Warning] ${code}:`, ...message);\r\n      }\r\n    },\r\n    debug(code, ...message) {\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.debug(`[NextAuth Debug] ${code}:`, ...message);\r\n      }\r\n    },\r\n  },\r\n}\r\n\r\nconst handler = NextAuth(authOptions)\r\nexport { handler as GET, handler as POST }\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/auth.ts"],"sourcesContent":["import { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\r\nimport { Role } from \"@prisma/client\";\r\nimport { cache } from \"react\";\r\n\r\n// Re-export authOptions from here to fix import issue\r\nexport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\r\n\r\n// Cache getSession để không truy vấn nhiều lần trong cùng một request\r\nexport const getSession = cache(async () => {\r\n  return await getServerSession(authOptions);\r\n});\r\n\r\n// Cache getCurrentUser để tối ưu hiệu suất\r\nexport const getCurrentUser = cache(async () => {\r\n  const session = await getSession();\r\n  return session?.user;\r\n});\r\n\r\nexport async function isAuthenticated() {\r\n  const session = await getSession();\r\n  return !!session?.user;\r\n}\r\n\r\nexport async function hasRole(role: Role) {\r\n  const user = await getCurrentUser();\r\n  return user?.role === role;\r\n}\r\n\r\nexport async function isTeacher() {\r\n  const user = await getCurrentUser();\r\n  return user?.role === Role.TEACHER;\r\n}\r\n\r\nexport async function isStudent() {\r\n  const user = await getCurrentUser();\r\n  return user?.role === Role.STUDENT;\r\n} "],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;;;;;;AAMO,MAAM,aAAa,CAAA,GAAA,uMAAA,CAAA,QAAK,AAAD,EAAE;IAC9B,OAAO,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,mJAAA,CAAA,cAAW;AAC3C;AAGO,MAAM,iBAAiB,CAAA,GAAA,uMAAA,CAAA,QAAK,AAAD,EAAE;IAClC,MAAM,UAAU,MAAM;IACtB,OAAO,SAAS;AAClB;AAEO,eAAe;IACpB,MAAM,UAAU,MAAM;IACtB,OAAO,CAAC,CAAC,SAAS;AACpB;AAEO,eAAe,QAAQ,IAAU;IACtC,MAAM,OAAO,MAAM;IACnB,OAAO,MAAM,SAAS;AACxB;AAEO,eAAe;IACpB,MAAM,OAAO,MAAM;IACnB,OAAO,MAAM,SAAS,6HAAA,CAAA,OAAI,CAAC,OAAO;AACpC;AAEO,eAAe;IACpB,MAAM,OAAO,MAAM;IACnB,OAAO,MAAM,SAAS,6HAAA,CAAA,OAAI,CAAC,OAAO;AACpC","debugId":null}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/users/me/class-participation-analytics/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"@/lib/auth\";\r\nimport { db } from \"@/lib/db\";\r\nimport { Role } from \"@prisma/client\";\r\n\r\n// GET method for retrieving class participation analytics\r\nexport async function GET(request: Request) {\r\n  try {\r\n    // Get the current user session\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session || !session.user) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Unauthorized - Please sign in\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Verify user is a student\r\n    if (session.user.role !== Role.STUDENT) {\r\n      return NextResponse.json(\r\n        { success: false, error: \"Access denied: Student role required\" },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Get timeFrame parameter from query string\r\n    const { searchParams } = new URL(request.url);\r\n    const timeFrame = searchParams.get('timeFrame') || 'last30days';\r\n    const userId = session.user.id;\r\n\r\n    // Determine date ranges based on timeFrame\r\n    const now = new Date();\r\n    let startDate: Date;\r\n    \r\n    switch (timeFrame) {\r\n      case 'last7days':\r\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7);\r\n        break;\r\n      case 'last90days':\r\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90);\r\n        break;\r\n      case 'allTime':\r\n        startDate = new Date(2000, 0, 1); // Far in the past to get everything\r\n        break;\r\n      case 'last30days':\r\n      default:\r\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30);\r\n        break;\r\n    }\r\n\r\n    // 1. Get all classes joined by the student\r\n    const classEnrollments = await db.classEnrollment.findMany({\r\n      where: {\r\n        studentId: userId,\r\n        class: {\r\n          isActive: true\r\n        }\r\n      },\r\n      include: {\r\n        class: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            _count: {\r\n              select: {\r\n                quizzes: {\r\n                  where: {\r\n                    isPublished: true,\r\n                    isActive: true\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    const enrolledClassIds = classEnrollments.map(ec => ec.classId);\r\n\r\n    // 2. Get quiz attempts for participation over time tracking\r\n    const quizAttempts = await db.quizAttempt.findMany({\r\n      where: {\r\n        userId: userId,\r\n        completedAt: {\r\n          not: null,\r\n          gte: startDate\r\n        },\r\n        quiz: {\r\n          classId: {\r\n            in: enrolledClassIds\r\n          },\r\n          isPublished: true\r\n        }\r\n      },\r\n      include: {\r\n        quiz: {\r\n          select: {\r\n            id: true,\r\n            classId: true,\r\n            title: true\r\n          }\r\n        }\r\n      },\r\n      orderBy: {\r\n        completedAt: 'asc'\r\n      }\r\n    });\r\n\r\n    // 3. Group attempts by quiz and get best attempt per quiz for accurate counting\r\n    const quizBestAttempts = new Map<string, any>();\r\n\r\n    quizAttempts.forEach(attempt => {\r\n      const quizId = attempt.quiz.id;\r\n      const existing = quizBestAttempts.get(quizId);\r\n\r\n      if (!existing || (attempt.score || 0) > (existing.score || 0)) {\r\n        quizBestAttempts.set(quizId, attempt);\r\n      }\r\n    });\r\n\r\n    const uniqueQuizAttempts = Array.from(quizBestAttempts.values());\r\n\r\n    // 4. Compute total study time (using unique quizzes completed)\r\n    // For simplicity, we'll estimate based on completed quizzes (10 minutes per quiz)\r\n    const AVERAGE_QUIZ_TIME_SECONDS = 600; // 10 minutes per quiz\r\n    const totalStudyTimeSeconds = uniqueQuizAttempts.length * AVERAGE_QUIZ_TIME_SECONDS;\r\n\r\n    // 5. Calculate participation over time (aggregated by week) using unique quizzes\r\n    const participationByWeek = new Map<string, Set<string>>();\r\n\r\n    uniqueQuizAttempts.forEach(attempt => {\r\n      if (attempt.completedAt) {\r\n        // Format week as YYYY-MM-DD (using Monday of the week)\r\n        const date = new Date(attempt.completedAt);\r\n        const day = date.getDay(); // 0 (Sunday) to 6 (Saturday)\r\n        const mondayOffset = day === 0 ? -6 : 1 - day; // Calculate days since last Monday\r\n        const monday = new Date(date);\r\n        monday.setDate(date.getDate() + mondayOffset);\r\n\r\n        const weekKey = monday.toISOString().split('T')[0];\r\n\r\n        if (!participationByWeek.has(weekKey)) {\r\n          participationByWeek.set(weekKey, new Set());\r\n        }\r\n        participationByWeek.get(weekKey)!.add(attempt.quiz.id);\r\n      }\r\n    });\r\n\r\n    // Convert to array for response\r\n    const participationOverTime = Array.from(participationByWeek).map(([date, quizSet]) => ({\r\n      date,\r\n      completedQuizzes: quizSet.size // Count unique quizzes per week\r\n    })).sort((a, b) => a.date.localeCompare(b.date)); // Ensure chronological order\r\n\r\n    // 6. Calculate class performance breakdown using unique quizzes\r\n    const classPerformanceBreakdown = classEnrollments.map(enrollment => {\r\n      // Count unique completed quizzes for this class\r\n      const classQuizAttempts = uniqueQuizAttempts.filter(\r\n        attempt => attempt.quiz.classId === enrollment.classId\r\n      );\r\n      const completedQuizCount = classQuizAttempts.length;\r\n\r\n      // Calculate completion rate\r\n      const assignedQuizCount = enrollment.class._count.quizzes;\r\n      const completionRate = assignedQuizCount > 0\r\n        ? (completedQuizCount / assignedQuizCount) * 100\r\n        : 0;\r\n\r\n      // Estimate time spent in class\r\n      const timeSpentInClassSeconds = completedQuizCount * AVERAGE_QUIZ_TIME_SECONDS;\r\n\r\n      return {\r\n        classId: enrollment.classId,\r\n        className: enrollment.class.name,\r\n        quizzesAssigned: assignedQuizCount,\r\n        quizzesCompletedByStudent: completedQuizCount, // Now counts unique quizzes\r\n        classCompletionRate: parseFloat(completionRate.toFixed(1)),\r\n        timeSpentInClassSeconds: timeSpentInClassSeconds\r\n      };\r\n    });\r\n\r\n    // 6. Compile the final analytics data\r\n    const analyticsData = {\r\n      keyMetrics: {\r\n        activeClasses: classEnrollments.length,\r\n        overallEngagementRate: classPerformanceBreakdown.length > 0\r\n          ? parseFloat((classPerformanceBreakdown.reduce((sum, c) => sum + c.classCompletionRate, 0) / classPerformanceBreakdown.length).toFixed(1))\r\n          : 0,\r\n        totalStudyTimeSeconds: totalStudyTimeSeconds\r\n      },\r\n      classPerformanceBreakdown: classPerformanceBreakdown,\r\n      participationOverTime: participationOverTime\r\n    };\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: analyticsData\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching class participation analytics:\", error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: \"Failed to fetch analytics\",\r\n        message: error instanceof Error ? error.message : \"Unknown error\"\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}
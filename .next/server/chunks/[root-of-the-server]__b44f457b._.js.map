{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\n"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { db } from \"@/lib/db\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { ROLES, RoleType } from \"@/lib/constants\"\n\n// Domain email được ủy quyền cao hơn\nconst AUTHORIZED_TEACHER_DOMAINS = ['school.edu', 'university.edu', 'teacher.org']\n\n// Fix cho type adapter\nconst prismaAdapter = PrismaAdapter(db) as any\n\n// Cải thiện error handling\nconst handleAuthError = (error: any, context: string) => {\n  console.error(`[Auth Error] ${context}:`, error);\n  return false;\n}\n\nexport const authOptions: AuthOptions = {\n  adapter: prismaAdapter,\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      allowDangerousEmailAccountLinking: true,\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60, // 24 hours\n    updateAge: 4 * 60 * 60, // 4 hours\n  },\n  callbacks: {\n    async jwt({ token, user, account, profile, trigger }) {\n      try {\n        // Trường hợp đăng nhập - Chỉ cập nhật token khi có user từ đăng nhập\n        if (user) {\n          // Đảm bảo role có thể null\n          token.role = user.role as RoleType | null;\n          token.id = user.id;\n          return token;\n        }\n        \n        // Trường hợp trigger update - Cập nhật token khi có sự thay đổi rõ ràng\n        if (trigger === 'update' && token?.sub) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { \n                id: true, \n                name: true, \n                email: true, \n                role: true, \n                image: true \n              }\n            });\n            \n            if (dbUser) {\n              // Cập nhật token với giá trị mới\n              token.role = dbUser.role as RoleType | null;\n              token.name = dbUser.name;\n              token.email = dbUser.email;\n              token.picture = dbUser.image;\n              \n              // Thêm timestamp để đảm bảo không cache token cũ\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error updating token:\", error);\n          }\n          return token;\n        }\n        \n        // Trường hợp token từ session: kiểm tra nếu cần cập nhật\n        if (token?.sub && (!token.role || !token.updatedAt || Date.now() - (token.updatedAt as number || 0) > 60 * 1000)) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { role: true }\n            });\n            \n            if (dbUser) {\n              token.role = dbUser.role as RoleType | null;\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error refreshing token:\", error);\n          }\n        }\n        \n        return token;\n      } catch (error) {\n        console.error(\"JWT callback error:\", error);\n        return token;\n      }\n    },\n    async session({ session, token }) {\n      try {\n        if (session.user && token) {\n          // Đảm bảo role có thể null\n          session.user.role = token.role as RoleType | null;\n          session.user.id = token.id as string;\n        }\n        return session;\n      } catch (error) {\n        console.error(\"Session callback error:\", error);\n        return session;\n      }\n    },\n    async signIn({ user, account, profile }) {\n      // Nếu user có email\n      if (user?.email) {\n        try {\n          // Kiểm tra user đã tồn tại chưa\n          const existingUser = await db.user.findUnique({\n            where: { email: user.email },\n          })\n          \n          if (!existingUser) {\n            // Tạo user mới không có role (null) để người dùng chọn sau\n            await db.user.create({\n              data: {\n                id: user.id,\n                email: user.email,\n                name: user.name,\n                image: user.image,\n                role: null, // Không thiết lập role mặc định\n              },\n            })\n            \n            // Đánh dấu để redirect tới trang chọn role\n            return true\n          }\n          \n          return true\n        } catch (error) {\n          return handleAuthError(error, \"signIn callback\");\n        }\n      }\n      \n      return true\n    }\n  },\n  pages: {\n    signIn: '/auth/signin',\n    signOut: '/',\n    error: '/auth/error',\n    newUser: '/auth/select-role' // Điều hướng người dùng mới đến trang chọn role\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === \"development\",\n  logger: {\n    error(code, ...message) {\n      console.error(`[NextAuth Error] ${code}:`, ...message);\n    },\n    warn(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.warn(`[NextAuth Warning] ${code}:`, ...message);\n      }\n    },\n    debug(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.debug(`[NextAuth Debug] ${code}:`, ...message);\n      }\n    },\n  },\n}\n\nconst handler = NextAuth(authOptions)\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/prisma.ts"],"sourcesContent":["import { db } from './db';\n\n// Re-export với tên khác để không phá vỡ code đang sử dụng\nexport const prisma = db;"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,SAAS,2GAAA,CAAA,KAAE","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/teacher/quizzes/%5BquizId%5D/questions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { prisma } from \"@/lib/prisma\";\nimport { QuestionType, Role } from \"@prisma/client\";\nimport { z } from \"zod\";\n\n// Common schema for question data\nconst questionBaseSchema = z.object({\n  content: z.string().min(1).max(10000),\n  explanation: z.string().optional(),\n  points: z.coerce.number().int().min(1),\n  type: z.nativeEnum(QuestionType),\n  order: z.coerce.number().int().optional(),\n});\n\n// Type-specific schemas\nconst multipleChoiceSchema = questionBaseSchema.extend({\n  type: z.literal(QuestionType.MULTIPLE_CHOICE),\n  allowMultipleAnswers: z.boolean().default(false),\n  shuffleOptions: z.boolean().default(false),\n  options: z.array(\n    z.object({\n      content: z.string().min(1),\n      isCorrect: z.boolean(),\n      explanation: z.string().optional(),\n    })\n  ).min(2),\n});\n\nconst essaySchema = questionBaseSchema.extend({\n  type: z.literal(QuestionType.ESSAY),\n  wordLimit: z.coerce.number().int().min(1).max(10000).optional(),\n  placeholder: z.string().optional(),\n  rubric: z.array(\n    z.object({\n      criteria: z.string().min(1),\n      weight: z.coerce.number().min(0).max(100),\n      levels: z.array(\n        z.object({\n          level: z.string().min(1),\n          points: z.coerce.number().int().min(0),\n          description: z.string().min(1),\n        })\n      ).min(2),\n    })\n  ).optional(),\n});\n\nconst trueFalseSchema = questionBaseSchema.extend({\n  type: z.literal(QuestionType.TRUE_FALSE),\n  correctAnswer: z.boolean(),\n});\n\nconst shortAnswerSchema = questionBaseSchema.extend({\n  type: z.literal(QuestionType.SHORT_ANSWER),\n  caseSensitive: z.boolean().default(false),\n  acceptableAnswers: z.array(z.string().min(1)).min(1),\n});\n\n// Định nghĩa schema cho một option trong câu hỏi matching\nconst matchingOptionSchema = z.object({\n  id: z.string().optional(), // id có thể được client gửi lên (cả ID tạm thời hoặc ID thật từ DB)\n  content: z.string().min(1, \"Option content cannot be empty\"),\n  group: z.enum(['premise', 'response'], {\n    errorMap: () => ({ message: \"Option group must be 'premise' or 'response'.\" })\n  }),\n  order: z.number().int().min(0, \"Option order must be a non-negative integer.\"),\n  matchId: z.string().optional().nullable(), // matchId có trên premise, trỏ đến id của response\n});\n\nconst matchingSchema = questionBaseSchema.extend({\n  type: z.literal(QuestionType.MATCHING),\n  options: z.array(matchingOptionSchema)\n    .min(4, \"Matching questions require at least 2 premises and 2 responses in total.\")\n    .refine(\n      (options) => {\n        const premises = options.filter(opt => opt.group === 'premise');\n        const responses = options.filter(opt => opt.group === 'response');\n        return premises.length >= 2 && responses.length >= 2;\n      },\n      { message: \"Must have at least two premises and two responses.\" }\n    )\n    .refine(\n      (options) => {\n        // Lấy tất cả ID của response options (bao gồm cả ID tạm thời)\n        const responseIds = new Set(\n          options.filter(opt => opt.group === 'response').map(opt => opt.id).filter(Boolean)\n        );\n        \n        // Với mỗi premise, kiểm tra xem matchId có tồn tại trong danh sách responseIds không\n        const allPremisesWithValidMatches = options\n          .filter(opt => opt.group === 'premise')\n          .every(premise => {\n            // Nếu premise có matchId, kiểm tra xem matchId đó có tồn tại trong responseIds không\n            return premise.matchId && responseIds.has(premise.matchId);\n          });\n        \n        return allPremisesWithValidMatches;\n      },\n      { message: \"Each premise must be matched to a valid response option in the same question.\" }\n    )\n    .refine(\n      (options) => { // Đảm bảo không có response nào được match bởi nhiều premise (nếu là one-to-one)\n        const premises = options.filter(opt => opt.group === 'premise');\n        const matchedResponseIds = new Set<string>();\n        \n        for (const premise of premises) {\n          if (premise.matchId) {\n            if (matchedResponseIds.has(premise.matchId)) {\n              return false; // Tìm thấy một response được match nhiều lần\n            }\n            matchedResponseIds.add(premise.matchId);\n          }\n        }\n        return true;\n      },\n      { message: \"Each response can only be matched by one premise (one-to-one matching enforced).\" }\n    ),\n  metadata: z.object({\n    shuffleOptions: z.boolean().default(false)\n  }).optional().nullable(),\n});\n\nconst fillBlankSchema = questionBaseSchema.extend({\n  type: z.literal(QuestionType.FILL_BLANK),\n  text: z.string().min(1),\n  blanks: z.array(\n    z.object({\n      id: z.string(),\n      acceptableAnswers: z.array(z.string().min(1)).min(1),\n      caseSensitive: z.boolean().default(false),\n      points: z.coerce.number().int().min(1).optional(),\n    })\n  ).min(1),\n});\n\nconst codeSchema = questionBaseSchema.extend({\n  type: z.literal(QuestionType.CODE),\n  language: z.string().min(1),\n  defaultCode: z.string().optional(),\n  solutionCode: z.string(),\n  testCases: z.array(\n    z.object({\n      input: z.string().optional(),\n      expectedOutput: z.string(),\n      hidden: z.boolean().default(false),\n      points: z.coerce.number().int().min(0).optional(),\n    })\n  ).optional(),\n});\n\n// Combined question schema using discriminated union\nconst questionSchema = z.discriminatedUnion(\"type\", [\n  multipleChoiceSchema,\n  essaySchema,\n  trueFalseSchema,\n  shortAnswerSchema,\n  matchingSchema,\n  fillBlankSchema,\n  codeSchema,\n]);\n\n/**\n * GET handler for retrieving all questions for a quiz\n */\nexport async function GET(\n  req: NextRequest,\n  { params }: { params: { quizId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    // Check if user is authenticated\n    if (!session?.user) {\n      return NextResponse.json({ error: \"Không được phép\" }, { status: 401 });\n    }\n\n    // Check if user is a teacher\n    if (session.user.role !== Role.TEACHER) {\n      return NextResponse.json({ error: \"Không được phép\" }, { status: 403 });\n    }\n\n    const userId = session.user.id;\n    const paramsData = await params;\n    const quizId = paramsData.quizId;\n\n    // Check if the quiz exists and belongs to the teacher\n    const quiz = await prisma.quiz.findUnique({\n      where: {\n        id: quizId,\n        authorId: userId,\n      },\n    });\n\n    if (!quiz) {\n      return NextResponse.json({ error: \"Không tìm thấy quiz\" }, { status: 404 });\n    }\n\n    // Fetch all questions for this quiz\n    const questions = await prisma.question.findMany({\n      where: { quizId },\n      orderBy: { order: \"asc\" },\n      include: {\n        options: true,\n      },\n    });\n\n    return NextResponse.json(questions);\n  } catch (error) {\n    console.error(\"Error fetching questions:\", error);\n    return NextResponse.json(\n      { error: \"Lỗi khi lấy danh sách câu hỏi\" },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST handler for creating a new question\n */\nexport async function POST(\n  req: NextRequest,\n  { params }: { params: { quizId: string } }\n) {\n  try {\n    // Kiểm tra xác thực\n    const session = await getServerSession(authOptions);\n    if (!session?.user) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    // Lấy dữ liệu từ request body\n    const body = await req.json();\n    const quizId = params.quizId;\n\n    // Validate quizId\n    if (!quizId) {\n      return NextResponse.json({ error: \"Quiz ID is required\" }, { status: 400 });\n    }\n\n    // Kiểm tra quyền truy cập\n    const quiz = await prisma.quiz.findUnique({\n      where: { id: quizId },\n      select: { authorId: true }\n    });\n\n    if (!quiz) {\n      return NextResponse.json({ error: \"Quiz not found\" }, { status: 404 });\n    }\n\n    if (quiz.authorId !== session.user.id) {\n      return NextResponse.json({ error: \"You don't have permission to modify this quiz\" }, { status: 403 });\n    }\n\n    // Lấy số lượng câu hỏi hiện tại để tính order mới\n    const questionCount = await prisma.question.count({\n      where: { quizId }\n    });\n\n    // Xử lý metadata cho các loại câu hỏi\n    let metadata = {};\n    \n    // Xử lý đặc biệt cho Multiple Choice để đảm bảo trường metadata được lưu đúng\n    if (body.type === \"MULTIPLE_CHOICE\") {\n      metadata = {\n        allowMultiple: body.allowMultipleAnswers || body.allowMultiple || false,\n        shuffleOptions: body.shuffleOptions || false\n      };\n    } else if (body.metadata) {\n      // Loại câu hỏi khác, giữ nguyên metadata từ client\n      metadata = body.metadata;\n    }\n\n    // Tạo câu hỏi mới\n    const question = await prisma.$transaction(async (tx) => {\n      // 1. Tạo bản ghi Question trước (không có options)\n      const newQuestion = await tx.question.create({\n      data: {\n      quizId,\n        content: body.content,\n        type: body.type,\n        points: body.points || 1,\n        order: body.order !== undefined ? body.order : questionCount,\n        explanation: body.explanation || null,\n        category: body.category || null,\n        difficulty: body.difficulty || null,\n        metadata: metadata, // Sử dụng metadata đã xử lý\n        },\n      });\n\n      const optionsFromBody = Array.isArray(body.options) ? body.options : [];\n\n      // 2. Xử lý options sau khi đã có newQuestion.id\n      if (body.type === QuestionType.MATCHING) {\n        const premiseOptionsData = optionsFromBody.filter((opt: any) => opt.group === 'premise');\n        const responseOptionsData = optionsFromBody.filter((opt: any) => opt.group === 'response');\n        const clientResponseIdToDbResponseId = new Map<string, string>();\n\n        // 2a. Tạo tất cả response options và lưu map ID\n        for (const responseOpt of responseOptionsData) {\n          const createdResponse = await tx.option.create({\n            data: {\n              questionId: newQuestion.id, // Gán questionId thật\n              content: responseOpt.content,\n              group: responseOpt.group,\n              order: responseOpt.order !== undefined ? responseOpt.order : 0,\n              isCorrect: false,\n            },\n          });\n          if (responseOpt.id) { // Nếu client có gửi ID tạm thời cho response\n            clientResponseIdToDbResponseId.set(responseOpt.id, createdResponse.id);\n          }\n        }\n\n        // 2b. Tạo tất cả premise options, sử dụng map ID để lấy matchId thật\n        for (const premiseOpt of premiseOptionsData) {\n          let finalMatchId = null;\n          if (premiseOpt.matchId) {\n            finalMatchId = clientResponseIdToDbResponseId.get(premiseOpt.matchId) || null;\n            // Quan trọng: Nếu `premiseOpt.matchId` là một ID thật từ DB (trong trường hợp copy câu hỏi chẳng hạn)\n            // và nó không có trong clientResponseIdToDbResponseId (vì response đó không phải mới),\n            // thì chúng ta cần kiểm tra xem ID đó có thực sự tồn tại không.\n            // Tuy nhiên, trong kịch bản TẠO MỚI, matchId luôn là ID tạm thời từ client.\n            // Nếu không tìm thấy trong map, có nghĩa là client đã gửi matchId không hợp lệ.\n            // Zod validation ở trên nên bắt trường hợp này.\n          }\n          await tx.option.create({\n            data: {\n              questionId: newQuestion.id, // Gán questionId thật\n              content: premiseOpt.content,\n              group: premiseOpt.group,\n              order: premiseOpt.order !== undefined ? premiseOpt.order : 0,\n              matchId: finalMatchId,\n              isCorrect: false,\n            },\n          });\n        }\n      } else {\n        // Xử lý options cho các loại câu hỏi khác\n        if (optionsFromBody.length > 0) {\n          await tx.option.createMany({\n            data: optionsFromBody.map((option: any) => ({\n              questionId: newQuestion.id, // Gán questionId thật\n              content: option.content,\n              isCorrect: option.isCorrect || false,\n              order: option.order !== undefined ? option.order : 0,\n              group: option.group || null,\n              matchId: option.matchId || null,\n              position: option.position || null,\n            })),\n          });\n        }\n      }\n\n      // 3. Lấy lại câu hỏi đầy đủ với options\n      return await tx.question.findUnique({\n        where: { id: newQuestion.id },\n        include: {\n          options: {\n            orderBy: { order: 'asc' },\n          },\n        },\n      });\n    });\n\n    return NextResponse.json(question, { status: 201 });\n  } catch (error: any) {\n    console.error(\"Error creating question:\", error);\n    return NextResponse.json(\n      { error: error.message || \"Failed to create question\" },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\n"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/prisma.ts"],"sourcesContent":["import { db } from './db';\n\n// Re-export với tên khác để không phá vỡ code đang sử dụng\nexport const prisma = db;"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,SAAS,2GAAA,CAAA,KAAE","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { db } from \"@/lib/db\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { ROLES, RoleType } from \"@/lib/constants\"\n\n// Domain email được ủy quyền cao hơn\nconst AUTHORIZED_TEACHER_DOMAINS = ['school.edu', 'university.edu', 'teacher.org']\n\n// Fix cho type adapter\nconst prismaAdapter = PrismaAdapter(db) as any\n\n// Cải thiện error handling\nconst handleAuthError = (error: any, context: string) => {\n  console.error(`[Auth Error] ${context}:`, error);\n  return false;\n}\n\nexport const authOptions: AuthOptions = {\n  adapter: prismaAdapter,\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      allowDangerousEmailAccountLinking: true,\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60, // 24 hours\n    updateAge: 4 * 60 * 60, // 4 hours\n  },\n  callbacks: {\n    async jwt({ token, user, account, profile, trigger }) {\n      try {\n        // Trường hợp đăng nhập - Chỉ cập nhật token khi có user từ đăng nhập\n        if (user) {\n          // Đảm bảo role có thể null\n          token.role = user.role as RoleType | null;\n          token.id = user.id;\n          return token;\n        }\n        \n        // Trường hợp trigger update - Cập nhật token khi có sự thay đổi rõ ràng\n        if (trigger === 'update' && token?.sub) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { \n                id: true, \n                name: true, \n                email: true, \n                role: true, \n                image: true \n              }\n            });\n            \n            if (dbUser) {\n              // Cập nhật token với giá trị mới\n              token.role = dbUser.role as RoleType | null;\n              token.name = dbUser.name;\n              token.email = dbUser.email;\n              token.picture = dbUser.image;\n              \n              // Thêm timestamp để đảm bảo không cache token cũ\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error updating token:\", error);\n          }\n          return token;\n        }\n        \n        // Trường hợp token từ session: kiểm tra nếu cần cập nhật\n        if (token?.sub && (!token.role || !token.updatedAt || Date.now() - (token.updatedAt as number || 0) > 60 * 1000)) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { role: true }\n            });\n            \n            if (dbUser) {\n              token.role = dbUser.role as RoleType | null;\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error refreshing token:\", error);\n          }\n        }\n        \n        return token;\n      } catch (error) {\n        console.error(\"JWT callback error:\", error);\n        return token;\n      }\n    },\n    async session({ session, token }) {\n      try {\n        if (session.user && token) {\n          // Đảm bảo role có thể null\n          session.user.role = token.role as RoleType | null;\n          session.user.id = token.id as string;\n        }\n        return session;\n      } catch (error) {\n        console.error(\"Session callback error:\", error);\n        return session;\n      }\n    },\n    async signIn({ user, account, profile }) {\n      // Nếu user có email\n      if (user?.email) {\n        try {\n          // Kiểm tra user đã tồn tại chưa\n          const existingUser = await db.user.findUnique({\n            where: { email: user.email },\n          })\n          \n          if (!existingUser) {\n            // Tạo user mới không có role (null) để người dùng chọn sau\n            await db.user.create({\n              data: {\n                id: user.id,\n                email: user.email,\n                name: user.name,\n                image: user.image,\n                role: null, // Không thiết lập role mặc định\n              },\n            })\n            \n            // Đánh dấu để redirect tới trang chọn role\n            return true\n          }\n          \n          return true\n        } catch (error) {\n          return handleAuthError(error, \"signIn callback\");\n        }\n      }\n      \n      return true\n    }\n  },\n  pages: {\n    signIn: '/auth/signin',\n    signOut: '/',\n    error: '/auth/error',\n    newUser: '/auth/select-role' // Điều hướng người dùng mới đến trang chọn role\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === \"development\",\n  logger: {\n    error(code, ...message) {\n      console.error(`[NextAuth Error] ${code}:`, ...message);\n    },\n    warn(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.warn(`[NextAuth Warning] ${code}:`, ...message);\n      }\n    },\n    debug(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.debug(`[NextAuth Debug] ${code}:`, ...message);\n      }\n    },\n  },\n}\n\nconst handler = NextAuth(authOptions)\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/auth-middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { Role } from \"@prisma/client\";\r\n\r\n/**\r\n * Middleware to check if user is authenticated\r\n * @returns User session or throws 401 error\r\n */\r\nexport async function requireAuth() {\r\n  const session = await getServerSession(authOptions);\r\n  \r\n  if (!session?.user) {\r\n    throw new Response(\"Unauthorized\", { status: 401 });\r\n  }\r\n  \r\n  return session;\r\n}\r\n\r\n/**\r\n * Middleware to check if user is a teacher\r\n * @returns User session or throws 403 error\r\n */\r\nexport async function requireTeacherRole() {\r\n  const session = await requireAuth();\r\n  \r\n  if (session.user.role !== Role.TEACHER) {\r\n    throw new Response(\"Forbidden: Teachers only\", { status: 403 });\r\n  }\r\n  \r\n  return session;\r\n}\r\n\r\n/**\r\n * Middleware to check if teacher has access to a specific class\r\n * @param classId - The ID of the class to check access for\r\n * @returns The class object if access is granted or throws 403 error\r\n */\r\nexport async function requireTeacherClassAccess(classId: string) {\r\n  const session = await requireTeacherRole();\r\n  \r\n  const classData = await prisma.class.findUnique({\r\n    where: {\r\n      id: classId,\r\n    },\r\n  });\r\n  \r\n  if (!classData) {\r\n    throw new Response(\"Class not found\", { status: 404 });\r\n  }\r\n  \r\n  if (classData.teacherId !== session.user.id) {\r\n    throw new Response(\"Forbidden: You don't have access to this class\", { status: 403 });\r\n  }\r\n  \r\n  return { session, classData };\r\n}\r\n\r\n/**\r\n * Middleware to check if teacher has access to a specific student\r\n * @param studentId - The ID of the student to check access for\r\n * @returns Object containing session, student and classes if access is granted or throws 403 error\r\n */\r\nexport async function requireTeacherStudentAccess(studentId: string) {\r\n  const session = await requireTeacherRole();\r\n  \r\n  // Find classes taught by this teacher that have this student enrolled\r\n  const studentEnrollments = await prisma.classEnrollment.findMany({\r\n    where: {\r\n      studentId: studentId,\r\n      class: {\r\n        teacherId: session.user.id,\r\n      },\r\n    },\r\n    include: {\r\n      class: true,\r\n    },\r\n  });\r\n  \r\n  if (studentEnrollments.length === 0) {\r\n    throw new Response(\"Forbidden: You don't have access to this student\", { status: 403 });\r\n  }\r\n  \r\n  const student = await prisma.user.findUnique({\r\n    where: {\r\n      id: studentId,\r\n    },\r\n    select: {\r\n      id: true,\r\n      name: true,\r\n      email: true,\r\n      image: true,\r\n    },\r\n  });\r\n  \r\n  if (!student) {\r\n    throw new Response(\"Student not found\", { status: 404 });\r\n  }\r\n  \r\n  const classes = studentEnrollments.map(enrollment => enrollment.class);\r\n  \r\n  return { session, student, classes };\r\n}\r\n\r\n/**\r\n * Middleware to check if teacher has access to a specific quiz\r\n * @param quizId - The ID of the quiz to check access for\r\n * @returns The quiz object if access is granted or throws 403 error\r\n */\r\nexport async function requireTeacherQuizAccess(quizId: string) {\r\n  const session = await requireTeacherRole();\r\n  \r\n  const quiz = await prisma.quiz.findUnique({\r\n    where: {\r\n      id: quizId,\r\n    },\r\n  });\r\n  \r\n  if (!quiz) {\r\n    throw new Response(\"Quiz not found\", { status: 404 });\r\n  }\r\n  \r\n  if (quiz.authorId !== session.user.id) {\r\n    throw new Response(\"Forbidden: You don't have access to this quiz\", { status: 403 });\r\n  }\r\n  \r\n  return { session, quiz };\r\n}\r\n\r\n/**\r\n * Middleware to check if teacher has access to a specific quiz attempt\r\n * @param attemptId - The ID of the quiz attempt to check access for\r\n * @returns The attempt object if access is granted or throws 403 error\r\n */\r\nexport async function requireTeacherAttemptAccess(attemptId: string) {\r\n  const session = await requireTeacherRole();\r\n  \r\n  const attempt = await prisma.quizAttempt.findUnique({\r\n    where: {\r\n      id: attemptId,\r\n    },\r\n    include: {\r\n      quiz: true,\r\n    },\r\n  });\r\n  \r\n  if (!attempt) {\r\n    throw new Response(\"Attempt not found\", { status: 404 });\r\n  }\r\n  \r\n  if (attempt.quiz.authorId !== session.user.id) {\r\n    throw new Response(\"Forbidden: You don't have access to this attempt\", { status: 403 });\r\n  }\r\n  \r\n  return { session, attempt };\r\n}\r\n\r\n/**\r\n * Error handling wrapper for API route handlers\r\n * @param handler - The route handler function\r\n * @returns A function that handles errors from the route handler\r\n */\r\nexport function withErrorHandling(handler: Function) {\r\n  return async (req: NextRequest, params?: any) => {\r\n    try {\r\n      return await handler(req, params);\r\n    } catch (error) {\r\n      console.error(\"API Error:\", error);\r\n      \r\n      if (error instanceof Response) {\r\n        return NextResponse.json(\r\n          { error: error.statusText },\r\n          { status: error.status }\r\n        );\r\n      }\r\n      \r\n      return NextResponse.json(\r\n        { error: \"Internal server error\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  };\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 537, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/teacher/dashboard/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { withErrorHandling } from \"@/lib/auth-middleware\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\r\n\r\n/**\r\n * GET handler for retrieving teacher dashboard overview data\r\n * Includes statistics, recent activities, and performance metrics\r\n */\r\nexport const GET = withErrorHandling(async (req: NextRequest) => {\r\n  const session = await getServerSession(authOptions);\r\n  \r\n  if (!session?.user || session.user.role !== \"TEACHER\") {\r\n    return new Response(\"Unauthorized\", { status: 401 });\r\n  }\r\n  \r\n  const teacherId = session.user.id;\r\n  \r\n  // Execute parallel queries for better performance\r\n  const [\r\n    activeClasses,\r\n    totalStudents,\r\n    activeQuizzes,\r\n    completedQuizzes,\r\n    studentEngagement,\r\n    recentClasses,\r\n    recentQuizzes,\r\n    classPerformance,\r\n    topPerformingStudents,\r\n    upcomingDeadlines\r\n  ] = await Promise.all([\r\n    // Count of active classes\r\n    prisma.class.count({\r\n      where: {\r\n        teacherId,\r\n        isActive: true,\r\n      },\r\n    }),\r\n    \r\n    // Count of unique students across all classes\r\n    prisma.classEnrollment.findMany({\r\n      where: {\r\n        class: {\r\n          teacherId,\r\n        },\r\n      },\r\n      select: {\r\n        studentId: true,\r\n      },\r\n    }).then(enrollments => \r\n      new Set(enrollments.map(e => e.studentId)).size\r\n    ),\r\n    \r\n    // Count of active quizzes\r\n    prisma.quiz.count({\r\n      where: {\r\n        authorId: teacherId,\r\n        isActive: true,\r\n        isPublished: true,\r\n      },\r\n    }),\r\n    \r\n    // Count of completed quizzes\r\n    prisma.quiz.count({\r\n      where: {\r\n        authorId: teacherId,\r\n        isActive: false,\r\n        isPublished: true,\r\n      },\r\n    }),\r\n    \r\n    // Calculate student engagement rate\r\n    Promise.resolve().then(async () => {\r\n      const teacherQuizzes = await prisma.quiz.findMany({\r\n        where: { authorId: teacherId },\r\n        select: { id: true },\r\n      });\r\n      \r\n      const quizIds = teacherQuizzes.map(q => q.id);\r\n      \r\n      // Count students who have taken quizzes\r\n      const studentsWithAttempts = await prisma.quizAttempt.findMany({\r\n        where: {\r\n          quizId: { in: quizIds },\r\n        },\r\n        select: {\r\n          userId: true,\r\n        },\r\n        distinct: ['userId'],\r\n      });\r\n      \r\n      const allStudents = await prisma.classEnrollment.findMany({\r\n        where: {\r\n          class: {\r\n            teacherId,\r\n          },\r\n        },\r\n        select: {\r\n          studentId: true,\r\n        },\r\n        distinct: ['studentId'],\r\n      });\r\n      \r\n      const studentsWithAttemptsCount = studentsWithAttempts.length;\r\n      const totalStudentsCount = allStudents.length;\r\n      \r\n      return totalStudentsCount > 0\r\n        ? Math.round((studentsWithAttemptsCount / totalStudentsCount) * 100)\r\n        : 0;\r\n    }),\r\n    \r\n    // Most recently updated classes\r\n    prisma.class.findMany({\r\n      where: {\r\n        teacherId,\r\n      },\r\n      orderBy: {\r\n        updatedAt: 'desc',\r\n      },\r\n      take: 5,\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        subject: true,\r\n        type: true,\r\n        isActive: true,\r\n        coverImage: true,\r\n        updatedAt: true,\r\n        _count: {\r\n          select: {\r\n            students: true,\r\n          },\r\n        },\r\n      },\r\n    }),\r\n    \r\n    // Most recently updated quizzes\r\n    prisma.quiz.findMany({\r\n      where: {\r\n        authorId: teacherId,\r\n      },\r\n      orderBy: {\r\n        updatedAt: 'desc',\r\n      },\r\n      take: 5,\r\n      select: {\r\n        id: true,\r\n        title: true,\r\n        isActive: true,\r\n        isPublished: true,\r\n        category: true,\r\n        updatedAt: true,\r\n        _count: {\r\n          select: {\r\n            questions: true,\r\n            attempts: true,\r\n          },\r\n        },\r\n        class: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n          },\r\n        },\r\n      },\r\n    }),\r\n    \r\n    // Class performance data for charts\r\n    prisma.class.findMany({\r\n      where: {\r\n        teacherId,\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        students: {\r\n          select: {\r\n            student: {\r\n              select: {\r\n                id: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    }).then(async classes => {\r\n      // Calculate average score for each class\r\n      return Promise.all(\r\n        classes.map(async cls => {\r\n          const studentIds = cls.students.map(s => s.student.id);\r\n          \r\n          if (studentIds.length === 0) {\r\n            return {\r\n              id: cls.id,\r\n              className: cls.name,\r\n              averageScore: 0,\r\n              studentCount: 0,\r\n              completionRate: 0\r\n            };\r\n          }\r\n          \r\n          const attempts = await prisma.quizAttempt.findMany({\r\n            where: {\r\n              userId: { in: studentIds },\r\n              score: { not: null },\r\n              quiz: {\r\n                authorId: teacherId,\r\n              },\r\n            },\r\n            select: {\r\n              score: true,\r\n            },\r\n          });\r\n          \r\n          const avgScore = attempts.length > 0\r\n            ? Math.round(\r\n                attempts.reduce((sum, attempt) => sum + (attempt.score || 0), 0) / \r\n                attempts.length\r\n              )\r\n            : 0;\r\n          \r\n          return {\r\n            id: cls.id,\r\n            className: cls.name,\r\n            averageScore: avgScore,\r\n            studentCount: studentIds.length,\r\n            completionRate: Math.round(Math.random() * 100) // This would be calculated based on real data\r\n          };\r\n        })\r\n      );\r\n    }),\r\n    \r\n    // Top performing students across all classes\r\n    Promise.resolve().then(async () => {\r\n      const enrollments = await prisma.classEnrollment.findMany({\r\n        where: {\r\n          class: {\r\n            teacherId,\r\n          },\r\n        },\r\n        select: {\r\n          studentId: true,\r\n          student: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true,\r\n              image: true,\r\n            }\r\n          }\r\n        },\r\n        distinct: ['studentId'],\r\n      });\r\n      \r\n      const studentIds = enrollments.map(e => e.studentId);\r\n      \r\n      // Get average scores for each student\r\n      const studentScores = await Promise.all(\r\n        studentIds.map(async (studentId) => {\r\n          const attempts = await prisma.quizAttempt.findMany({\r\n            where: {\r\n              userId: studentId,\r\n              score: { not: null },\r\n              quiz: {\r\n                authorId: teacherId,\r\n              },\r\n            },\r\n            select: {\r\n              score: true,\r\n            },\r\n          });\r\n          \r\n          const avgScore = attempts.length > 0\r\n            ? Math.round(\r\n                attempts.reduce((sum, attempt) => sum + (attempt.score || 0), 0) / \r\n                attempts.length\r\n              )\r\n            : 0;\r\n            \r\n          const student = enrollments.find(e => e.studentId === studentId)?.student;\r\n            \r\n          return {\r\n            id: studentId,\r\n            name: student?.name || 'Unknown',\r\n            email: student?.email || '',\r\n            image: student?.image,\r\n            averageScore: avgScore,\r\n            attemptCount: attempts.length,\r\n          };\r\n        })\r\n      );\r\n      \r\n      // Sort by score and return top 5\r\n      return studentScores\r\n        .filter(s => s.attemptCount > 0)\r\n        .sort((a, b) => b.averageScore - a.averageScore)\r\n        .slice(0, 5);\r\n    }),\r\n    \r\n    // Upcoming quiz deadlines\r\n    prisma.quiz.findMany({\r\n      where: {\r\n        authorId: teacherId,\r\n        isActive: true,\r\n        isPublished: true,\r\n        endDate: {\r\n          gte: new Date(),\r\n        },\r\n      },\r\n      orderBy: {\r\n        endDate: 'asc',\r\n      },\r\n      take: 5,\r\n      select: {\r\n        id: true,\r\n        title: true,\r\n        endDate: true,\r\n        class: {\r\n          select: {\r\n            name: true,\r\n          },\r\n        },\r\n      },\r\n    }),\r\n  ]);\r\n  \r\n  // Calculate quiz category distribution\r\n  const quizCategories = await prisma.quiz.groupBy({\r\n    by: ['category'],\r\n    where: {\r\n      authorId: teacherId,\r\n      category: { not: null },\r\n    },\r\n    _count: true,\r\n  });\r\n  \r\n  const categoryDistribution = quizCategories.map(item => ({\r\n    category: item.category || 'Uncategorized',\r\n    count: item._count,\r\n  }));\r\n  \r\n  // Format activity feed - combine recent classes and quizzes updates\r\n  const activityItems = [\r\n    ...recentClasses.map(cls => ({\r\n      id: cls.id,\r\n      type: 'class' as const,\r\n      title: cls.name,\r\n      subject: cls.subject,\r\n      date: cls.updatedAt,\r\n      metadata: {\r\n        studentCount: cls._count.students,\r\n        isActive: cls.isActive,\r\n      },\r\n    })),\r\n    ...recentQuizzes.map(quiz => ({\r\n      id: quiz.id,\r\n      type: 'quiz' as const,\r\n      title: quiz.title,\r\n      subject: quiz.class?.name,\r\n      date: quiz.updatedAt,\r\n      metadata: {\r\n        questionCount: quiz._count.questions,\r\n        attemptCount: quiz._count.attempts,\r\n        isActive: quiz.isActive,\r\n        isPublished: quiz.isPublished,\r\n      },\r\n    })),\r\n  ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\r\n   .slice(0, 10);\r\n  \r\n  return Response.json({\r\n    overview: {\r\n      activeClasses,\r\n      totalStudents,\r\n      activeQuizzes,\r\n      completedQuizzes,\r\n      engagementRate: studentEngagement,\r\n    },\r\n    recentClasses: recentClasses.map(cls => ({\r\n      id: cls.id,\r\n      name: cls.name,\r\n      subject: cls.subject,\r\n      type: cls.type,\r\n      isActive: cls.isActive,\r\n      studentCount: cls._count.students,\r\n      coverImage: cls.coverImage,\r\n      updatedAt: cls.updatedAt,\r\n    })),\r\n    recentQuizzes: recentQuizzes.map(quiz => ({\r\n      id: quiz.id,\r\n      title: quiz.title,\r\n      isActive: quiz.isActive,\r\n      isPublished: quiz.isPublished,\r\n      category: quiz.category,\r\n      questionCount: quiz._count.questions,\r\n      attemptCount: quiz._count.attempts,\r\n      className: quiz.class?.name || null,\r\n      classId: quiz.class?.id || null,\r\n      updatedAt: quiz.updatedAt,\r\n    })),\r\n    classPerformance,\r\n    activityFeed: activityItems,\r\n    studentPerformance: topPerformingStudents,\r\n    categoryDistribution,\r\n    upcomingDeadlines,\r\n  });\r\n}); "],"names":[],"mappings":"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","debugId":null}}]
}
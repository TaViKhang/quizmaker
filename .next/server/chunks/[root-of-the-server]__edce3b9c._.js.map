{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const db = globalThis.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalThis.prisma = db;\n"],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,KAAK,WAAW,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { AuthOptions } from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { db } from \"@/lib/db\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { ROLES, RoleType } from \"@/lib/constants\"\n\n// Domain email được ủy quyền cao hơn\nconst AUTHORIZED_TEACHER_DOMAINS = ['school.edu', 'university.edu', 'teacher.org']\n\n// Fix cho type adapter\nconst prismaAdapter = PrismaAdapter(db) as any\n\n// Cải thiện error handling\nconst handleAuthError = (error: any, context: string) => {\n  console.error(`[Auth Error] ${context}:`, error);\n  return false;\n}\n\nexport const authOptions: AuthOptions = {\n  adapter: prismaAdapter,\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      allowDangerousEmailAccountLinking: true,\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60, // 24 hours\n    updateAge: 4 * 60 * 60, // 4 hours\n  },\n  callbacks: {\n    async jwt({ token, user, account, profile, trigger }) {\n      try {\n        // Trường hợp đăng nhập - Chỉ cập nhật token khi có user từ đăng nhập\n        if (user) {\n          // Đảm bảo role có thể null\n          token.role = user.role as RoleType | null;\n          token.id = user.id;\n          return token;\n        }\n        \n        // Trường hợp trigger update - Cập nhật token khi có sự thay đổi rõ ràng\n        if (trigger === 'update' && token?.sub) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { \n                id: true, \n                name: true, \n                email: true, \n                role: true, \n                image: true \n              }\n            });\n            \n            if (dbUser) {\n              // Cập nhật token với giá trị mới\n              token.role = dbUser.role as RoleType | null;\n              token.name = dbUser.name;\n              token.email = dbUser.email;\n              token.picture = dbUser.image;\n              \n              // Thêm timestamp để đảm bảo không cache token cũ\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error updating token:\", error);\n          }\n          return token;\n        }\n        \n        // Trường hợp token từ session: kiểm tra nếu cần cập nhật\n        if (token?.sub && (!token.role || !token.updatedAt || Date.now() - (token.updatedAt as number || 0) > 60 * 1000)) {\n          try {\n            const dbUser = await db.user.findUnique({\n              where: { id: token.sub },\n              select: { role: true }\n            });\n            \n            if (dbUser) {\n              token.role = dbUser.role as RoleType | null;\n              token.updatedAt = Date.now();\n            }\n          } catch (error) {\n            console.error(\"Error refreshing token:\", error);\n          }\n        }\n        \n        return token;\n      } catch (error) {\n        console.error(\"JWT callback error:\", error);\n        return token;\n      }\n    },\n    async session({ session, token }) {\n      try {\n        if (session.user && token) {\n          // Đảm bảo role có thể null\n          session.user.role = token.role as RoleType | null;\n          session.user.id = token.id as string;\n        }\n        return session;\n      } catch (error) {\n        console.error(\"Session callback error:\", error);\n        return session;\n      }\n    },\n    async signIn({ user, account, profile }) {\n      // Nếu user có email\n      if (user?.email) {\n        try {\n          // Kiểm tra user đã tồn tại chưa\n          const existingUser = await db.user.findUnique({\n            where: { email: user.email },\n          })\n          \n          if (!existingUser) {\n            // Tạo user mới không có role (null) để người dùng chọn sau\n            await db.user.create({\n              data: {\n                id: user.id,\n                email: user.email,\n                name: user.name,\n                image: user.image,\n                role: null, // Không thiết lập role mặc định\n              },\n            })\n            \n            // Đánh dấu để redirect tới trang chọn role\n            return true\n          }\n          \n          return true\n        } catch (error) {\n          return handleAuthError(error, \"signIn callback\");\n        }\n      }\n      \n      return true\n    }\n  },\n  pages: {\n    signIn: '/auth/signin',\n    signOut: '/',\n    error: '/auth/error',\n    newUser: '/auth/select-role' // Điều hướng người dùng mới đến trang chọn role\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === \"development\",\n  logger: {\n    error(code, ...message) {\n      console.error(`[NextAuth Error] ${code}:`, ...message);\n    },\n    warn(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.warn(`[NextAuth Warning] ${code}:`, ...message);\n      }\n    },\n    debug(code, ...message) {\n      if (process.env.NODE_ENV === \"development\") {\n        console.debug(`[NextAuth Debug] ${code}:`, ...message);\n      }\n    },\n  },\n}\n\nconst handler = NextAuth(authOptions)\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/api-response.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { ZodError } from \"zod\";\n\n/**\n * Standard response structure for paginated data\n */\nexport interface PaginatedResponseData<T> {\n  success: boolean;\n  data: {\n    items: T[];\n    pagination: {\n      total: number;\n      page: number;\n      limit: number;\n      totalPages: number;\n    };\n  };\n  meta?: Record<string, any>;\n}\n\n/**\n * Standard response structure for single item data\n */\nexport interface SingleResponseData<T> {\n  success: boolean;\n  data: T;\n  meta?: Record<string, any>;\n}\n\n/**\n * Standard error response structure\n */\nexport interface ErrorResponseData {\n  success: boolean;\n  error: {\n    code: string;\n    message: string;\n    details?: any;\n  };\n}\n\n/**\n * Create a successful response with pagination\n */\nexport function createPaginatedResponse<T>(\n  data: T[],\n  total: number,\n  page: number,\n  limit: number,\n  meta?: Record<string, any>,\n  headers?: HeadersInit\n): NextResponse {\n  const response: PaginatedResponseData<T> = {\n    success: true,\n    data: {\n      items: data,\n      pagination: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit)\n      }\n    }\n  };\n\n  if (meta) {\n    response.meta = meta;\n  }\n\n  return NextResponse.json(response, { headers });\n}\n\n/**\n * Create a successful response for a single item\n */\nexport function createSuccessResponse<T>(\n  data: T,\n  status: number = 200,\n  meta?: Record<string, any>,\n  headers?: HeadersInit\n): NextResponse {\n  const response: SingleResponseData<T> = { \n    success: true,\n    data \n  };\n  \n  if (meta) {\n    response.meta = meta;\n  }\n  \n  return NextResponse.json(response, { status, headers });\n}\n\n/**\n * Create an error response\n */\nexport function createErrorResponse(\n  code: string,\n  message: string,\n  details?: any,\n  status: number = 400\n): NextResponse {\n  const response: ErrorResponseData = {\n    success: false,\n    error: {\n      code,\n      message\n    }\n  };\n  \n  if (details) {\n    response.error.details = details;\n  }\n  \n  return NextResponse.json(response, { status });\n}\n\n/**\n * Format Zod validation errors\n */\nexport function formatZodError(error: ZodError) {\n  return {\n    code: \"VALIDATION_ERROR\",\n    message: \"Invalid input data\",\n    details: error.errors.map(err => ({\n      path: err.path.join('.'),\n      message: err.message\n    }))\n  };\n}\n\n/**\n * Create an authenticated error response (401)\n */\nexport function createAuthenticationError(): NextResponse {\n  return createErrorResponse(\n    \"UNAUTHENTICATED\",\n    \"You must be logged in to access this resource\",\n    undefined,\n    401\n  );\n}\n\n/**\n * Create a permission error response (403)\n */\nexport function createPermissionError(message: string = \"You don't have permission to access this resource\"): NextResponse {\n  return createErrorResponse(\n    \"UNAUTHORIZED\", \n    message,\n    undefined,\n    403\n  );\n}\n\n/**\n * Create a not found error response (404)\n */\nexport function createNotFoundError(resource: string = \"Resource\"): NextResponse {\n  return createErrorResponse(\n    \"NOT_FOUND\",\n    `${resource} not found`,\n    undefined,\n    404\n  );\n}\n\n/**\n * Create a server error response (500)\n */\nexport function createServerError(error?: Error): NextResponse {\n  console.error(\"Server error:\", error);\n  \n  return createErrorResponse(\n    \"SERVER_ERROR\",\n    \"An unexpected error occurred\",\n    process.env.NODE_ENV === 'development' ? error?.message : undefined,\n    500\n  );\n}\n\n/**\n * Create a validation error response (400)\n */\nexport function createValidationError(details?: any): NextResponse {\n  return createErrorResponse(\n    \"VALIDATION_ERROR\",\n    \"Invalid input data\",\n    details,\n    400\n  );\n} "],"names":[],"mappings":";;;;;;;;;;;AAAA;;AA4CO,SAAS,wBACd,IAAS,EACT,KAAa,EACb,IAAY,EACZ,KAAa,EACb,IAA0B,EAC1B,OAAqB;IAErB,MAAM,WAAqC;QACzC,SAAS;QACT,MAAM;YACJ,OAAO;YACP,YAAY;gBACV;gBACA;gBACA;gBACA,YAAY,KAAK,IAAI,CAAC,QAAQ;YAChC;QACF;IACF;IAEA,IAAI,MAAM;QACR,SAAS,IAAI,GAAG;IAClB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;IAAQ;AAC/C;AAKO,SAAS,sBACd,IAAO,EACP,SAAiB,GAAG,EACpB,IAA0B,EAC1B,OAAqB;IAErB,MAAM,WAAkC;QACtC,SAAS;QACT;IACF;IAEA,IAAI,MAAM;QACR,SAAS,IAAI,GAAG;IAClB;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;QAAQ;IAAQ;AACvD;AAKO,SAAS,oBACd,IAAY,EACZ,OAAe,EACf,OAAa,EACb,SAAiB,GAAG;IAEpB,MAAM,WAA8B;QAClC,SAAS;QACT,OAAO;YACL;YACA;QACF;IACF;IAEA,IAAI,SAAS;QACX,SAAS,KAAK,CAAC,OAAO,GAAG;IAC3B;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU;QAAE;IAAO;AAC9C;AAKO,SAAS,eAAe,KAAe;IAC5C,OAAO;QACL,MAAM;QACN,SAAS;QACT,SAAS,MAAM,MAAM,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;gBAChC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC;gBACpB,SAAS,IAAI,OAAO;YACtB,CAAC;IACH;AACF;AAKO,SAAS;IACd,OAAO,oBACL,mBACA,iDACA,WACA;AAEJ;AAKO,SAAS,sBAAsB,UAAkB,mDAAmD;IACzG,OAAO,oBACL,gBACA,SACA,WACA;AAEJ;AAKO,SAAS,oBAAoB,WAAmB,UAAU;IAC/D,OAAO,oBACL,aACA,GAAG,SAAS,UAAU,CAAC,EACvB,WACA;AAEJ;AAKO,SAAS,kBAAkB,KAAa;IAC7C,QAAQ,KAAK,CAAC,iBAAiB;IAE/B,OAAO,oBACL,gBACA,gCACA,uCAAyC,OAAO,gDAChD;AAEJ;AAKO,SAAS,sBAAsB,OAAa;IACjD,OAAO,oBACL,oBACA,sBACA,SACA;AAEJ","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/api-utils.ts"],"sourcesContent":["import { ClassType } from \"@prisma/client\";\n\n/**\n * Query parameters for class endpoints\n */\nexport interface ClassQueryParams {\n  page: number;\n  limit: number;\n  search?: string;\n  type?: ClassType;\n  isActive?: boolean;\n  onlyJoined?: boolean;\n  sortBy: 'createdAt' | 'updatedAt' | 'name';\n  sortOrder: 'asc' | 'desc';\n}\n\n/**\n * Parse URL search parameters for class endpoints\n */\nexport function parseClassQueryParams(searchParams: URLSearchParams): ClassQueryParams {\n  return {\n    page: parseInt(searchParams.get(\"page\") || \"1\"),\n    limit: parseInt(searchParams.get(\"limit\") || \"10\"),\n    search: searchParams.get(\"search\") || undefined,\n    type: searchParams.get(\"type\") as ClassType | undefined,\n    isActive: searchParams.has(\"isActive\") \n      ? searchParams.get(\"isActive\") === \"true\" \n      : undefined,\n    onlyJoined: searchParams.get(\"onlyJoined\") === \"true\",\n    sortBy: (searchParams.get(\"sortBy\") || \"updatedAt\") as 'createdAt' | 'updatedAt' | 'name',\n    sortOrder: (searchParams.get(\"sortOrder\") || \"desc\") as 'asc' | 'desc',\n  };\n}\n\n/**\n * Build a Prisma OrderBy object from query parameters\n */\nexport function buildOrderByFromParams(\n  sortBy: string = 'updatedAt',\n  sortOrder: 'asc' | 'desc' = 'desc'\n): Record<string, string> {\n  const validSortFields = ['createdAt', 'updatedAt', 'name'];\n  \n  // Validate sortBy field\n  const field = validSortFields.includes(sortBy) ? sortBy : 'updatedAt';\n  \n  // Create the orderBy object\n  const orderBy: Record<string, string> = {};\n  orderBy[field] = sortOrder;\n  \n  return orderBy;\n}\n\n/**\n * Build pagination parameters for Prisma queries\n */\nexport function buildPaginationParams(page: number, limit: number) {\n  // Ensure positive values\n  const validPage = Math.max(1, page);\n  const validLimit = Math.min(Math.max(1, limit), 100); // Max 100 items per page\n  \n  const skip = (validPage - 1) * validLimit;\n  \n  return {\n    skip,\n    take: validLimit\n  };\n}\n\n/**\n * Generate a unique class code\n */\nexport function generateClassCode(length: number = 6): string {\n  // Use characters that are less likely to be confused\n  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';\n  \n  // Ensure length is between 6-8 characters\n  const codeLength = Math.min(Math.max(length, 6), 8);\n  \n  let result = '';\n  for (let i = 0; i < codeLength; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  \n  return result;\n}\n\n/**\n * Build search conditions for Prisma queries\n */\nexport function buildSearchConditions(search?: string) {\n  if (!search || search.trim() === '') {\n    return undefined;\n  }\n  \n  return [\n    { name: { contains: search, mode: \"insensitive\" } },\n    { description: { contains: search, mode: \"insensitive\" } }\n  ];\n}\n\n/**\n * Check if a user has permission to access a class\n */\nexport function hasClassAccess(\n  userId: string,\n  userRole: string,\n  classTeacherId: string,\n  classType: string,\n  isEnrolled: boolean\n): boolean {\n  // Teacher of the class always has access\n  if (userId === classTeacherId) {\n    return true;\n  }\n  \n  // Student access: must be enrolled or class is public\n  if (userRole === 'STUDENT') {\n    return isEnrolled || classType === 'PUBLIC';\n  }\n  \n  // Admin always has access\n  if (userRole === 'ADMIN') {\n    return true;\n  }\n  \n  return false;\n} "],"names":[],"mappings":";;;;;;;;AAmBO,SAAS,sBAAsB,YAA6B;IACjE,OAAO;QACL,MAAM,SAAS,aAAa,GAAG,CAAC,WAAW;QAC3C,OAAO,SAAS,aAAa,GAAG,CAAC,YAAY;QAC7C,QAAQ,aAAa,GAAG,CAAC,aAAa;QACtC,MAAM,aAAa,GAAG,CAAC;QACvB,UAAU,aAAa,GAAG,CAAC,cACvB,aAAa,GAAG,CAAC,gBAAgB,SACjC;QACJ,YAAY,aAAa,GAAG,CAAC,kBAAkB;QAC/C,QAAS,aAAa,GAAG,CAAC,aAAa;QACvC,WAAY,aAAa,GAAG,CAAC,gBAAgB;IAC/C;AACF;AAKO,SAAS,uBACd,SAAiB,WAAW,EAC5B,YAA4B,MAAM;IAElC,MAAM,kBAAkB;QAAC;QAAa;QAAa;KAAO;IAE1D,wBAAwB;IACxB,MAAM,QAAQ,gBAAgB,QAAQ,CAAC,UAAU,SAAS;IAE1D,4BAA4B;IAC5B,MAAM,UAAkC,CAAC;IACzC,OAAO,CAAC,MAAM,GAAG;IAEjB,OAAO;AACT;AAKO,SAAS,sBAAsB,IAAY,EAAE,KAAa;IAC/D,yBAAyB;IACzB,MAAM,YAAY,KAAK,GAAG,CAAC,GAAG;IAC9B,MAAM,aAAa,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,QAAQ,MAAM,yBAAyB;IAE/E,MAAM,OAAO,CAAC,YAAY,CAAC,IAAI;IAE/B,OAAO;QACL;QACA,MAAM;IACR;AACF;AAKO,SAAS,kBAAkB,SAAiB,CAAC;IAClD,qDAAqD;IACrD,MAAM,QAAQ;IAEd,0CAA0C;IAC1C,MAAM,aAAa,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,QAAQ,IAAI;IAEjD,IAAI,SAAS;IACb,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,IAAK;QACnC,UAAU,MAAM,MAAM,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,MAAM;IAChE;IAEA,OAAO;AACT;AAKO,SAAS,sBAAsB,MAAe;IACnD,IAAI,CAAC,UAAU,OAAO,IAAI,OAAO,IAAI;QACnC,OAAO;IACT;IAEA,OAAO;QACL;YAAE,MAAM;gBAAE,UAAU;gBAAQ,MAAM;YAAc;QAAE;QAClD;YAAE,aAAa;gBAAE,UAAU;gBAAQ,MAAM;YAAc;QAAE;KAC1D;AACH;AAKO,SAAS,eACd,MAAc,EACd,QAAgB,EAChB,cAAsB,EACtB,SAAiB,EACjB,UAAmB;IAEnB,yCAAyC;IACzC,IAAI,WAAW,gBAAgB;QAC7B,OAAO;IACT;IAEA,sDAAsD;IACtD,IAAI,aAAa,WAAW;QAC1B,OAAO,cAAc,cAAc;IACrC;IAEA,0BAA0B;IAC1B,IAAI,aAAa,SAAS;QACxB,OAAO;IACT;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 537, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/api/classes/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { db } from \"@/lib/db\";\nimport { z } from \"zod\";\nimport { Role, ClassType } from \"@prisma/client\";\nimport { \n  createPaginatedResponse, \n  createSuccessResponse, \n  createErrorResponse, \n  createAuthenticationError,\n  createPermissionError,\n  createServerError,\n  formatZodError\n} from \"@/lib/api-response\";\nimport {\n  parseClassQueryParams,\n  buildOrderByFromParams,\n  buildPaginationParams,\n  buildSearchConditions,\n  generateClassCode\n} from \"@/lib/api-utils\";\n\n// Enhanced schema validation for creating a class\nconst createClassSchema = z.object({\n  name: z.string()\n    .min(3, \"Class name must be at least 3 characters\")\n    .max(100, \"Class name too long\"),\n  description: z.string()\n    .max(1000, \"Description too long\")\n    .optional(),\n  subject: z.string()\n    .max(100, \"Subject name too long\")\n    .optional(),\n  type: z.enum([ClassType.PUBLIC, ClassType.PRIVATE])\n    .default(ClassType.PRIVATE),\n  coverImage: z.string()\n    .url(\"Invalid image URL\")\n    .optional()\n    .nullable(),\n  maxStudents: z.number()\n    .int(\"Must be a whole number\")\n    .positive(\"Must be a positive number\")\n    .max(500, \"Maximum 500 students allowed\")\n    .optional(),\n  isActive: z.boolean()\n    .default(true),\n  code: z.string()\n    .regex(/^[A-Z0-9]{6,8}$/, \"Class code must be 6-8 uppercase letters or numbers\")\n    .optional(),\n}).refine(data => true, {\n  message: \"\",\n  path: [],\n});\n\n// Schema for updating a class\nconst updateClassSchema = z.object({\n  name: z.string()\n    .min(3, \"Class name must be at least 3 characters\")\n    .max(100, \"Class name too long\")\n    .optional(),\n  description: z.string()\n    .max(1000, \"Description too long\")\n    .optional(),\n  subject: z.string()\n    .max(100, \"Subject name too long\")\n    .optional(),\n  type: z.enum([ClassType.PUBLIC, ClassType.PRIVATE])\n    .optional(),\n  coverImage: z.string()\n    .url(\"Invalid image URL\")\n    .optional()\n    .nullable(),\n  maxStudents: z.number()\n    .int(\"Must be a whole number\")\n    .positive(\"Must be a positive number\")\n    .max(500, \"Maximum 500 students allowed\")\n    .optional(),\n  isActive: z.boolean()\n    .optional(),\n  code: z.string()\n    .regex(/^[A-Z0-9]{6,8}$/, \"Class code must be 6-8 uppercase letters or numbers\")\n    .optional(),\n}).refine(data => true, {\n  message: \"\",\n  path: [],\n});\n\n// GET handler for fetching classes with pagination and filtering\nexport async function GET(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return createAuthenticationError();\n    }\n    \n    // Parse query parameters\n    const { searchParams } = new URL(request.url);\n    const queryParams = parseClassQueryParams(searchParams);\n    \n    // Build the where clause based on user role and filters\n    let where: any = {};\n    \n    // Apply search filter if provided\n    if (queryParams.search) {\n      where.OR = buildSearchConditions(queryParams.search);\n    }\n    \n    // Apply class type filter if provided\n    if (queryParams.type) {\n      where.type = queryParams.type;\n    }\n    \n    // Apply active status filter if provided\n    if (queryParams.isActive !== undefined) {\n      where.isActive = queryParams.isActive;\n    }\n    \n    // Role-specific filters\n    if (session.user.role === Role.TEACHER) {\n      // Teachers can filter to see only classes they teach\n      if (queryParams.onlyJoined) {\n        where.teacherId = session.user.id;\n      }\n    } else if (session.user.role === Role.STUDENT) {\n      // Students can filter to see only classes they're enrolled in\n      if (queryParams.onlyJoined) {\n        where.students = {\n          some: {\n            studentId: session.user.id\n          }\n        };\n      } \n      // Bỏ giới hạn chỉ xem được lớp PUBLIC hoặc lớp PRIVATE đã tham gia\n      // Student có thể xem tất cả các lớp\n    }\n    \n    // Count total classes for pagination\n    const total = await db.class.count({ \n      where,\n      // No need to include excessive relations for counting\n    });\n    \n    // Set up pagination\n    const pagination = buildPaginationParams(queryParams.page, queryParams.limit);\n    \n    // Set up sorting\n    const orderBy = buildOrderByFromParams(queryParams.sortBy, queryParams.sortOrder);\n    \n    // Fetch classes with pagination\n    const classes = await db.class.findMany({\n      where,\n      select: {\n        id: true,\n        name: true,\n        description: true,\n        subject: true,\n        type: true,\n        code: session.user.role === Role.TEACHER ? true : false, // Only return code to teachers\n        coverImage: true,\n        isActive: true,\n        maxStudents: true,\n        createdAt: true,\n        updatedAt: true,\n        teacherId: true,\n        teacher: {\n          select: {\n            id: true,\n            name: true,\n            image: true,\n          }\n        },\n        _count: {\n          select: {\n            students: true,\n            quizzes: true,\n            announcements: true,\n            materials: true,\n          }\n        },\n        // Get upcoming quizzes for students\n        quizzes: session.user.role === Role.STUDENT ? {\n          where: {\n            isPublished: true,\n            isActive: true,\n            OR: [\n              // Upcoming quizzes (start date in the future)\n              {\n                startDate: {\n                  gt: new Date()\n                }\n              },\n              // Ongoing quizzes (started but not ended)\n              {\n                startDate: {\n                  lte: new Date()\n                },\n                endDate: {\n                  gte: new Date()\n                }\n              }\n            ]\n          },\n          select: {\n            id: true\n          }\n        } : undefined,\n        // Get recent announcements for students\n        announcements: session.user.role === Role.STUDENT ? {\n          where: {\n            createdAt: {\n              gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Last 7 days\n            }\n          },\n          select: {\n            id: true\n          }\n        } : undefined,\n        // Check if current user is enrolled\n        students: session.user.role === Role.STUDENT ? {\n          where: {\n            studentId: session.user.id\n          },\n          select: {\n            id: true,\n            joinedAt: true\n          }\n        } : undefined\n      } as any,\n      ...pagination,\n      orderBy,\n    }) as any; // Using 'as any' temporarily to avoid type errors\n    \n    // Transform the result to add isEnrolled field for students and ensure consistent format\n    const formattedClasses = classes.map((cls: any) => {\n      // Create a consistent base object without 'any' type\n      const result = {\n        id: cls.id,\n        name: cls.name,\n        description: cls.description,\n        subject: cls.subject,\n        type: cls.type,\n        coverImage: cls.coverImage,\n        isActive: cls.isActive,\n        maxStudents: cls.maxStudents,\n        createdAt: cls.createdAt,\n        updatedAt: cls.updatedAt,\n        teacherId: cls.teacherId,\n        teacher: {\n          id: cls.teacher.id,\n          name: cls.teacher.name,\n          image: cls.teacher.image,\n        },\n        studentsCount: cls._count.students,\n        quizzesCount: cls._count.quizzes,\n        announcementsCount: cls._count.announcements,\n        materialsCount: cls._count.materials,\n        upcomingQuizCount: 0,\n        recentAnnouncementCount: 0,\n        isEnrolled: false,\n        enrollmentId: undefined as string | undefined,\n        joinedAt: undefined as Date | undefined,\n        // Only include code for teachers\n        ...(session.user.role === Role.TEACHER && { code: cls.code }),\n      };\n      \n      // Add enrollment info for students\n      if (session.user.role === Role.STUDENT && cls.students && cls.students.length > 0) {\n        result.isEnrolled = true;\n        result.enrollmentId = cls.students[0].id;\n        result.joinedAt = cls.students[0].joinedAt;\n        \n        // Add upcoming quiz count for students\n        if (cls.quizzes) {\n          result.upcomingQuizCount = cls.quizzes.length;\n        }\n        \n        // Add recent announcement count for students\n        if (cls.announcements) {\n          result.recentAnnouncementCount = cls.announcements.length;\n        }\n      }\n      \n      return result;\n    });\n    \n    // Return standardized response\n    return createPaginatedResponse(\n      formattedClasses,\n      total,\n      queryParams.page,\n      queryParams.limit,\n      { \n        filters: { \n          search: queryParams.search, \n          type: queryParams.type, \n          isActive: queryParams.isActive,\n        } \n      }\n    );\n    \n  } catch (error) {\n    console.error(\"Error fetching classes:\", error);\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\n  }\n}\n\n// POST handler for creating new classes\nexport async function POST(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return createAuthenticationError();\n    }\n    \n    // Only teachers can create classes\n    if (session.user.role !== Role.TEACHER) {\n      return createPermissionError(\"Only teachers can create classes\");\n    }\n    \n    const body = await request.json();\n    \n    const validationResult = createClassSchema.safeParse(body);\n    \n    if (!validationResult.success) {\n      return createErrorResponse(\n        \"VALIDATION_ERROR\",\n        \"Invalid class data\",\n        formatZodError(validationResult.error)\n      );\n    }\n    \n    const data = validationResult.data;\n    \n    // Generate a random 6-character class code if not provided\n    const classCode = data.code || await generateUniqueClassCode();\n    \n    // If code was provided, check if it already exists\n    if (data.code) {\n      const existingClass = await db.class.findUnique({\n        where: {\n          code: data.code\n        }\n      });\n      \n      if (existingClass) {\n        return createErrorResponse(\n          \"DUPLICATE_CODE\",\n          \"Class code already exists, please choose a different code\"\n        );\n      }\n    }\n    \n    // Create the class\n    const newClass = await db.class.create({\n      data: {\n        name: data.name,\n        description: data.description,\n        subject: data.subject,\n        type: data.type,\n        code: classCode,\n        coverImage: data.coverImage,\n        maxStudents: data.maxStudents,\n        isActive: data.isActive,\n        teacher: {\n          connect: {\n            id: session.user.id\n          }\n        }\n      }\n    });\n    \n    return createSuccessResponse(newClass);\n    \n  } catch (error) {\n    console.error(\"Error creating class:\", error);\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\n  }\n}\n\n// PUT handler for updating a class\nexport async function PUT(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return createAuthenticationError();\n    }\n    \n    // Only teachers can update classes\n    if (session.user.role !== Role.TEACHER) {\n      return createPermissionError(\"Only teachers can update classes\");\n    }\n    \n    const body = await request.json();\n    \n    // Require class ID for update\n    if (!body.id) {\n      return createErrorResponse(\n        \"VALIDATION_ERROR\",\n        \"Class ID is required for updates\"\n      );\n    }\n    \n    // Validate update data\n    const validationResult = updateClassSchema.safeParse(body);\n    \n    if (!validationResult.success) {\n      return createErrorResponse(\n        \"VALIDATION_ERROR\",\n        \"Invalid class data\",\n        formatZodError(validationResult.error)\n      );\n    }\n    \n    const data = validationResult.data;\n    const classId = body.id;\n    \n    // Check if teacher owns the class\n    const existingClass = await db.class.findFirst({\n      where: {\n        id: classId,\n        teacherId: session.user.id\n      }\n    });\n    \n    if (!existingClass) {\n      return createErrorResponse(\n        \"NOT_FOUND\",\n        \"Class not found or you don't have permission to update it\"\n      );\n    }\n    \n    // If code is being updated, check if it already exists\n    if (data.code && data.code !== existingClass.code) {\n      const codeExists = await db.class.findFirst({\n        where: {\n          code: data.code,\n          id: { not: classId }  // Exclude current class\n        }\n      });\n      \n      if (codeExists) {\n        return createErrorResponse(\n          \"DUPLICATE_CODE\",\n          \"Class code already exists, please choose a different code\"\n        );\n      }\n    }\n    \n    // Update the class\n    const updatedClass = await db.class.update({\n      where: {\n        id: classId\n      },\n      data: data\n    });\n    \n    return createSuccessResponse(updatedClass);\n    \n  } catch (error) {\n    console.error(\"Error updating class:\", error);\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\n  }\n}\n\n// DELETE handler for deleting a class\nexport async function DELETE(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    \n    if (!session?.user) {\n      return createAuthenticationError();\n    }\n    \n    // Only teachers can delete classes\n    if (session.user.role !== Role.TEACHER) {\n      return createPermissionError(\"Only teachers can delete classes\");\n    }\n    \n    const { searchParams } = new URL(request.url);\n    const classId = searchParams.get(\"id\");\n    \n    if (!classId) {\n      return createErrorResponse(\n        \"VALIDATION_ERROR\",\n        \"Class ID is required\"\n      );\n    }\n    \n    // Check if teacher owns the class\n    const existingClass = await db.class.findFirst({\n      where: {\n        id: classId,\n        teacherId: session.user.id\n      },\n      include: {\n        quizzes: true,\n        students: true,\n        announcements: true\n      }\n    });\n    \n    if (!existingClass) {\n      return createErrorResponse(\n        \"NOT_FOUND\",\n        \"Class not found or you don't have permission to delete it\"\n      );\n    }\n    \n    // Delete related records first\n    await db.$transaction([\n      db.classAnnouncement.deleteMany({\n        where: { classId }\n      }),\n      db.classEnrollment.deleteMany({\n        where: { classId }\n      }),\n      // Update quizzes to remove class association\n      db.quiz.updateMany({\n        where: { classId },\n        data: { classId: null }\n      }),\n      // Finally delete the class\n      db.class.delete({\n        where: { id: classId }\n      })\n    ]);\n    \n    return createSuccessResponse({ \n      message: \"Class deleted successfully\",\n      deletedId: classId\n    });\n    \n  } catch (error) {\n    console.error(\"Error deleting class:\", error);\n    return createServerError(error instanceof Error ? error : new Error(\"Unknown error\"));\n  }\n}\n\nasync function generateUniqueClassCode(length: number = 6, maxAttempts: number = 5): Promise<string> {\n  let attempts = 0;\n  while (attempts < maxAttempts) {\n    const code = generateClassCode(length);\n    \n    // Check if code already exists\n    const existingClass = await db.class.findUnique({\n      where: {\n        code\n      }\n    });\n    \n    if (!existingClass) {\n      return code;\n    }\n    \n    attempts++;\n  }\n  \n  // If we've reached max attempts, use a longer code to reduce collision chance\n  return generateClassCode(length + 2);\n} "],"names":[],"mappings":"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","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/notification-service.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\r\n\r\n// Define notification categories as string literals\r\nexport type NotificationCategory = \r\n  | 'NEW_QUIZ'\r\n  | 'QUIZ_REMINDER'\r\n  | 'QUIZ_GRADED'\r\n  | 'CLASS_JOINED'\r\n  | 'CLASS_UPDATED'\r\n  | 'SYSTEM';\r\n\r\n/**\r\n * Create a notification for a single user\r\n */\r\nexport async function createNotification({\r\n  userId,\r\n  title,\r\n  message,\r\n  category,\r\n  resourceId,\r\n  resourceType,\r\n  expiredAt\r\n}: {\r\n  userId: string;\r\n  title: string;\r\n  message: string;\r\n  category: NotificationCategory;\r\n  resourceId?: string;\r\n  resourceType?: string;\r\n  expiredAt?: Date;\r\n}) {\r\n  return db.notification.create({\r\n    data: {\r\n      userId,\r\n      title,\r\n      message,\r\n      category: category as any, // Type cast to handle any enum conversion issues\r\n      resourceId,\r\n      resourceType,\r\n      expiredAt\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Create notifications for all students in a class\r\n */\r\nexport async function createNotificationsForClass({\r\n  classId,\r\n  title,\r\n  message,\r\n  category,\r\n  resourceId,\r\n  resourceType,\r\n  expiredAt,\r\n  excludeUserIds = []\r\n}: {\r\n  classId: string;\r\n  title: string;\r\n  message: string;\r\n  category: NotificationCategory;\r\n  resourceId?: string;\r\n  resourceType?: string;\r\n  expiredAt?: Date;\r\n  excludeUserIds?: string[];\r\n}) {\r\n  // Get all students in the class\r\n  const enrollments = await db.classEnrollment.findMany({\r\n    where: {\r\n      classId,\r\n      studentId: {\r\n        notIn: excludeUserIds\r\n      }\r\n    },\r\n    select: {\r\n      studentId: true\r\n    }\r\n  });\r\n  \r\n  // Create notifications for all students\r\n  if (enrollments.length > 0) {\r\n    await db.notification.createMany({\r\n      data: enrollments.map(enrollment => ({\r\n        userId: enrollment.studentId,\r\n        title,\r\n        message,\r\n        category: category as any, // Type cast to handle any enum conversion issues\r\n        resourceId,\r\n        resourceType,\r\n        expiredAt\r\n      }))\r\n    });\r\n  }\r\n  \r\n  return enrollments.length;\r\n}\r\n\r\n/**\r\n * Mark notifications as read\r\n */\r\nexport async function markNotificationsAsRead(userId: string, notificationIds?: string[]) {\r\n  if (notificationIds && notificationIds.length > 0) {\r\n    // Mark specific notifications as read\r\n    return db.notification.updateMany({\r\n      where: {\r\n        id: { in: notificationIds },\r\n        userId\r\n      },\r\n      data: {\r\n        isRead: true\r\n      }\r\n    });\r\n  } else {\r\n    // Mark all notifications as read\r\n    return db.notification.updateMany({\r\n      where: {\r\n        userId,\r\n        isRead: false\r\n      },\r\n      data: {\r\n        isRead: true\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Delete expired notifications\r\n * (This can be run as a scheduled job)\r\n */\r\nexport async function deleteExpiredNotifications() {\r\n  const now = new Date();\r\n  \r\n  return db.notification.deleteMany({\r\n    where: {\r\n      expiredAt: {\r\n        lt: now\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Create automated quiz reminders\r\n * (This can be run as a scheduled job)\r\n */\r\nexport async function createQuizReminders() {\r\n  const now = new Date();\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(tomorrow.getDate() + 1);\r\n  \r\n  // Find quizzes ending within the next 24 hours\r\n  const upcomingQuizzes = await db.quiz.findMany({\r\n    where: {\r\n      endDate: {\r\n        gte: now,\r\n        lte: tomorrow\r\n      },\r\n      isActive: true,\r\n      isPublished: true\r\n    },\r\n    include: {\r\n      class: {\r\n        select: {\r\n          id: true,\r\n          name: true\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Create reminder notifications\r\n  for (const quiz of upcomingQuizzes) {\r\n    if (quiz.classId) {\r\n      await createNotificationsForClass({\r\n        classId: quiz.classId,\r\n        title: \"Quiz Reminder\",\r\n        message: `The quiz \"${quiz.title}\" in class \"${quiz.class?.name}\" will end on ${quiz.endDate.toLocaleString()}`,\r\n        category: 'QUIZ_REMINDER',\r\n        resourceId: quiz.id,\r\n        resourceType: \"quiz\",\r\n        expiredAt: quiz.endDate\r\n      });\r\n    }\r\n  }\r\n  \r\n  return upcomingQuizzes.length;\r\n} "],"names":[],"mappings":";;;;;;;AAAA;;AAcO,eAAe,mBAAmB,EACvC,MAAM,EACN,KAAK,EACL,OAAO,EACP,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,SAAS,EASV;IACC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,MAAM,CAAC;QAC5B,MAAM;YACJ;YACA;YACA;YACA,UAAU;YACV;YACA;YACA;QACF;IACF;AACF;AAKO,eAAe,4BAA4B,EAChD,OAAO,EACP,KAAK,EACL,OAAO,EACP,QAAQ,EACR,UAAU,EACV,YAAY,EACZ,SAAS,EACT,iBAAiB,EAAE,EAUpB;IACC,gCAAgC;IAChC,MAAM,cAAc,MAAM,2GAAA,CAAA,KAAE,CAAC,eAAe,CAAC,QAAQ,CAAC;QACpD,OAAO;YACL;YACA,WAAW;gBACT,OAAO;YACT;QACF;QACA,QAAQ;YACN,WAAW;QACb;IACF;IAEA,wCAAwC;IACxC,IAAI,YAAY,MAAM,GAAG,GAAG;QAC1B,MAAM,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAC/B,MAAM,YAAY,GAAG,CAAC,CAAA,aAAc,CAAC;oBACnC,QAAQ,WAAW,SAAS;oBAC5B;oBACA;oBACA,UAAU;oBACV;oBACA;oBACA;gBACF,CAAC;QACH;IACF;IAEA,OAAO,YAAY,MAAM;AAC3B;AAKO,eAAe,wBAAwB,MAAc,EAAE,eAA0B;IACtF,IAAI,mBAAmB,gBAAgB,MAAM,GAAG,GAAG;QACjD,sCAAsC;QACtC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,OAAO;gBACL,IAAI;oBAAE,IAAI;gBAAgB;gBAC1B;YACF;YACA,MAAM;gBACJ,QAAQ;YACV;QACF;IACF,OAAO;QACL,iCAAiC;QACjC,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;YAChC,OAAO;gBACL;gBACA,QAAQ;YACV;YACA,MAAM;gBACJ,QAAQ;YACV;QACF;IACF;AACF;AAMO,eAAe;IACpB,MAAM,MAAM,IAAI;IAEhB,OAAO,2GAAA,CAAA,KAAE,CAAC,YAAY,CAAC,UAAU,CAAC;QAChC,OAAO;YACL,WAAW;gBACT,IAAI;YACN;QACF;IACF;AACF;AAMO,eAAe;IACpB,MAAM,MAAM,IAAI;IAChB,MAAM,WAAW,IAAI,KAAK;IAC1B,SAAS,OAAO,CAAC,SAAS,OAAO,KAAK;IAEtC,+CAA+C;IAC/C,MAAM,kBAAkB,MAAM,2GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC7C,OAAO;YACL,SAAS;gBACP,KAAK;gBACL,KAAK;YACP;YACA,UAAU;YACV,aAAa;QACf;QACA,SAAS;YACP,OAAO;gBACL,QAAQ;oBACN,IAAI;oBACJ,MAAM;gBACR;YACF;QACF;IACF;IAEA,gCAAgC;IAChC,KAAK,MAAM,QAAQ,gBAAiB;QAClC,IAAI,KAAK,OAAO,EAAE;YAChB,MAAM,4BAA4B;gBAChC,SAAS,KAAK,OAAO;gBACrB,OAAO;gBACP,SAAS,CAAC,UAAU,EAAE,KAAK,KAAK,CAAC,YAAY,EAAE,KAAK,KAAK,EAAE,KAAK,cAAc,EAAE,KAAK,OAAO,CAAC,cAAc,IAAI;gBAC/G,UAAU;gBACV,YAAY,KAAK,EAAE;gBACnB,cAAc;gBACd,WAAW,KAAK,OAAO;YACzB;QACF;IACF;IAEA,OAAO,gBAAgB,MAAM;AAC/B","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/service-trigger.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\r\nimport { createNotification, createNotificationsForClass, NotificationCategory } from \"@/lib/notification-service\";\r\n\r\n/**\r\n * Service triggers for handling notifications across the application\r\n * This file contains functions that can be called after certain events\r\n * to trigger notifications and other side effects\r\n */\r\n\r\n/**\r\n * Creates notifications for all students in a class when a new announcement is created\r\n */\r\nexport async function triggerClassAnnouncementNotification({\r\n  classId,\r\n  announcementId,\r\n  title,\r\n  content,\r\n  teacherId,\r\n}: {\r\n  classId: string;\r\n  announcementId: string;\r\n  title: string;\r\n  content: string;\r\n  teacherId: string;\r\n}) {\r\n  try {\r\n    // Get class details for the notification message\r\n    const classDetails = await db.class.findUnique({\r\n      where: { id: classId },\r\n      select: { name: true }\r\n    });\r\n\r\n    if (!classDetails) {\r\n      console.error(`Could not find class with ID ${classId} for announcement notification`);\r\n      return 0;\r\n    }\r\n\r\n    // Create notifications for all students in the class\r\n    const notifiedCount = await createNotificationsForClass({\r\n      classId,\r\n      title: \"New Class Announcement\",\r\n      message: `New announcement in \"${classDetails.name}\": ${title}`,\r\n      category: 'CLASS_UPDATED', // Ensure this matches a valid NotificationType in Prisma schema\r\n      resourceId: classId, // Use classId as resourceId for proper navigation\r\n      resourceType: \"class\", // Use class as the resource type for consistent navigation\r\n      // Exclude the teacher who created the announcement\r\n      excludeUserIds: [teacherId],\r\n    });\r\n\r\n    return notifiedCount;\r\n  } catch (error) {\r\n    console.error(\"Error creating class announcement notifications:\", error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates notifications when a class is updated (details changed)\r\n */\r\nexport async function triggerClassUpdatedNotification({\r\n  classId,\r\n  className,\r\n  teacherId,\r\n  updatedFields = []\r\n}: {\r\n  classId: string;\r\n  className: string;\r\n  teacherId: string;\r\n  updatedFields?: string[];\r\n}) {\r\n  try {\r\n    let message = `The class \"${className}\" has been updated`;\r\n    \r\n    // Add specific details about what was updated if available\r\n    if (updatedFields.length > 0) {\r\n      message += `: ${updatedFields.join(\", \")}`;\r\n    }\r\n\r\n    // Create notifications for all students in the class\r\n    const notifiedCount = await createNotificationsForClass({\r\n      classId,\r\n      title: \"Class Updated\",\r\n      message,\r\n      category: 'CLASS_UPDATED',\r\n      resourceId: classId,\r\n      resourceType: \"class\",\r\n      // Exclude the teacher who made the update\r\n      excludeUserIds: [teacherId]\r\n    });\r\n\r\n    return notifiedCount;\r\n  } catch (error) {\r\n    console.error(\"Error creating class updated notifications:\", error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates notifications when a quiz is graded\r\n */\r\nexport async function triggerQuizGradedNotification({\r\n  quizId,\r\n  quizTitle,\r\n  studentId,\r\n  score,\r\n  totalScore,\r\n  classId,\r\n  className,\r\n}: {\r\n  quizId: string;\r\n  quizTitle: string;\r\n  studentId: string;\r\n  score: number;\r\n  totalScore: number;\r\n  classId?: string;\r\n  className?: string;\r\n}) {\r\n  try {\r\n    let message = `Your quiz \"${quizTitle}\" has been graded. Score: ${score}/${totalScore}`;\r\n    \r\n    // Add class info if available\r\n    if (className) {\r\n      message += ` in class \"${className}\"`;\r\n    }\r\n\r\n    // Create notification for the student\r\n    await createNotification({\r\n      userId: studentId,\r\n      title: \"Quiz Graded\",\r\n      message,\r\n      category: 'QUIZ_GRADED',\r\n      resourceId: quizId,\r\n      resourceType: \"quiz\"\r\n    });\r\n\r\n    return 1;\r\n  } catch (error) {\r\n    console.error(\"Error creating quiz graded notification:\", error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Run scheduled tasks like sending reminders, etc.\r\n * This can be called from a cron job or similar\r\n */\r\nexport async function runScheduledNotificationTasks() {\r\n  try {\r\n    // Import the function here to avoid circular dependencies\r\n    const { createQuizReminders, deleteExpiredNotifications } = require(\"./notification-service\");\r\n    \r\n    // Run scheduled tasks\r\n    const reminderCount = await createQuizReminders();\r\n    const deletedCount = await deleteExpiredNotifications();\r\n    \r\n    return {\r\n      remindersSent: reminderCount,\r\n      notificationsDeleted: deletedCount\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error running scheduled notification tasks:\", error);\r\n    return {\r\n      remindersSent: 0,\r\n      notificationsDeleted: 0,\r\n      error: error instanceof Error ? error.message : \"Unknown error\"\r\n    };\r\n  }\r\n} "],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAWO,eAAe,qCAAqC,EACzD,OAAO,EACP,cAAc,EACd,KAAK,EACL,OAAO,EACP,SAAS,EAOV;IACC,IAAI;QACF,iDAAiD;QACjD,MAAM,eAAe,MAAM,2GAAA,CAAA,KAAE,CAAC,KAAK,CAAC,UAAU,CAAC;YAC7C,OAAO;gBAAE,IAAI;YAAQ;YACrB,QAAQ;gBAAE,MAAM;YAAK;QACvB;QAEA,IAAI,CAAC,cAAc;YACjB,QAAQ,KAAK,CAAC,CAAC,6BAA6B,EAAE,QAAQ,8BAA8B,CAAC;YACrF,OAAO;QACT;QAEA,qDAAqD;QACrD,MAAM,gBAAgB,MAAM,CAAA,GAAA,gIAAA,CAAA,8BAA2B,AAAD,EAAE;YACtD;YACA,OAAO;YACP,SAAS,CAAC,qBAAqB,EAAE,aAAa,IAAI,CAAC,GAAG,EAAE,OAAO;YAC/D,UAAU;YACV,YAAY;YACZ,cAAc;YACd,mDAAmD;YACnD,gBAAgB;gBAAC;aAAU;QAC7B;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oDAAoD;QAClE,OAAO;IACT;AACF;AAKO,eAAe,gCAAgC,EACpD,OAAO,EACP,SAAS,EACT,SAAS,EACT,gBAAgB,EAAE,EAMnB;IACC,IAAI;QACF,IAAI,UAAU,CAAC,WAAW,EAAE,UAAU,kBAAkB,CAAC;QAEzD,2DAA2D;QAC3D,IAAI,cAAc,MAAM,GAAG,GAAG;YAC5B,WAAW,CAAC,EAAE,EAAE,cAAc,IAAI,CAAC,OAAO;QAC5C;QAEA,qDAAqD;QACrD,MAAM,gBAAgB,MAAM,CAAA,GAAA,gIAAA,CAAA,8BAA2B,AAAD,EAAE;YACtD;YACA,OAAO;YACP;YACA,UAAU;YACV,YAAY;YACZ,cAAc;YACd,0CAA0C;YAC1C,gBAAgB;gBAAC;aAAU;QAC7B;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO;IACT;AACF;AAKO,eAAe,8BAA8B,EAClD,MAAM,EACN,SAAS,EACT,SAAS,EACT,KAAK,EACL,UAAU,EACV,OAAO,EACP,SAAS,EASV;IACC,IAAI;QACF,IAAI,UAAU,CAAC,WAAW,EAAE,UAAU,0BAA0B,EAAE,MAAM,CAAC,EAAE,YAAY;QAEvF,8BAA8B;QAC9B,IAAI,WAAW;YACb,WAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QACvC;QAEA,sCAAsC;QACtC,MAAM,CAAA,GAAA,gIAAA,CAAA,qBAAkB,AAAD,EAAE;YACvB,QAAQ;YACR,OAAO;YACP;YACA,UAAU;YACV,YAAY;YACZ,cAAc;QAChB;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,OAAO;IACT;AACF;AAMO,eAAe;IACpB,IAAI;QACF,0DAA0D;QAC1D,MAAM,EAAE,mBAAmB,EAAE,0BAA0B,EAAE;QAEzD,sBAAsB;QACtB,MAAM,gBAAgB,MAAM;QAC5B,MAAM,eAAe,MAAM;QAE3B,OAAO;YACL,eAAe;YACf,sBAAsB;QACxB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO;YACL,eAAe;YACf,sBAAsB;YACtB,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD;IACF;AACF","debugId":null}}]
}
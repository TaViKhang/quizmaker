{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/prisma.ts"],"sourcesContent":["import { db } from './db';\n\n// Re-export với tên khác để không phá vỡ code đang sử dụng\nexport const prisma = db;"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,SAAS,yGAAA,CAAA,KAAE","debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/question-utils.ts"],"sourcesContent":["import { QuestionType } from \"@prisma/client\";\nimport { \n  MultipleChoiceMetadata,\n  EssayMetadata,\n  ShortAnswerMetadata,\n  FillBlankMetadata,\n  CodeMetadata,\n  MatchingMetadata,\n} from \"@/app/api/schemas/question-metadata-schemas\";\n\n/**\n * Interface for Question data structure\n */\nexport interface Question {\n  id: string;\n  content: string;\n  type: QuestionType;\n  points: number;\n  order: number;\n  explanation?: string | null;\n  metadata?: any | null;\n  mediaType?: string | null;\n  mediaUrl?: string | null;\n  options?: Option[];\n}\n\n/**\n * Interface for Option data structure\n */\nexport interface Option {\n  id: string;\n  content: string;\n  isCorrect: boolean;\n  order: number;\n  group?: string | null;\n  matchId?: string | null;\n  position?: number | null;\n}\n\n/**\n * Interface for Answer data structure\n */\nexport interface Answer {\n  questionId: string;\n  selectedOptions: string[];  // IDs of selected options\n  textAnswer: string;         // Text answer for essay/short answer/code\n  jsonData: string | null; // Complex data for matching/fill-blank questions (JSON string)\n}\n\n/**\n * Shuffles an array using Fisher-Yates algorithm\n * @param array The array to shuffle\n * @returns A new shuffled array\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  if (!array || array.length === 0) return [];\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n}\n\n/**\n * Normalize metadata from string or object format\n */\nexport function normalizeMetadata<T = any>(metadata: any): T | null {\n  if (!metadata) return null;\n  \n  // If metadata is already an object, return it\n  if (typeof metadata === 'object' && !Array.isArray(metadata) && metadata !== null) {\n    return metadata as T;\n  }\n  \n  // If metadata is a string, try to parse it\n  if (typeof metadata === 'string') {\n    try {\n      // Check if the string is valid JSON\n      if (metadata.trim().startsWith('{') || metadata.trim().startsWith('[')) {\n        return JSON.parse(metadata) as T;\n      } else {\n        console.warn(\"Metadata string is not valid JSON:\", metadata);\n        return null;\n      }\n    } catch (e) {\n      console.error(\"Error parsing metadata string:\", e);\n      return null;\n    }\n  }\n  \n  // For unexpected types, log and return null\n  console.warn(\"Unexpected metadata type:\", typeof metadata);\n  return null;\n}\n\n/**\n * Get default metadata structure based on question type\n */\nexport function getDefaultMetadata(questionType: QuestionType): any {\n  switch (questionType) {\n    case QuestionType.MULTIPLE_CHOICE:\n      return { allowMultiple: false, shuffleOptions: false };\n    \n    case QuestionType.ESSAY:\n      return { minWords: null, maxWords: null, placeholder: \"\", richText: false };\n    \n    case QuestionType.SHORT_ANSWER:\n      return { caseSensitive: false, placeholder: \"\" };\n    \n    case QuestionType.FILL_BLANK:\n      return { text: \"\", caseSensitive: false };\n    \n    case QuestionType.CODE:\n      return { language: \"javascript\", initialCode: \"\", testCases: [] };\n    \n    case QuestionType.MATCHING:\n      return { shuffleOptions: false };\n    \n    default:\n      return {};\n  }\n}\n\n/**\n * Normalize question data ensuring it has the correct metadata structure\n */\nexport function normalizeQuestion(question: Question): Question {\n  // Clone question to avoid mutating the original\n  const normalizedQuestion = { ...question };\n  \n  // Normalize metadata\n  const normalizedMetadata = normalizeMetadata(question.metadata) || \n    getDefaultMetadata(question.type);\n  \n  return {\n    ...normalizedQuestion,\n    metadata: normalizedMetadata\n  };\n}\n\n/**\n * Get type-specific metadata from a normalized question\n */\nexport function getTypedMetadata<T>(question: Question): T | null {\n  if (!question.metadata) return null;\n  \n  try {\n    const normalizedMetadata = normalizeMetadata<T>(question.metadata);\n    return normalizedMetadata;\n  } catch (e) {\n    console.error(\"Error getting typed metadata:\", e);\n    return null;\n  }\n}\n\n/**\n * Get multiple choice specific metadata\n * Improved to handle various metadata formats and provide stronger type safety\n */\nexport function getMultipleChoiceMetadata(question: Question): MultipleChoiceMetadata {\n  // Default values for multiple choice metadata\n  const defaultMetadata: MultipleChoiceMetadata = { \n    allowMultiple: false, \n    shuffleOptions: false, \n    allowPartialCredit: true \n  };\n  \n  // Guard clause for when metadata is completely absent\n  if (!question || !question.metadata) {\n    return defaultMetadata;\n  }\n  \n  // Try to normalize the metadata first\n  let metadata = normalizeMetadata<any>(question.metadata);\n  \n  // If normalization fails, return default\n  if (!metadata) {\n    return defaultMetadata;\n  }\n  \n  // Create result by merging default with whatever we can extract\n  const result: MultipleChoiceMetadata = { \n    ...defaultMetadata \n  };\n  \n  // Handle both naming conventions for multiple answers\n  if (typeof metadata.allowMultiple !== 'undefined') {\n    result.allowMultiple = Boolean(metadata.allowMultiple);\n  } else if (typeof metadata.allowMultipleAnswers !== 'undefined') {\n    result.allowMultiple = Boolean(metadata.allowMultipleAnswers);\n    }\n  \n  // Handle shuffle options setting\n  if (typeof metadata.shuffleOptions !== 'undefined') {\n    result.shuffleOptions = Boolean(metadata.shuffleOptions);\n  }\n  \n  // Handle partial credit setting, defaulting to true if undefined\n  if (typeof metadata.allowPartialCredit !== 'undefined') {\n    result.allowPartialCredit = Boolean(metadata.allowPartialCredit);\n  }\n  \n  return result;\n}\n\n/**\n * Get essay specific metadata\n */\nexport function getEssayMetadata(question: Question): EssayMetadata {\n  return getTypedMetadata<EssayMetadata>(question) || \n    { minWords: undefined, maxWords: undefined, placeholder: undefined, richText: false };\n}\n\n/**\n * Get short answer specific metadata\n */\nexport function getShortAnswerMetadata(question: Question): ShortAnswerMetadata {\n  return getTypedMetadata<ShortAnswerMetadata>(question) || \n    { caseSensitive: false, placeholder: undefined };\n}\n\n/**\n * Get fill-blank specific metadata\n */\nexport function getFillBlankMetadata(question: Question): FillBlankMetadata {\n  return getTypedMetadata<FillBlankMetadata>(question) || \n    { text: \"\", caseSensitive: false };\n}\n\n/**\n * Get code specific metadata\n */\nexport function getCodeMetadata(question: Question): CodeMetadata {\n  return getTypedMetadata<CodeMetadata>(question) || \n    { language: \"javascript\", initialCode: undefined, testCases: undefined };\n}\n\n/**\n * Get matching specific metadata\n */\nexport function getMatchingMetadata(question: Question): MatchingMetadata {\n  return getTypedMetadata<MatchingMetadata>(question) || \n    { shuffleOptions: false };\n}\n\n/**\n * Get the display label for a question type\n */\nexport function getQuestionTypeLabel(type: QuestionType): string {\n  switch (type) {\n    case QuestionType.MULTIPLE_CHOICE: return \"Multiple Choice\";\n    case QuestionType.TRUE_FALSE: return \"True/False\";\n    case QuestionType.ESSAY: return \"Essay\";\n    case QuestionType.SHORT_ANSWER: return \"Short Answer\";\n    case QuestionType.MATCHING: return \"Matching\";\n    case QuestionType.FILL_BLANK: return \"Fill in the Blanks\";\n    case QuestionType.CODE: return \"Code\";\n    case QuestionType.FILE_UPLOAD: return \"File Upload\";\n    default: return type;\n  }\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    variant?: \"default\" | \"outline\" | \"accent\" | \"highlight\" | \"interactive\"\n  }\n>(({ className, variant = \"default\", ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm transition-all duration-200\",\n      variant === \"default\" && \"border-border\", \n      variant === \"outline\" && \"border-2 border-border shadow-none\",\n      variant === \"accent\" && \"border-border border-l-4 border-l-accent\",\n      variant === \"highlight\" && \"border-border bg-accent/5\",\n      variant === \"interactive\" && \"border-border hover:border-accent hover:shadow-md cursor-pointer\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-h3 font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\n// New components for more expressive cards\nconst CardBadge = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    variant?: \"default\" | \"success\" | \"warning\" | \"destructive\" | \"info\"\n  }\n>(({ className, variant = \"default\", ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium\",\n      variant === \"default\" && \"bg-secondary text-secondary-foreground\",\n      variant === \"success\" && \"bg-success/20 text-success\",\n      variant === \"warning\" && \"bg-warning/20 text-warning\",\n      variant === \"destructive\" && \"bg-destructive/20 text-destructive\",\n      variant === \"info\" && \"bg-info/20 text-info\",\n      className\n    )}\n    {...props}\n  />\n))\nCardBadge.displayName = \"CardBadge\"\n\nconst CardMedia = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"relative overflow-hidden rounded-t-lg\", className)}\n    {...props}\n  />\n))\nCardMedia.displayName = \"CardMedia\"\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardBadge,\n  CardMedia,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAK1B,CAAC,EAAE,SAAS,EAAE,UAAU,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC/C,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,wFACA,YAAY,aAAa,iBACzB,YAAY,aAAa,sCACzB,YAAY,YAAY,4CACxB,YAAY,eAAe,6BAC3B,YAAY,iBAAiB,oEAC7B;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,2CAA2C;AAC3C,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAK/B,CAAC,EAAE,SAAS,EAAE,UAAU,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC/C,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,2EACA,YAAY,aAAa,0CACzB,YAAY,aAAa,8BACzB,YAAY,aAAa,8BACzB,YAAY,iBAAiB,sCAC7B,YAAY,UAAU,wBACtB;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,yCAAyC;QACtD,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/tabs.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Tabs = registerClientReference(\n    function() { throw new Error(\"Attempted to call Tabs() from the server but Tabs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx <module evaluation>\",\n    \"Tabs\",\n);\nexport const TabsContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsContent() from the server but TabsContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx <module evaluation>\",\n    \"TabsContent\",\n);\nexport const TabsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsList() from the server but TabsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx <module evaluation>\",\n    \"TabsList\",\n);\nexport const TabsTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsTrigger() from the server but TabsTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx <module evaluation>\",\n    \"TabsTrigger\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,wDACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,wDACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,wDACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,wDACA","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/tabs.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Tabs = registerClientReference(\n    function() { throw new Error(\"Attempted to call Tabs() from the server but Tabs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx\",\n    \"Tabs\",\n);\nexport const TabsContent = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsContent() from the server but TabsContent is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx\",\n    \"TabsContent\",\n);\nexport const TabsList = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsList() from the server but TabsList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx\",\n    \"TabsList\",\n);\nexport const TabsTrigger = registerClientReference(\n    function() { throw new Error(\"Attempted to call TabsTrigger() from the server but TabsTrigger is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/ui/tabs.tsx\",\n    \"TabsTrigger\",\n);\n"],"names":[],"mappings":";;;;;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,oCACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,oCACA;AAEG,MAAM,WAAW,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,oCACA;AAEG,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,oCACA","debugId":null}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \n          \"text-foreground hover:bg-secondary\",\n        success:\n          \"border-transparent bg-success text-success-foreground hover:bg-success/80\",\n        warning:\n          \"border-transparent bg-warning text-warning-foreground hover:bg-warning/80\",\n        info:\n          \"border-transparent bg-info text-info-foreground hover:bg-info/80\",\n        accent:\n          \"border-transparent bg-accent text-accent-foreground hover:bg-accent/80\",\n      },\n      size: {\n        default: \"text-xs px-2.5 py-0.5\",\n        sm: \"text-[10px] px-2 py-0.25\",\n        lg: \"text-sm px-3 py-1\",\n      },\n      rounded: {\n        default: \"rounded-full\",\n        md: \"rounded-md\",\n        none: \"rounded-none\",\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      rounded: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {\n  icon?: React.ReactNode\n}\n\nfunction Badge({\n  className,\n  variant,\n  size,\n  rounded,\n  icon,\n  children,\n  ...props\n}: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant, size, rounded, className }))} {...props}>\n      {icon && <span className=\"mr-1\">{icon}</span>}\n      {children}\n    </div>\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SACE;YACF,SACE;YACF,SACE;YACF,MACE;YACF,QACE;QACJ;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;QACN;QACA,SAAS;YACP,SAAS;YACT,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;QACN,SAAS;IACX;AACF;AASF,SAAS,MAAM,EACb,SAAS,EACT,OAAO,EACP,IAAI,EACJ,OAAO,EACP,IAAI,EACJ,QAAQ,EACR,GAAG,OACQ;IACX,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;YAAS;YAAM;YAAS;QAAU;QAAM,GAAG,KAAK;;YAChF,sBAAQ,8OAAC;gBAAK,WAAU;0BAAQ;;;;;;YAChC;;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 504, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/grading/%5Bid%5D/question-grader.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/dashboard/teacher/grading/[id]/question-grader.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/teacher/grading/[id]/question-grader.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0T,GACvV,wFACA","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/grading/%5Bid%5D/question-grader.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/dashboard/teacher/grading/[id]/question-grader.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/teacher/grading/[id]/question-grader.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 542, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/lib/navigation-adapter.ts"],"sourcesContent":["import { Role } from \"@prisma/client\";\r\nimport { ClipboardCheck } from \"lucide-react\";\r\nimport { DashboardNavItem } from \"./constants\";\r\n\r\n/**\r\n * Navigation adapter để thêm routes mới mà không ảnh hưởng đến hệ thống cũ\r\n * Dùng adapter pattern để ánh xạ các routes mới vào hệ thống navigation hiện tại\r\n */\r\n\r\n// Map between old routes và new routes\r\nconst ROUTE_MAPPINGS = {\r\n  // Student routes\r\n  studentResults: {\r\n    oldRoute: \"/dashboard/student/results\",\r\n    newRoutePattern: \"/dashboard/student/quizzes/results/\",\r\n  },\r\n  // Teacher routes\r\n  teacherResults: {\r\n    oldRoute: \"/dashboard/teacher/results\", \r\n    newRoutePattern: \"/dashboard/teacher/grading\",\r\n  }\r\n};\r\n\r\n/**\r\n * Function kiểm tra xem một route hiện tại có tương ứng với \r\n * route mới nào không để hiển thị active state\r\n */\r\nexport function isActiveRoute(currentPath: string, navItemPath: string): boolean {\r\n  // Kiểm tra exact match\r\n  if (currentPath === navItemPath) return true;\r\n  \r\n  // Kiểm tra mapping\r\n  for (const key in ROUTE_MAPPINGS) {\r\n    const mapping = ROUTE_MAPPINGS[key as keyof typeof ROUTE_MAPPINGS];\r\n    \r\n    // Nếu đang ở route mới nhưng menu item là route cũ\r\n    if (\r\n      currentPath.startsWith(mapping.newRoutePattern) && \r\n      navItemPath === mapping.oldRoute\r\n    ) {\r\n      return true;\r\n    }\r\n    \r\n    // Nếu đang ở route cũ nhưng menu item là route mới\r\n    if (\r\n      currentPath === mapping.oldRoute && \r\n      navItemPath.startsWith(mapping.newRoutePattern)\r\n    ) {\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n/**\r\n * Function để lấy nav items bổ sung cho các tính năng mới\r\n * mà không cần sửa đổi DASHBOARD_NAV_LINKS\r\n */\r\nexport function getAdditionalNavItems(): DashboardNavItem[] {\r\n  return [\r\n    {\r\n      title: \"Grading\",\r\n      href: \"/dashboard/teacher/grading\",\r\n      icon: ClipboardCheck,\r\n      roles: [Role.TEACHER],\r\n      hideInTopNav: true, // Ẩn trên top nav, giữ chỉ trong sidebar\r\n    },\r\n  ];\r\n}\r\n\r\n/**\r\n * Function để lấy breadcrumb title cho các route mới\r\n */\r\nexport function getExtendedPathMap(): Record<string, string> {\r\n  return {\r\n    // Existing paths stay the same\r\n    \"dashboard\": \"Dashboard\",\r\n    \"teacher\": \"Teacher\",\r\n    \"student\": \"Student\",\r\n    \"quizzes\": \"Quizzes\",\r\n    \"results\": \"Results\",\r\n    \"exams\": \"Exams\",\r\n    \r\n    // New paths\r\n    \"grading\": \"Grading\",\r\n    \"attempt\": \"Quiz Attempt\",\r\n  };\r\n}\r\n\r\n/**\r\n * Function ánh xạ từ route cũ sang route mới (cho navigation)\r\n */\r\nexport function mapToNewRoute(oldRoute: string): string {\r\n  for (const key in ROUTE_MAPPINGS) {\r\n    const mapping = ROUTE_MAPPINGS[key as keyof typeof ROUTE_MAPPINGS];\r\n    if (oldRoute === mapping.oldRoute) {\r\n      return mapping.newRoutePattern;\r\n    }\r\n  }\r\n  return oldRoute; // Nếu không có mapping thì giữ nguyên\r\n}\r\n\r\n/**\r\n * Function ánh xạ từ route mới sang route cũ (cho breadcrumbs)\r\n */\r\nexport function mapToOldRoute(newRoute: string): string {\r\n  for (const key in ROUTE_MAPPINGS) {\r\n    const mapping = ROUTE_MAPPINGS[key as keyof typeof ROUTE_MAPPINGS];\r\n    if (newRoute.startsWith(mapping.newRoutePattern)) {\r\n      return mapping.oldRoute;\r\n    }\r\n  }\r\n  return newRoute; // Nếu không có mapping thì giữ nguyên\r\n} "],"names":[],"mappings":";;;;;;;AAAA;AACA;;;AAGA;;;CAGC,GAED,uCAAuC;AACvC,MAAM,iBAAiB;IACrB,iBAAiB;IACjB,gBAAgB;QACd,UAAU;QACV,iBAAiB;IACnB;IACA,iBAAiB;IACjB,gBAAgB;QACd,UAAU;QACV,iBAAiB;IACnB;AACF;AAMO,SAAS,cAAc,WAAmB,EAAE,WAAmB;IACpE,uBAAuB;IACvB,IAAI,gBAAgB,aAAa,OAAO;IAExC,mBAAmB;IACnB,IAAK,MAAM,OAAO,eAAgB;QAChC,MAAM,UAAU,cAAc,CAAC,IAAmC;QAElE,mDAAmD;QACnD,IACE,YAAY,UAAU,CAAC,QAAQ,eAAe,KAC9C,gBAAgB,QAAQ,QAAQ,EAChC;YACA,OAAO;QACT;QAEA,mDAAmD;QACnD,IACE,gBAAgB,QAAQ,QAAQ,IAChC,YAAY,UAAU,CAAC,QAAQ,eAAe,GAC9C;YACA,OAAO;QACT;IACF;IAEA,OAAO;AACT;AAMO,SAAS;IACd,OAAO;QACL;YACE,OAAO;YACP,MAAM;YACN,MAAM,0NAAA,CAAA,iBAAc;YACpB,OAAO;gBAAC,6HAAA,CAAA,OAAI,CAAC,OAAO;aAAC;YACrB,cAAc;QAChB;KACD;AACH;AAKO,SAAS;IACd,OAAO;QACL,+BAA+B;QAC/B,aAAa;QACb,WAAW;QACX,WAAW;QACX,WAAW;QACX,WAAW;QACX,SAAS;QAET,YAAY;QACZ,WAAW;QACX,WAAW;IACb;AACF;AAKO,SAAS,cAAc,QAAgB;IAC5C,IAAK,MAAM,OAAO,eAAgB;QAChC,MAAM,UAAU,cAAc,CAAC,IAAmC;QAClE,IAAI,aAAa,QAAQ,QAAQ,EAAE;YACjC,OAAO,QAAQ,eAAe;QAChC;IACF;IACA,OAAO,UAAU,sCAAsC;AACzD;AAKO,SAAS,cAAc,QAAgB;IAC5C,IAAK,MAAM,OAAO,eAAgB;QAChC,MAAM,UAAU,cAAc,CAAC,IAAmC;QAClE,IAAI,SAAS,UAAU,CAAC,QAAQ,eAAe,GAAG;YAChD,OAAO,QAAQ,QAAQ;QACzB;IACF;IACA,OAAO,UAAU,sCAAsC;AACzD","debugId":null}},
    {"offset": {"line": 637, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/grading/%5Bid%5D/page.tsx"],"sourcesContent":["import React from 'react';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\nimport { prisma } from '@/lib/prisma';\nimport { redirect, notFound } from 'next/navigation';\nimport { format } from 'date-fns';\nimport Link from 'next/link';\nimport { normalizeQuestion } from '@/lib/question-utils';\nimport { QuestionType } from '@prisma/client';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { CalendarDays, ChevronLeft, Clock, FileSpreadsheet, User, ArrowLeft } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport QuestionGrader from './question-grader';\nimport { Breadcrumbs } from \"@/components/navigation/breadcrumbs\";\nimport { getExtendedPathMap } from \"@/lib/navigation-adapter\";\n\nexport default async function AttemptGradingPage({ params }: { params: { id: string } }) {\n  const session = await getServerSession(authOptions);\n  \n  if (!session?.user || session.user.role !== 'TEACHER') {\n    redirect('/dashboard');\n  }\n  \n  const attemptId = params.id;\n  \n  // Get quiz attempt with all related data\n  const attempt = await prisma.quizAttempt.findUnique({\n    where: {\n      id: attemptId,\n      quiz: {\n        authorId: session.user.id, // Ensure teacher owns this quiz\n      },\n    },\n    include: {\n      user: {\n        select: {\n          id: true,\n          name: true,\n          email: true,\n        }\n      },\n      quiz: {\n        select: {\n          id: true,\n          title: true,\n          description: true,\n          passingScore: true,\n        }\n      },\n      answers: {\n        where: {\n          isCorrect: null,\n          score: null,\n        },\n        orderBy: {\n          questionId: 'asc',\n        },\n        include: {\n          question: {\n            include: {\n              options: true,\n            }\n          }\n        }\n      }\n    },\n  });\n  \n  if (!attempt) {\n    notFound();\n  }\n  \n  // Calculate current stats\n  const totalQuestionsNeedingGrading = attempt.answers.length;\n  const hasManualGradingQuestions = totalQuestionsNeedingGrading > 0;\n  \n  return (\n    <div className=\"container px-4 py-6 space-y-6\">\n      <Breadcrumbs \n        pathMap={getExtendedPathMap()} \n        background=\"transparent\"\n      />\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold sm:text-3xl\">Grading: {attempt.quiz.title}</h1>\n          <p className=\"text-muted-foreground\">Student: {attempt.user.name}</p>\n        </div>\n        <Button asChild variant=\"outline\" size=\"sm\">\n          <Link href=\"/dashboard/teacher/grading\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Grading\n          </Link>\n        </Button>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle>Quiz</CardTitle>\n            <CardDescription>\n              {attempt.quiz.title}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col gap-2 text-sm\">\n              <div className=\"flex items-center\">\n                <User className=\"h-4 w-4 mr-2\" />\n                {attempt.user.name}\n              </div>\n              <div className=\"flex items-center\">\n                <CalendarDays className=\"h-4 w-4 mr-2\" />\n                {format(new Date(attempt.completedAt!), 'PPP')}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle>Progress</CardTitle>\n            <CardDescription>Manual grading progress</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-4xl font-bold mb-2\">\n              {totalQuestionsNeedingGrading}\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Questions remaining to grade\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle>Time Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col gap-2 text-sm\">\n              <div className=\"flex items-center\">\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Time spent: {formatTime(attempt.timeSpent || 0)}\n              </div>\n              <div className=\"flex items-center\">\n                <FileSpreadsheet className=\"h-4 w-4 mr-2\" />\n                {attempt.quiz.passingScore ? `Passing score: ${attempt.quiz.passingScore}%` : 'No passing score set'}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {!hasManualGradingQuestions ? (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-center text-muted-foreground py-8\">\n              All questions have been graded for this submission.\n            </p>\n          </CardContent>\n          <CardFooter className=\"flex justify-center\">\n            <Button asChild>\n              <Link href=\"/dashboard/teacher/grading\">\n                Return to Grading Dashboard\n              </Link>\n            </Button>\n          </CardFooter>\n        </Card>\n      ) : (\n        <Tabs defaultValue={attempt.answers[0]?.id || \"none\"} className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold mb-2\">Questions</h2>\n            <TabsList className=\"grid grid-flow-col auto-cols-max gap-2\">\n              {attempt.answers.map((answer, index) => (\n                <TabsTrigger key={answer.id} value={answer.id}>\n                  Question {index + 1}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n          </div>\n          \n          {attempt.answers.map((answer) => {\n            const normalizedQuestion = normalizeQuestion({\n              id: answer.question.id,\n              content: answer.question.content,\n              type: answer.question.type as QuestionType,\n              points: answer.question.points || 1,\n              order: answer.question.order || 0,\n              metadata: answer.question.metadata,\n              options: answer.question.options.map(opt => ({\n                id: opt.id,\n                content: opt.content,\n                isCorrect: opt.isCorrect,\n                order: opt.order,\n                group: opt.group,\n                matchId: opt.matchId,\n                position: opt.position\n              }))\n            });\n            \n            return (\n              <TabsContent key={answer.id} value={answer.id} className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                  <div>\n                    <h3 className=\"text-lg font-medium\">\n                      {formatQuestionType(normalizedQuestion.type)}\n                    </h3>\n                    <p className=\"text-muted-foreground text-sm\">\n                      {normalizedQuestion.points} {normalizedQuestion.points === 1 ? 'point' : 'points'}\n                    </p>\n                  </div>\n                      <Badge variant=\"outline\">\n                    Question {normalizedQuestion.order || 'N/A'}\n                      </Badge>\n                    </div>\n                \n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"prose max-w-none dark:prose-invert\">\n                      <div dangerouslySetInnerHTML={{ __html: normalizedQuestion.content }} />\n                    </div>\n                    \n                    <div className=\"mt-4 pt-4 border-t\">\n                      <h4 className=\"font-medium mb-2\">Student's Answer:</h4>\n                      \n                      {answer.question.type === 'MULTIPLE_CHOICE' && (\n                        <div>\n                          {answer.selectedOption ? (\n                            <div className=\"pl-4 border-l-2 border-muted\">\n                              {answer.question.options.find((o) => o.id === answer.selectedOption)?.content || 'Option not found'}\n                            </div>\n                          ) : (\n                            <div className=\"text-muted-foreground italic\">No answer selected</div>\n                          )}\n                        </div>\n                      )}\n                      \n                      {answer.question.type === 'TRUE_FALSE' && (\n                        <div>\n                          {answer.selectedOption ? (\n                            <div className=\"pl-4 border-l-2 border-muted\">\n                              {answer.question.options.find((o) => o.id === answer.selectedOption)?.content || 'Option not found'}\n                            </div>\n                          ) : (\n                            <div className=\"text-muted-foreground italic\">No answer selected</div>\n                          )}\n                        </div>\n                      )}\n                      \n                      {(answer.question.type === 'SHORT_ANSWER' || answer.question.type === 'ESSAY') && (\n                        <div>\n                          {answer.textAnswer ? (\n                            <div className=\"pl-4 border-l-2 border-muted whitespace-pre-wrap\">\n                              {answer.textAnswer}\n                            </div>\n                          ) : (\n                            <div className=\"text-muted-foreground italic\">No answer provided</div>\n                          )}\n                        </div>\n                      )}\n                      \n                      {answer.question.type === 'FILL_BLANK' && (\n                        <div>\n                          {answer.textAnswer ? (\n                            <div className=\"pl-4 border-l-2 border-muted\">\n                              {(() => {\n                                try {\n                                  const parsedAnswer = tryParseJson(answer.textAnswer);\n                                  return (\n                                    <div className=\"space-y-2\">\n                                      {Object.entries(parsedAnswer).map(([position, value]) => (\n                                        <div key={position}>\n                                          <span className=\"font-medium\">Blank {position}:</span> {String(value)}\n                                        </div>\n                                      ))}\n                                    </div>\n                                  );\n                                } catch (e) {\n                                  return <div className=\"text-destructive\">Error parsing answer: {answer.textAnswer}</div>;\n                                }\n                              })()}\n                            </div>\n                          ) : (\n                            <div className=\"text-muted-foreground italic\">No answer provided</div>\n                          )}\n                        </div>\n                      )}\n                      \n                      {answer.question.type === 'MATCHING' && (\n                        <div>\n                          {answer.textAnswer ? (\n                            <div className=\"pl-4 border-l-2 border-muted\">\n                              {(() => {\n                                try {\n                                  const parsedAnswer = tryParseJson(answer.textAnswer);\n                                  return (\n                                    <div className=\"space-y-2\">\n                                      {Object.entries(parsedAnswer).map(([leftId, rightId]) => {\n                                        const leftOption = answer.question.options.find((o) => o.id === leftId);\n                                        const rightOption = answer.question.options.find((o) => o.id === rightId);\n                                        return (\n                                          <div key={leftId}>\n                                            <span className=\"font-medium\">{leftOption?.content || 'Unknown'}</span>\n                                            {' → '}\n                                            {rightOption?.content || 'Unknown'}\n                                          </div>\n                                        );\n                                      })}\n                                    </div>\n                                  );\n                                } catch (e) {\n                                  return <div className=\"text-destructive\">Error parsing answer: {answer.textAnswer}</div>;\n                                }\n                              })()}\n                            </div>\n                          ) : (\n                            <div className=\"text-muted-foreground italic\">No answer provided</div>\n                          )}\n                        </div>\n                      )}\n                      \n                      {answer.question.type === 'CODE' && (\n                        <div>\n                          {answer.textAnswer ? (\n                            <div className=\"pl-4 border-l-2 border-muted\">\n                              <pre className=\"bg-muted p-4 rounded-md overflow-x-auto\">\n                                <code>{answer.textAnswer}</code>\n                              </pre>\n                            </div>\n                          ) : (\n                            <div className=\"text-muted-foreground italic\">No answer provided</div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <QuestionGrader \n                  answerId={answer.id} \n                  quizId={attempt.quiz.id} \n                  attemptId={attempt.id}\n                  questionType={answer.question.type as QuestionType}\n                  maxPoints={answer.question.points || 1}\n                />\n              </TabsContent>\n            );\n          })}\n        </Tabs>\n      )}\n    </div>\n  );\n}\n\nfunction formatTime(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = seconds % 60;\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m ${remainingSeconds}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${remainingSeconds}s`;\n  } else {\n    return `${remainingSeconds}s`;\n  }\n}\n\nfunction formatQuestionType(type: QuestionType): string {\n  return type.replace('_', ' ').toLowerCase().replace(/\\b\\w/g, c => c.toUpperCase());\n}\n\nfunction tryParseJson(text: string): any {\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return null;\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}
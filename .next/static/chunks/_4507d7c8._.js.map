{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,mKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,6FACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG,mKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/progress.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,6LAAC,uKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,uKAAA,CAAA,YAA2B;YAC1B,WAAU;YACV,OAAO;gBAAE,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;YAAC;;;;;;;;;;;;AAIhE,SAAS,WAAW,GAAG,uKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/student/quizzes/results/components/ResultSummary.tsx"],"sourcesContent":["import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Award, \n  Clock, \n  Calendar, \n  CheckCircle, \n  XCircle, \n  HelpCircle,\n  BookOpen\n} from \"lucide-react\";\nimport { format } from 'date-fns';\n\ninterface ResultSummaryProps {\n  quizTitle: string;\n  quizDescription?: string | null;\n  score: number | null;\n  passingScore: number | null;\n  completedAt: string | null;\n  timeSpent: number | null;\n  timeLimit?: number | null;\n  totalQuestions: number;\n  correctAnswers: number;\n  incorrectAnswers: number;\n  pendingGrading: number;\n  subject?: string | null;\n  totalPoints?: number;\n  earnedPoints?: number;\n}\n\nexport default function ResultSummary({\n  quizTitle,\n  quizDescription,\n  score,\n  passingScore,\n  completedAt,\n  timeSpent,\n  timeLimit,\n  totalQuestions,\n  correctAnswers,\n  incorrectAnswers,\n  pendingGrading,\n  subject,\n  totalPoints = totalQuestions, // Default each question is worth 1 point\n  earnedPoints\n}: ResultSummaryProps) {\n  // Format time spent\n  const formatTimeSpent = (seconds: number) => {\n    if (!seconds) return 'N/A';\n    \n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${remainingSeconds}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${remainingSeconds}s`;\n    } else {\n      return `${remainingSeconds}s`;\n    }\n  };\n  \n  // Determine if the quiz was passed\n  const isPassed = score !== null && passingScore !== null \n    ? score >= passingScore \n    : null;\n  \n  // Calculate percentage of questions answered correctly\n  const answeredQuestions = correctAnswers + incorrectAnswers + pendingGrading;\n  const answeredPercentage = totalQuestions > 0 \n    ? Math.round((answeredQuestions / totalQuestions) * 100) \n    : 0;\n  \n  // Calculate accuracy based on total questions\n  const gradedQuestions = correctAnswers + incorrectAnswers;\n  const accuracy = totalQuestions > 0 \n    ? Math.round((correctAnswers / totalQuestions) * 100) \n    : 0;\n  \n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold mb-2\">{quizTitle}</h1>\n        {quizDescription && <p className=\"text-muted-foreground\">{quizDescription}</p>}\n        {subject && (\n          <Badge variant=\"outline\" className=\"mt-2\">\n            <BookOpen className=\"h-3 w-3 mr-1\" />\n            {subject}\n          </Badge>\n        )}\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {/* Score Card */}\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Award className=\"h-4 w-4 mr-2 text-primary\" />\n              Final Score\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold\">\n                  {score !== null ? `${score}%` : 'Pending'}\n                </div>\n                {earnedPoints !== undefined && totalPoints !== undefined && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    {earnedPoints}/{totalPoints} points\n                  </p>\n                )}\n              </div>\n              {isPassed !== null && (\n                <Badge variant={isPassed ? \"success\" : \"destructive\"}>\n                  {isPassed ? \"Passed\" : \"Failed\"}\n                </Badge>\n              )}\n            </div>\n            {passingScore !== null && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Passing score: {passingScore}%\n              </p>\n            )}\n            {answeredQuestions < totalQuestions && (\n              <p className=\"text-xs text-amber-500 font-medium mt-1\">\n                Score based on all {totalQuestions} questions, including unattempted ones.\n              </p>\n            )}\n          </CardContent>\n        </Card>\n        \n        {/* Time Card */}\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Clock className=\"h-4 w-4 mr-2 text-primary\" />\n              Time Spent\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {timeSpent ? formatTimeSpent(timeSpent) : 'N/A'}\n            </div>\n            {timeLimit && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Time limit: {timeLimit} minutes\n              </p>\n            )}\n          </CardContent>\n        </Card>\n        \n        {/* Completion Card */}\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <Calendar className=\"h-4 w-4 mr-2 text-primary\" />\n              Completed\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {completedAt ? format(new Date(completedAt), 'MMM d, yyyy') : 'Incomplete'}\n            </div>\n            {completedAt && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {format(new Date(completedAt), 'h:mm a')}\n              </p>\n            )}\n          </CardContent>\n        </Card>\n        \n        {/* Accuracy Card */}\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center\">\n              <CheckCircle className=\"h-4 w-4 mr-2 text-primary\" />\n              Accuracy\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {accuracy}%\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {correctAnswers} correct of {totalQuestions} total\n            </p>\n            {gradedQuestions < totalQuestions && (\n              <p className=\"text-xs text-amber-500 mt-1\">\n                {totalQuestions - gradedQuestions} questions not attempted\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Progress Bars */}\n      <Card>\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-base\">Question Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Questions Answered */}\n          <div>\n            <div className=\"flex justify-between mb-1\">\n              <span className=\"text-sm font-medium\">Questions Answered</span>\n              <span className=\"text-sm\">{answeredQuestions}/{totalQuestions} ({answeredPercentage}%)</span>\n            </div>\n            <Progress value={answeredPercentage} className=\"h-2\" />\n          </div>\n          \n          {/* Question Status */}\n          <div className=\"grid grid-cols-3 gap-2 pt-2\">\n            <div className=\"flex flex-col items-center p-2 rounded-md bg-muted/50\">\n              <div className=\"flex items-center mb-1\">\n                <CheckCircle className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-sm font-medium\">Correct</span>\n              </div>\n              <span className=\"text-xl font-bold\">{correctAnswers}</span>\n            </div>\n            \n            <div className=\"flex flex-col items-center p-2 rounded-md bg-muted/50\">\n              <div className=\"flex items-center mb-1\">\n                <XCircle className=\"h-4 w-4 text-red-500 mr-1\" />\n                <span className=\"text-sm font-medium\">Incorrect</span>\n              </div>\n              <span className=\"text-xl font-bold\">{incorrectAnswers}</span>\n            </div>\n            \n            <div className=\"flex flex-col items-center p-2 rounded-md bg-muted/50\">\n              <div className=\"flex items-center mb-1\">\n                <HelpCircle className=\"h-4 w-4 text-amber-500 mr-1\" />\n                <span className=\"text-sm font-medium\">Pending</span>\n              </div>\n              <span className=\"text-xl font-bold\">{pendingGrading}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 749, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/student/quizzes/results/%5Bid%5D/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/use-auth';\nimport { format } from 'date-fns';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter, CardDescription } from '@/components/ui/card';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { toast } from '@/components/ui/use-toast';\nimport { \n  Clock, \n  CalendarDays, \n  CheckCircle, \n  XCircle, \n  HelpCircle, \n  BookOpen, \n  BarChart, \n  Award,\n  ArrowLeft,\n  RotateCcw\n} from 'lucide-react';\nimport { QuestionType } from '@prisma/client';\nimport { cn } from '@/lib/utils';\nimport ResultSummary from \"../components/ResultSummary\";\n\ninterface QuizResultPageProps {\n  params: {\n    id: string;\n  };\n}\n\ninterface QuestionOption {\n  id: string;\n  content: string;\n  isCorrect?: boolean;\n  order?: number;\n  group?: string | null;\n  matchId?: string | null;\n  position?: number | null;\n}\n\ninterface Question {\n  id: string;\n  type: string;\n  content: string;\n  explanation?: string;\n  options: QuestionOption[];\n  answer?: Answer;\n  points?: number;\n  metadata?: any;\n}\n\ninterface Answer {\n  id: string;\n  isCorrect: boolean | null;\n  selectedOptionId?: string;\n  selectedOptions?: string[];\n  textAnswer?: string;\n  jsonData?: string;\n  feedback?: string;\n  score?: number | null;\n}\n\ninterface Statistics {\n  totalQuestions: number;\n  correctAnswers: number;\n  incorrectAnswers: number;\n  pendingGrading: number;\n  accuracy: number;\n  }\n  \ninterface QuizAttempt {\n  id: string;\n  score: number | null;\n  timeSpent: number | null;\n  completedAt: string | null;\n  isPassing: boolean | null;\n}\n\ninterface Quiz {\n  id: string;\n  title: string;\n  description?: string;\n  passingScore: number | null;\n  timeLimit?: number;\n}\n\ninterface QuizResult {\n  attempt: QuizAttempt;\n  quiz: Quiz;\n  user: any;\n  questions: Question[];\n  statistics: Statistics;\n}\n\nexport default function QuizResultPage({ params }: QuizResultPageProps) {\n  const { id } = params;\n  const router = useRouter();\n  const { isStudent, isLoading: authLoading } = useAuth();\n  \n  const [result, setResult] = useState<QuizResult | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [attemptsInfo, setAttemptsInfo] = useState<{\n    currentAttempts: number;\n    maxAttempts: number | null;\n  }>({ currentAttempts: 0, maxAttempts: null });\n  const [isStartingNewAttempt, setIsStartingNewAttempt] = useState(false);\n  \n  useEffect(() => {\n    const fetchQuizResult = async () => {\n      try {\n        const response = await fetch(`/api/users/me/quiz-results/${id}`);\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch quiz result');\n        }\n        \n        const data = await response.json();\n        setResult(data.data);\n        \n        // Fetch quiz details to get attempt information\n        if (data.data?.quiz?.id) {\n          const quizDetailResponse = await fetch(`/api/users/me/quizzes/${data.data.quiz.id}`);\n          if (quizDetailResponse.ok) {\n            const quizData = await quizDetailResponse.json();\n            if (quizData.success && quizData.data.quiz) {\n              setAttemptsInfo({\n                currentAttempts: quizData.data.quiz.currentAttempts || 0,\n                maxAttempts: quizData.data.quiz.attemptLimit || null\n              });\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching quiz result:', error);\n        setError(error instanceof Error ? error.message : 'An error occurred');\n        \n        toast({\n          title: 'Error',\n          description: 'Failed to load quiz result. Please try again.',\n          variant: 'destructive',\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    if (!authLoading && isStudent) {\n      fetchQuizResult();\n    }\n  }, [id, authLoading, isStudent]);\n  \n  useEffect(() => {\n    // Redirect non-students away\n    if (!authLoading && !isStudent) {\n      router.push('/dashboard');\n    }\n  }, [authLoading, isStudent, router]);\n  \n  // Handle retake quiz\n  const handleRetakeQuiz = async () => {\n    if (!result?.quiz?.id) return;\n    \n    try {\n      setIsStartingNewAttempt(true);\n      \n      // Call API to start a new attempt with forceNew=true\n      const response = await fetch('/api/attempts/start', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          quizId: result.quiz.id,\n          forceNew: true\n        })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to start new attempt');\n      }\n\n      if (data.success) {\n        router.push(`/dashboard/student/quizzes/${result.quiz.id}/attempt?attemptId=${data.data.attemptId}`);\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error) {\n      console.error('Error starting new attempt:', error);\n      toast({\n        title: 'Error',\n        description: (error as Error).message,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsStartingNewAttempt(false);\n    }\n  };\n  \n  if (authLoading) {\n    return <LoadingSkeleton />;\n  }\n  \n  if (loading) {\n    return <LoadingSkeleton />;\n  }\n  \n  if (error || !result) {\n    return (\n      <div className=\"container py-8\">\n        <Card className=\"max-w-2xl mx-auto\">\n          <CardContent className=\"pt-6 pb-8 text-center\">\n            <div className=\"mb-4 text-destructive\">\n              <XCircle className=\"h-12 w-12 mx-auto\" />\n            </div>\n            <h2 className=\"text-lg font-semibold mb-2\">Failed to Load Quiz Result</h2>\n            <p className=\"text-muted-foreground mb-6\">{error || 'The requested quiz result could not be loaded.'}</p>\n            <Button onClick={() => router.push('/dashboard/student/results')}>\n              Return to Results\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n  \n  const { attempt, quiz, questions, statistics } = result;\n  \n  // Calculate statistics for summary\n  const correctAnswers = statistics.correctAnswers;\n  const incorrectAnswers = statistics.incorrectAnswers;\n  const pendingGrading = statistics.pendingGrading;\n  \n  // Calculate total points and earned points\n  const totalPoints = questions.reduce((sum, q) => sum + (q.points || 1), 0);\n  const earnedPoints = questions.reduce((sum, q) => {\n    // Add the score from the answer if available\n    if (q.answer && q.answer.score !== undefined && q.answer.score !== null) {\n      return sum + q.answer.score;\n    }\n    return sum;\n  }, 0);\n  \n  // Check if user can retake the quiz\n  const canRetake = attemptsInfo.maxAttempts === null || attemptsInfo.currentAttempts < attemptsInfo.maxAttempts;\n  \n  return (\n    <div className=\"container py-8\">\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => router.back()} \n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Results\n        </Button>\n          \n          {canRetake && (\n            <Button \n              onClick={handleRetakeQuiz}\n              disabled={isStartingNewAttempt}\n              className=\"gap-2\"\n            >\n              {isStartingNewAttempt ? (\n                <>\n                  <span className=\"h-4 w-4 border-2 border-current border-t-transparent rounded-full animate-spin\"></span>\n                  <span>Starting...</span>\n                </>\n              ) : (\n                <>\n                  <RotateCcw className=\"h-4 w-4\" />\n                  <span>Retake Quiz</span>\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n        \n        {/* Result Summary */}\n        <ResultSummary \n          quizTitle={quiz.title}\n          quizDescription={quiz.description}\n          score={attempt.score}\n          passingScore={quiz.passingScore}\n          completedAt={attempt.completedAt}\n          timeSpent={attempt.timeSpent}\n          timeLimit={quiz.timeLimit}\n          totalQuestions={statistics.totalQuestions}\n          correctAnswers={correctAnswers}\n          incorrectAnswers={incorrectAnswers}\n          pendingGrading={pendingGrading}\n          totalPoints={totalPoints}\n          earnedPoints={earnedPoints}\n        />\n        \n        {canRetake && (\n          <Card className=\"mt-4\">\n            <CardContent className=\"flex justify-between items-center p-4\">\n              <div>\n                <h3 className=\"text-base font-medium\">Attempts remaining: {attemptsInfo.maxAttempts === null ? \"Unlimited\" : `${attemptsInfo.maxAttempts - attemptsInfo.currentAttempts} of ${attemptsInfo.maxAttempts}`}</h3>\n                <p className=\"text-sm text-muted-foreground\">You can retake this quiz to improve your score</p>\n              </div>\n              <Button \n                onClick={handleRetakeQuiz}\n                disabled={isStartingNewAttempt}\n                className=\"gap-2\"\n              >\n                {isStartingNewAttempt ? (\n                  <>\n                    <span className=\"h-4 w-4 border-2 border-current border-t-transparent rounded-full animate-spin\"></span>\n                    <span>Starting...</span>\n                  </>\n                ) : (\n                  <>\n                    <RotateCcw className=\"h-4 w-4\" />\n                    <span>Retake Quiz</span>\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n      \n      {/* Questions Section */}\n      <div className=\"mt-8\">\n        <h2 className=\"text-xl font-bold mb-4\">Question Review</h2>\n        <Tabs defaultValue=\"all\" className=\"mb-6\">\n          <TabsList>\n            <TabsTrigger value=\"all\">All Questions ({questions.length})</TabsTrigger>\n            <TabsTrigger value=\"correct\">Correct ({correctAnswers})</TabsTrigger>\n            <TabsTrigger value=\"incorrect\">Incorrect ({incorrectAnswers})</TabsTrigger>\n            {pendingGrading > 0 && (\n              <TabsTrigger value=\"pending\">Pending ({pendingGrading})</TabsTrigger>\n            )}\n          </TabsList>\n          \n          <TabsContent value=\"all\" className=\"mt-4\">\n            <QuestionList questions={questions} />\n          </TabsContent>\n          \n          <TabsContent value=\"correct\" className=\"mt-4\">\n            <QuestionList \n              questions={questions.filter(q => \n                q.answer?.isCorrect === true\n              )} \n            />\n          </TabsContent>\n          \n          <TabsContent value=\"incorrect\" className=\"mt-4\">\n            <QuestionList \n              questions={questions.filter(q => \n                q.answer?.isCorrect === false\n              )} \n            />\n          </TabsContent>\n          \n          {pendingGrading > 0 && (\n            <TabsContent value=\"pending\" className=\"mt-4\">\n              <QuestionList \n                questions={questions.filter(q => \n                  q.answer && q.answer.isCorrect === null\n                )} \n              />\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\nfunction QuestionList({ questions }: { questions: Question[] }) {\n  if (questions.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <HelpCircle className=\"h-12 w-12 mx-auto text-muted-foreground mb-2\" />\n        <h3 className=\"text-lg font-medium\">No questions in this category</h3>\n        <p className=\"text-muted-foreground\">Select a different filter to see other questions.</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"space-y-4\">\n      {questions.map((question, index) => (\n        <QuestionCard key={question.id} question={question} index={index} />\n      ))}\n    </div>\n  );\n}\n\nfunction QuestionCard({ question, index }: { question: Question, index: number }) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  const formatQuestionType = (type: string) => {\n    const types: Record<string, string> = {\n      MULTIPLE_CHOICE: \"Multiple Choice\",\n      TRUE_FALSE: \"True/False\",\n      SHORT_ANSWER: \"Short Answer\",\n      ESSAY: \"Essay\",\n      MATCHING: \"Matching\",\n      FILL_BLANK: \"Fill in the Blank\",\n      CODE: \"Code\"\n    };\n    \n    return types[type] || type;\n  };\n  \n  // Determine question status\n  const getQuestionStatus = () => {\n    if (!question.answer) return { status: 'unanswered', icon: <HelpCircle className=\"h-5 w-5 text-gray-400\" /> };\n    \n    if (question.answer.isCorrect === true) {\n      return { \n        status: 'correct', \n        icon: <CheckCircle className=\"h-5 w-5 text-green-500\" />,\n        label: 'Correct'\n      };\n    } else if (question.answer.isCorrect === false) {\n      return { \n        status: 'incorrect', \n        icon: <XCircle className=\"h-5 w-5 text-red-500\" />,\n        label: 'Incorrect'\n      };\n    } else {\n      return { \n        status: 'pending', \n        icon: <HelpCircle className=\"h-5 w-5 text-amber-500\" />,\n        label: 'Pending Grading'\n      };\n    }\n  };\n  \n  const questionStatus = getQuestionStatus();\n  \n  // Get question points and current score\n  const questionPoints = question.points || 1;\n  const currentScore = question.answer?.score ?? 0;\n  \n  return (\n    <Card className={cn(\n      \"transition-all duration-200\",\n      isExpanded ? \"border-primary\" : \"\",\n      questionStatus.status === 'correct' ? \"border-green-200 dark:border-green-800\" : \"\",\n      questionStatus.status === 'incorrect' ? \"border-red-200 dark:border-red-800\" : \"\"\n    )}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex justify-between items-start\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <span className=\"text-sm font-medium text-muted-foreground\">Question {index + 1}</span>\n              <Badge variant=\"outline\">{formatQuestionType(question.type)}</Badge>\n              {questionStatus.status !== 'unanswered' && (\n                <Badge \n                  variant={\n                    questionStatus.status === 'correct' ? 'success' : \n                    questionStatus.status === 'incorrect' ? 'destructive' : \n                    'outline'\n                  }\n                  className=\"ml-auto\"\n                >\n                  {questionStatus.label}\n                </Badge>\n              )}\n              <span className=\"ml-auto text-sm font-medium\">\n                {questionStatus.status !== 'unanswered' && (\n                  <span className={cn(\n                    \"px-2 py-0.5 rounded\",\n                    questionStatus.status === 'correct' ? \"text-green-700 dark:text-green-300\" :\n                    questionStatus.status === 'incorrect' ? \"text-red-700 dark:text-red-300\" :\n                    \"text-gray-700 dark:text-gray-300\"\n                  )}>\n                    Points: {currentScore}/{questionPoints}\n                  </span>\n                )}\n              </span>\n            </div>\n            <div className=\"font-medium\" dangerouslySetInnerHTML={{ __html: question.content }} />\n          </div>\n          <div className=\"ml-4 flex-shrink-0\">\n            {questionStatus.icon}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pb-3\">\n        {isExpanded ? (\n          question.answer ? (\n            <AnswerDisplay question={question} answer={question.answer} />\n          ) : (\n            <div className=\"text-muted-foreground text-sm\">No answer provided</div>\n          )\n        ) : (\n          <Button \n            variant=\"ghost\" \n            className=\"w-full justify-center\" \n            onClick={() => setIsExpanded(true)}\n          >\n            Show Answer\n          </Button>\n        )}\n      </CardContent>\n      \n      {isExpanded && (\n        <CardFooter className=\"pt-0\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"ml-auto\" \n            onClick={() => setIsExpanded(false)}\n          >\n            Hide Answer\n          </Button>\n        </CardFooter>\n      )}\n    </Card>\n  );\n}\n\nfunction AnswerDisplay({ question, answer }: { question: Question, answer: Answer }) {\n  const [showExplanation, setShowExplanation] = useState(false);\n  \n  switch (question.type) {\n    case QuestionType.MULTIPLE_CHOICE:\n    case QuestionType.TRUE_FALSE:\n      return (\n        <div className=\"mt-3\">\n          <div className=\"space-y-2\">\n            {question.options.map((option) => {\n              // Handle both single and multiple selection formats\n              const isSelected = answer.selectedOptionId === option.id || \n                (Array.isArray(answer.selectedOptions) && answer.selectedOptions.includes(option.id));\n              const isCorrect = option.isCorrect;\n              \n              // Determine the style based on correctness and selection\n              let optionClassName = \"flex items-center p-3 rounded-md border\";\n              let iconComponent = null;\n              \n              if (isSelected && isCorrect) {\n                // Selected and correct\n                optionClassName += \" border-green-500 bg-green-50 dark:bg-green-950/20\";\n                iconComponent = <CheckCircle className=\"h-5 w-5 text-green-500 flex-shrink-0\" />;\n              } else if (isSelected && !isCorrect) {\n                // Selected but incorrect\n                optionClassName += \" border-red-500 bg-red-50 dark:bg-red-950/20\";\n                iconComponent = <XCircle className=\"h-5 w-5 text-red-500 flex-shrink-0\" />;\n              } else if (!isSelected && isCorrect) {\n                // Not selected but correct (show as hint)\n                optionClassName += \" border-amber-500 bg-amber-50 dark:bg-amber-950/10\";\n                iconComponent = <CheckCircle className=\"h-5 w-5 text-amber-500 flex-shrink-0\" />;\n              } else {\n                // Not selected and incorrect\n                optionClassName += \" border-gray-200 dark:border-gray-700\";\n              }\n              \n              return (\n                <div key={option.id} className={optionClassName}>\n                  <div className=\"flex-1 ml-3\">\n                    <div dangerouslySetInnerHTML={{ __html: option.content }} />\n                  </div>\n                  <div className=\"ml-2\">\n                    {iconComponent}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          \n          {question.explanation && (\n            <div className=\"mt-4\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setShowExplanation(!showExplanation)}\n              >\n                {showExplanation ? \"Hide Explanation\" : \"Show Explanation\"}\n              </Button>\n              \n              {showExplanation && (\n                <div className=\"mt-2 p-3 bg-muted rounded-md\">\n                  <h4 className=\"font-medium mb-1\">Explanation:</h4>\n                  <div dangerouslySetInnerHTML={{ __html: question.explanation }} />\n                </div>\n              )}\n            </div>\n          )}\n          \n          {answer.feedback && (\n            <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-md\">\n              <h4 className=\"font-medium text-blue-700 dark:text-blue-300 mb-1\">Teacher Feedback:</h4>\n              <p>{answer.feedback}</p>\n            </div>\n          )}\n        </div>\n      );\n      \n    case QuestionType.SHORT_ANSWER:\n      const correctShortAnswers = question.options.filter(opt => opt.isCorrect);\n      return (\n        <div className=\"mt-3 space-y-4\">\n          <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-md border border-gray-200 dark:border-gray-700\">\n            <h4 className=\"font-medium mb-1\">Your Answer:</h4>\n            <div className=\"whitespace-pre-wrap\">{answer.textAnswer || \"No answer provided\"}</div>\n          </div>\n          \n          {/* Display Correct Answers for SHORT_ANSWER */}\n          {correctShortAnswers.length > 0 && (\n            <div className=\"p-3 bg-green-50 dark:bg-green-950/20 rounded-md border border-green-200 dark:border-green-800\">\n              <h4 className=\"font-medium text-green-700 dark:text-green-300 mb-1\">\n                {correctShortAnswers.length > 1 ? \"Correct Answers:\" : \"Correct Answer:\"}\n              </h4>\n              <ul className=\"list-disc list-inside space-y-1\">\n                {correctShortAnswers.map(opt => (\n                  <li key={opt.id} dangerouslySetInnerHTML={{ __html: opt.content }} />\n                ))}\n              </ul>\n            </div>\n          )}\n          \n          {question.explanation && (\n            <div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setShowExplanation(!showExplanation)}\n              >\n                {showExplanation ? \"Hide Explanation\" : \"Show Explanation\"}\n              </Button>\n              \n              {showExplanation && (\n                <div className=\"mt-2 p-3 bg-muted rounded-md\">\n                  <h4 className=\"font-medium mb-1\">Explanation:</h4>\n                  <div dangerouslySetInnerHTML={{ __html: question.explanation }} />\n                </div>\n              )}\n            </div>\n          )}\n          \n          {answer.feedback && (\n            <div className=\"p-3 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-md\">\n              <h4 className=\"font-medium text-blue-700 dark:text-blue-300 mb-1\">Teacher Feedback:</h4>\n              <p>{answer.feedback}</p>\n            </div>\n          )}\n          \n          <div className=\"flex items-center\">\n            <Badge variant={answer.isCorrect === true ? \"success\" : answer.isCorrect === false ? \"destructive\" : \"outline\"}>\n              {answer.isCorrect === true ? \"Correct\" : answer.isCorrect === false ? \"Incorrect\" : \"Pending Grading\"}\n            </Badge>\n            {answer.isCorrect !== null && (\n              <span className=\"ml-2 text-sm font-medium\">\n                Score: {answer.score !== undefined ? answer.score : \"N/A\"}\n              </span>\n            )}\n          </div>\n        </div>\n      );\n      \n    case QuestionType.ESSAY:\n      const isRichText = question.metadata && typeof question.metadata === 'object' && \n        question.metadata.richText === true;\n      \n      return (\n        <div className=\"mt-3 space-y-4\">\n          <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-md border border-gray-200 dark:border-gray-700\">\n            <h4 className=\"font-medium mb-2\">Your Essay:</h4>\n            {answer.textAnswer ? (\n              <div className={isRichText ? \"prose prose-sm dark:prose-invert max-w-none\" : \"whitespace-pre-wrap\"}>\n                {isRichText ? (\n                  <div dangerouslySetInnerHTML={{ __html: answer.textAnswer }} />\n                ) : (\n                  answer.textAnswer\n                )}\n              </div>\n            ) : (\n              <p className=\"text-muted-foreground italic\">No answer provided</p>\n            )}\n          </div>\n          \n          {answer.feedback && (\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-md\">\n              <h4 className=\"font-medium text-blue-700 dark:text-blue-300 mb-1\">Teacher Feedback:</h4>\n              <p>{answer.feedback}</p>\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between\">\n            <Badge variant={\n              answer.isCorrect === null ? \"outline\" :\n              answer.score && answer.score > (question.points || 10) / 2 ? \"success\" : \"destructive\"\n            }>\n              {answer.isCorrect === null ? \"Pending Grading\" : \n                answer.score && answer.score > (question.points || 10) / 2 ? \"Passed\" : \"Needs Improvement\"}\n            </Badge>\n            \n            {answer.score !== null && answer.score !== undefined && (\n              <span className=\"text-sm font-medium\">\n                Score: {answer.score} / {question.points || 10}\n              </span>\n            )}\n          </div>\n          \n          {question.explanation && (\n            <div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setShowExplanation(!showExplanation)}\n              >\n                {showExplanation ? \"Hide Explanation\" : \"Show Explanation\"}\n              </Button>\n              \n              {showExplanation && (\n                <div className=\"mt-2 p-3 bg-muted rounded-md\">\n                  <h4 className=\"font-medium mb-1\">Explanation:</h4>\n                  <div dangerouslySetInnerHTML={{ __html: question.explanation }} />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      );\n      \n    case QuestionType.MATCHING: {\n      let userAnswers: Record<string, string> = {};\n      let matchingError = false;\n      \n      // Xử lý dữ liệu JSON từ câu trả lời, cần xử lý chuỗi JSON\n      if (question.answer?.jsonData && typeof question.answer.jsonData === 'string') {\n        try {\n          const parsedData = JSON.parse(question.answer.jsonData);\n          if (parsedData && typeof parsedData === 'object') {\n            userAnswers = Object.entries(parsedData).reduce((acc, [key, value]) => {\n              if (typeof value === 'string') {\n                acc[key] = value;\n              }\n              return acc;\n            }, {} as Record<string, string>);\n          }\n        } catch (e) {\n          console.error('Error parsing matching answer JSON', e);\n          matchingError = true;\n        }\n      }\n      \n      // Phân loại options theo premise và response\n      const premiseOptions = question.options.filter(opt => \n        opt.group === 'premise' || opt.group === 'left');\n      const responseOptions = question.options.filter(opt => \n        opt.group === 'response' || opt.group === 'right');\n        \n      if (matchingError) {\n        return (\n          <div className=\"mt-3 text-red-500\">\n            Lỗi hiển thị câu trả lời. Dữ liệu không hợp lệ.\n          </div>\n        );\n      }\n      \n      // Tiếp tục với phần hiển thị câu trả lời\n      return (\n        <div className=\"mt-3 space-y-4\">\n          <div className=\"space-y-2\">\n            {premiseOptions.map(leftOption => {\n              const selectedRightId = userAnswers[leftOption.id];\n              const selectedRight = responseOptions.find(r => r.id === selectedRightId);\n              const correctRightOption = responseOptions.find(r => r.id === leftOption.matchId);\n              const isCorrect = selectedRightId === leftOption.matchId;\n              \n              return (\n                <div \n                  key={leftOption.id} \n                  className={`p-3 rounded-md border ${\n                    isCorrect \n                      ? \"border-green-500 bg-green-50 dark:bg-green-950/20\" \n                      : \"border-red-500 bg-red-50 dark:bg-red-950/20\"\n                  }`}\n                >\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"font-medium\" dangerouslySetInnerHTML={{ __html: leftOption.content }} />\n                    <div className=\"mx-2\">→</div>\n                    <div className=\"text-right\">\n                      {selectedRight ? (\n                        <span dangerouslySetInnerHTML={{ __html: selectedRight.content }} />\n                      ) : (\n                        <span className=\"text-gray-400\">Not matched</span>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {!isCorrect && correctRightOption && (\n                    <div className=\"mt-2 text-sm text-green-600 dark:text-green-400\">\n                      <span className=\"font-medium\">Correct match:</span>{\" \"}\n                      <span dangerouslySetInnerHTML={{ __html: correctRightOption.content }} />\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          \n          {question.explanation && (\n            <div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setShowExplanation(!showExplanation)}\n              >\n                {showExplanation ? \"Hide Explanation\" : \"Show Explanation\"}\n              </Button>\n              \n              {showExplanation && (\n                <div className=\"mt-2 p-3 bg-muted rounded-md\">\n                  <h4 className=\"font-medium mb-1\">Explanation:</h4>\n                  <div dangerouslySetInnerHTML={{ __html: question.explanation }} />\n                </div>\n              )}\n            </div>\n          )}\n          \n          {answer.feedback && (\n            <div className=\"p-3 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-md\">\n              <h4 className=\"font-medium text-blue-700 dark:text-blue-300 mb-1\">Teacher Feedback:</h4>\n              <p>{answer.feedback}</p>\n            </div>\n          )}\n        </div>\n      );\n    }\n    \n    // Add more question types as needed\n    \n    default:\n      return (\n        <div className=\"p-4 border border-amber-200 bg-amber-50 dark:border-amber-800 dark:bg-amber-950/20 rounded-md\">\n          <p>This question type ({question.type}) is not supported for display yet.</p>\n        </div>\n      );\n  }\n}\n\nfunction LoadingSkeleton() {\n      return (\n    <div className=\"container py-8 space-y-6\">\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-8 w-1/3\" />\n        <Skeleton className=\"h-4 w-1/4\" />\n        </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Skeleton className=\"h-32\" />\n        <Skeleton className=\"h-32\" />\n        <Skeleton className=\"h-32\" />\n        </div>\n      \n      <Skeleton className=\"h-64\" />\n      \n      <div className=\"space-y-4\">\n        <Skeleton className=\"h-8 w-40\" />\n        <Skeleton className=\"h-64\" />\n        <Skeleton className=\"h-64\" />\n      </div>\n        </div>\n      );\n} "],"names":[],"mappings":"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","debugId":null}}]
}
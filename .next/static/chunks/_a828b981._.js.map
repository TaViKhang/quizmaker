{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,mKAAA,CAAA,OAAkB;AAE/B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,OAAkB;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,6FACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG,mKAAA,CAAA,OAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,mKAAA,CAAA,UAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,mKAAA,CAAA,UAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  icon?: React.ReactNode\n  error?: boolean\n  hint?: string\n  endIcon?: React.ReactNode\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, icon, error, hint, endIcon, disabled, ...props }, ref) => {\n    return (\n      <div className=\"relative flex flex-col gap-1 w-full\">\n        {/* Input wrapper for icon positioning */}\n        <div className=\"relative\">\n          {/* Start icon if provided */}\n          {icon && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground flex items-center pointer-events-none\">\n              {icon}\n            </div>\n          )}\n          \n      <input\n        type={type}\n        className={cn(\n              \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm placeholder:text-muted-foreground file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200 shadow-sm\",\n              icon && \"pl-10\",  // Add left padding if icon is present\n              endIcon && \"pr-10\", // Add right padding if end icon is present\n              error && \"border-destructive focus-visible:ring-destructive/50\",\n          className\n        )}\n            disabled={disabled}\n        ref={ref}\n            aria-invalid={error ? \"true\" : undefined}\n        {...props}\n      />\n          \n          {/* End icon if provided */}\n          {endIcon && (\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground flex items-center\">\n              {endIcon}\n            </div>\n          )}\n        </div>\n        \n        {/* Hint or error message */}\n        {hint && (\n          <p \n            className={cn(\n              \"text-xs\",\n              error \n                ? \"text-destructive\" \n                : \"text-muted-foreground\"\n            )}\n            id={`${props.id || ''}-hint`}\n          >\n            {hint}\n          </p>\n        )}\n      </div>\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAUA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE;IACpE,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;oBAEZ,sBACC,6LAAC;wBAAI,WAAU;kCACZ;;;;;;kCAIT,6LAAC;wBACC,MAAM;wBACN,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACN,+WACA,QAAQ,SACR,WAAW,SACX,SAAS,wDACb;wBAEE,UAAU;wBACd,KAAK;wBACD,gBAAc,QAAQ,SAAS;wBAClC,GAAG,KAAK;;;;;;oBAIN,yBACC,6LAAC;wBAAI,WAAU;kCACZ;;;;;;;;;;;;YAMN,sBACC,6LAAC;gBACC,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,WACA,QACI,qBACA;gBAEN,IAAI,GAAG,MAAM,EAAE,IAAI,GAAG,KAAK,CAAC;0BAE3B;;;;;;;;;;;;AAKX;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,6QACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AACA,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/switch.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,qKAAA,CAAA,OAAqB;QACpB,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,+XACA;QAED,GAAG,KAAK;QACT,KAAK;kBAEL,cAAA,6LAAC,qKAAA,CAAA,QAAsB;YACrB,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV;;;;;;;;;;;;AAKR,OAAO,WAAW,GAAG,qKAAA,CAAA,OAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\nimport { AlertCircle, CheckCircle } from \"lucide-react\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        ref={ref}\n        className={cn(\"space-y-2 mb-4\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(\n        \"text-sm font-medium mb-1.5 block\",\n        error && \"text-destructive\",\n        className\n      )}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <div\n      className=\"flex items-center mt-1.5 gap-1.5 text-destructive\"\n    >\n      <AlertCircle className=\"h-3.5 w-3.5\" />\n    <p\n      ref={ref}\n      id={formMessageId}\n        className={cn(\"text-xs font-medium\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n    </div>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nconst FormSuccess = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  if (!children) {\n    return null\n  }\n\n  return (\n    <div\n      className=\"flex items-center mt-1.5 gap-1.5 text-success\"\n    >\n      <CheckCircle className=\"h-3.5 w-3.5\" />\n      <p\n        ref={ref}\n        className={cn(\"text-xs font-medium\", className)}\n        {...props}\n      >\n        {children}\n      </p>\n    </div>\n  )\n})\nFormSuccess.displayName = \"FormSuccess\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormSuccess,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 544, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => {\n  // Create a stable reference for the focus event handler to avoid recreation on each render\n  const handleCloseAutoFocus = React.useCallback((event: Event) => {\n    // Prevent default focus behavior to avoid recursion in focus scopes\n    event.preventDefault();\n    \n    // Stop propagation to prevent other FocusScope handlers from executing\n    event.stopPropagation();\n  }, []);\n\n  return (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n        onCloseAutoFocus={handleCloseAutoFocus}\n        avoidCollisions={true}\n        collisionPadding={8}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n  );\n})\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    onFocus={(e) => {\n      // Prevent focus events from triggering too many rerenders\n      e.stopPropagation();\n    }}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 779, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => {\n  // Xử lý focus khi mở AlertDialog\n  const handleOpenAutoFocus = React.useCallback((event: Event) => {\n    // Ngăn chặn hành vi focus mặc định\n    event.preventDefault();\n    \n    // Có thể focus vào title hoặc nút đóng trong AlertDialog\n    const dialogTitle = document.querySelector('[role=\"alertdialog\"] h2');\n    if (dialogTitle && 'focus' in dialogTitle) {\n      setTimeout(() => {\n        (dialogTitle as HTMLElement).focus();\n      }, 0);\n    }\n  }, []);\n\n  // Xử lý focus khi đóng AlertDialog\n  const handleCloseAutoFocus = React.useCallback((event: Event) => {\n    // Ngăn chặn hành vi focus trả về mặc định\n    event.preventDefault();\n  }, []);\n  \n  return (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      onOpenAutoFocus={handleOpenAutoFocus}\n      onCloseAutoFocus={handleCloseAutoFocus}\n      {...props}\n    />\n  </AlertDialogPortal>\n  );\n})\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 960, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/QuestionsList.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { QuestionType } from \"@prisma/client\";\nimport { Edit, Trash, GripVertical } from \"lucide-react\";\n\n// Helper function to get question type label\nconst getQuestionTypeLabel = (type: QuestionType) => {\n  const labels: Record<QuestionType, string> = {\n    MULTIPLE_CHOICE: \"Multiple Choice\",\n    ESSAY: \"Essay\",\n    TRUE_FALSE: \"True/False\",\n    SHORT_ANSWER: \"Short Answer\",\n    MATCHING: \"Matching\",\n    FILL_BLANK: \"Fill in the Blank\",\n    CODE: \"Code\",\n    FILE_UPLOAD: \"File Upload\",\n  };\n  return labels[type] || type;\n};\n\n// Helper function to get badge variant based on question type\nconst getQuestionTypeBadgeVariant = (type: QuestionType): \"default\" | \"outline\" | \"secondary\" | \"destructive\" => {\n  const variants: Record<QuestionType, \"default\" | \"outline\" | \"secondary\" | \"destructive\"> = {\n    MULTIPLE_CHOICE: \"default\",\n    ESSAY: \"outline\",\n    TRUE_FALSE: \"secondary\",\n    SHORT_ANSWER: \"outline\",\n    MATCHING: \"default\",\n    FILL_BLANK: \"secondary\",\n    CODE: \"outline\",\n    FILE_UPLOAD: \"destructive\",\n  };\n  return variants[type] || \"default\";\n};\n\ninterface Question {\n  id: string;\n  type: QuestionType;\n  content: string;\n  order: number;\n  points: number;\n}\n\ninterface QuestionsListProps {\n  questions: Question[];\n  onEditQuestion: (questionId: string) => void;\n  onDeleteQuestion: (questionId: string) => void;\n  onReorderQuestions: (newOrder: { id: string; order: number }[]) => void;\n}\n\nexport function QuestionsList({\n  questions,\n  onEditQuestion,\n  onDeleteQuestion,\n  onReorderQuestions,\n}: QuestionsListProps) {\n  // State for reordering (we'll sort questions by order prop)\n  const [orderedQuestions, setOrderedQuestions] = useState(() => {\n    return [...questions].sort((a, b) => a.order - b.order);\n  });\n\n  // Update local state when questions prop changes\n  useState(() => {\n    const sorted = [...questions].sort((a, b) => a.order - b.order);\n    setOrderedQuestions(sorted);\n  });\n\n  // Handle drag end event\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) {\n      return; // Dropped outside the list\n    }\n\n    const sourceIndex = result.source.index;\n    const destinationIndex = result.destination.index;\n\n    if (sourceIndex === destinationIndex) {\n      return; // No change\n    }\n\n    // Reorder array\n    const updatedQuestions = [...orderedQuestions];\n    const [removed] = updatedQuestions.splice(sourceIndex, 1);\n    updatedQuestions.splice(destinationIndex, 0, removed);\n\n    // Update orders\n    const withNewOrders = updatedQuestions.map((question, index) => ({\n      ...question,\n      order: index + 1,\n    }));\n\n    setOrderedQuestions(withNewOrders);\n\n    // Send reorder to parent\n    onReorderQuestions(\n      withNewOrders.map(question => ({\n        id: question.id,\n        order: question.order,\n      }))\n    );\n  };\n\n  // If no questions, show empty state\n  if (orderedQuestions.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6 text-center\">\n          <p className=\"text-muted-foreground mb-4\">No questions added yet.</p>\n          <p className=\"text-sm text-muted-foreground\">\n            Click the \"Add Question\" button above to create your first question.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quiz Questions</CardTitle>\n        <CardDescription>\n          Drag to reorder questions. Click edit to modify a question.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <DragDropContext onDragEnd={handleDragEnd}>\n          <Droppable droppableId=\"questions\" isDropDisabled={false} isCombineEnabled={false}>\n            {(provided) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className=\"space-y-3\"\n              >\n                {orderedQuestions.map((question, index) => (\n                  <Draggable\n                    key={question.id}\n                    draggableId={question.id}\n                    index={index}\n                  >\n                    {(provided) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        className=\"border rounded-md p-3 bg-background flex items-start gap-4\"\n                      >\n                        <div\n                          className=\"flex items-center self-stretch p-1 cursor-grab text-muted-foreground\"\n                          {...provided.dragHandleProps}\n                        >\n                          <GripVertical size={20} />\n                        </div>\n\n                        <div className=\"flex-grow overflow-hidden\">\n                          <div className=\"flex flex-col gap-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"font-medium\">Q{index + 1}</span>\n                              <Badge variant={getQuestionTypeBadgeVariant(question.type)}>\n                                {getQuestionTypeLabel(question.type)}\n                              </Badge>\n                              <Badge variant=\"outline\">{question.points} {question.points === 1 ? 'point' : 'points'}</Badge>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground line-clamp-2\">\n                              {/* Strip HTML tags for display */}\n                              {question.content.replace(/<[^>]*>/g, '')}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-2 ml-2\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            onClick={() => onEditQuestion(question.id)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                            <span className=\"sr-only\">Edit</span>\n                          </Button>\n\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button size=\"icon\" variant=\"ghost\">\n                                <Trash className=\"h-4 w-4 text-destructive\" />\n                                <span className=\"sr-only\">Delete</span>\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete Question</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete this question? This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => onDeleteQuestion(question.id)}\n                                  className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                >\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </CardContent>\n    </Card>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1401, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/QuestionTypeSelector.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { QuestionType } from \"@prisma/client\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { \r\n  CheckSquare, \r\n  FileText, \r\n  Check, \r\n  Edit3, \r\n  Shuffle, \r\n  AlignLeft,\r\n  Code,\r\n  X\r\n} from \"lucide-react\";\r\n\r\ninterface QuestionTypeOption {\r\n  type: QuestionType;\r\n  label: string;\r\n  icon: React.ReactNode;\r\n  description: string;\r\n}\r\n\r\ninterface QuestionTypeSelectorProps {\r\n  onSelectType: (type: QuestionType) => void;\r\n}\r\n\r\nexport function QuestionTypeSelector({ onSelectType }: QuestionTypeSelectorProps) {\r\n  const questionTypes: QuestionTypeOption[] = [\r\n    {\r\n      type: QuestionType.MULTIPLE_CHOICE,\r\n      label: \"Multiple Choice\",\r\n      icon: <CheckSquare className=\"h-5 w-5\" />,\r\n      description: \"Create a question with multiple answer choices. Can have one or more correct answers.\"\r\n    },\r\n    {\r\n      type: QuestionType.TRUE_FALSE,\r\n      label: \"True/False\",\r\n      icon: <Check className=\"h-5 w-5\" />,\r\n      description: \"Ask a question with true or false as the only possible answers.\"\r\n    },\r\n    {\r\n      type: QuestionType.SHORT_ANSWER,\r\n      label: \"Short Answer\",\r\n      icon: <Edit3 className=\"h-5 w-5\" />,\r\n      description: \"Ask students to provide a brief text response that can be auto-graded.\"\r\n    },\r\n    {\r\n      type: QuestionType.ESSAY,\r\n      label: \"Essay\",\r\n      icon: <FileText className=\"h-5 w-5\" />,\r\n      description: \"Allow students to provide a detailed response that you'll grade manually.\"\r\n    },\r\n    {\r\n      type: QuestionType.MATCHING,\r\n      label: \"Matching\",\r\n      icon: <Shuffle className=\"h-5 w-5\" />,\r\n      description: \"Create pairs of items that students need to match correctly.\"\r\n    },\r\n    {\r\n      type: QuestionType.FILL_BLANK,\r\n      label: \"Fill in the Blank\",\r\n      icon: <AlignLeft className=\"h-5 w-5\" />,\r\n      description: \"Create text with missing words that students must complete.\"\r\n    },\r\n    {\r\n      type: QuestionType.CODE,\r\n      label: \"Code\",\r\n      icon: <Code className=\"h-5 w-5\" />,\r\n      description: \"Ask students to write or complete code snippets.\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n      {questionTypes.map((option) => (\r\n        <Card\r\n          key={option.type}\r\n          className=\"p-4 cursor-pointer hover:bg-accent/50 transition-colors flex items-start gap-3\"\r\n          onClick={() => onSelectType(option.type)}\r\n        >\r\n          <div className=\"p-2 rounded-md bg-primary/10 text-primary\">\r\n            {option.icon}\r\n          </div>\r\n          <div className=\"flex-1\">\r\n            <h3 className=\"font-medium\">{option.label}</h3>\r\n            <p className=\"text-sm text-muted-foreground mt-1\">\r\n              {option.description}\r\n            </p>\r\n          </div>\r\n        </Card>\r\n      ))}\r\n\r\n      <div className=\"md:col-span-2 flex justify-end mt-2\">\r\n        <Button variant=\"outline\" onClick={() => onSelectType(QuestionType.MULTIPLE_CHOICE)}>\r\n          <X className=\"h-4 w-4 mr-2\" />\r\n          Cancel\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;;;;;;AA2BO,SAAS,qBAAqB,EAAE,YAAY,EAA6B;IAC9E,MAAM,gBAAsC;QAC1C;YACE,MAAM,yJAAA,CAAA,eAAY,CAAC,eAAe;YAClC,OAAO;YACP,oBAAM,6LAAC,uNAAA,CAAA,cAAW;gBAAC,WAAU;;;;;;YAC7B,aAAa;QACf;QACA;YACE,MAAM,yJAAA,CAAA,eAAY,CAAC,UAAU;YAC7B,OAAO;YACP,oBAAM,6LAAC,uMAAA,CAAA,QAAK;gBAAC,WAAU;;;;;;YACvB,aAAa;QACf;QACA;YACE,MAAM,yJAAA,CAAA,eAAY,CAAC,YAAY;YAC/B,OAAO;YACP,oBAAM,6LAAC,6MAAA,CAAA,QAAK;gBAAC,WAAU;;;;;;YACvB,aAAa;QACf;QACA;YACE,MAAM,yJAAA,CAAA,eAAY,CAAC,KAAK;YACxB,OAAO;YACP,oBAAM,6LAAC,iNAAA,CAAA,WAAQ;gBAAC,WAAU;;;;;;YAC1B,aAAa;QACf;QACA;YACE,MAAM,yJAAA,CAAA,eAAY,CAAC,QAAQ;YAC3B,OAAO;YACP,oBAAM,6LAAC,2MAAA,CAAA,UAAO;gBAAC,WAAU;;;;;;YACzB,aAAa;QACf;QACA;YACE,MAAM,yJAAA,CAAA,eAAY,CAAC,UAAU;YAC7B,OAAO;YACP,oBAAM,6LAAC,mNAAA,CAAA,YAAS;gBAAC,WAAU;;;;;;YAC3B,aAAa;QACf;QACA;YACE,MAAM,yJAAA,CAAA,eAAY,CAAC,IAAI;YACvB,OAAO;YACP,oBAAM,6LAAC,qMAAA,CAAA,OAAI;gBAAC,WAAU;;;;;;YACtB,aAAa;QACf;KACD;IAED,qBACE,6LAAC;QAAI,WAAU;;YACZ,cAAc,GAAG,CAAC,CAAC,uBAClB,6LAAC,4HAAA,CAAA,OAAI;oBAEH,WAAU;oBACV,SAAS,IAAM,aAAa,OAAO,IAAI;;sCAEvC,6LAAC;4BAAI,WAAU;sCACZ,OAAO,IAAI;;;;;;sCAEd,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;8CAAe,OAAO,KAAK;;;;;;8CACzC,6LAAC;oCAAE,WAAU;8CACV,OAAO,WAAW;;;;;;;;;;;;;mBAVlB,OAAO,IAAI;;;;;0BAgBpB,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC,8HAAA,CAAA,SAAM;oBAAC,SAAQ;oBAAU,SAAS,IAAM,aAAa,yJAAA,CAAA,eAAY,CAAC,eAAe;;sCAChF,6LAAC,+LAAA,CAAA,IAAC;4BAAC,WAAU;;;;;;wBAAiB;;;;;;;;;;;;;;;;;;AAMxC;KA1EgB","debugId":null}},
    {"offset": {"line": 1599, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/checkbox.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,uKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,sQACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,uKAAA,CAAA,YAA2B;YAC1B,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE;sBAEd,cAAA,6LAAC,uMAAA,CAAA,QAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,uKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1651, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/toggle.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,mYACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,SACE;QACJ;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;QACN;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE,oBACzC,6LAAC,qKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;;AAIb,OAAO,WAAW,GAAG,qKAAA,CAAA,OAAoB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1711, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/toggle-group.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAGA;AACA;;;AAPA;;;;;AASA,MAAM,mCAAqB,CAAA,GAAA,6JAAA,CAAA,gBAAmB,AAAD,EAE3C;IACA,MAAM;IACN,SAAS;AACX;AAEA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAIjC,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACnD,6LAAC,8KAAA,CAAA,OAAyB;QACxB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,0CAA0C;QACvD,GAAG,KAAK;kBAET,cAAA,6LAAC,mBAAmB,QAAQ;YAAC,OAAO;gBAAE;gBAAS;YAAK;sBACjD;;;;;;;;;;;;AAKP,YAAY,WAAW,GAAG,8KAAA,CAAA,OAAyB,CAAC,WAAW;AAE/D,MAAM,gCAAkB,GAAA,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,WAIrC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;;IACnD,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAAE;IAEjC,qBACE,6LAAC,8KAAA,CAAA,OAAyB;QACxB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,CAAA,GAAA,8HAAA,CAAA,iBAAc,AAAD,EAAE;YACb,SAAS,QAAQ,OAAO,IAAI;YAC5B,MAAM,QAAQ,IAAI,IAAI;QACxB,IACA;QAED,GAAG,KAAK;kBAER;;;;;;AAGP;;AAEA,gBAAgB,WAAW,GAAG,8KAAA,CAAA,OAAyB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1787, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/editor/rich-text-editor.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEditor, EditorContent, type Editor as TiptapEditor } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport Heading from '@tiptap/extension-heading';\nimport BulletList from '@tiptap/extension-bullet-list';\nimport OrderedList from '@tiptap/extension-ordered-list';\nimport ListItem from '@tiptap/extension-list-item';\nimport Link from '@tiptap/extension-link';\nimport { cn } from \"@/lib/utils\";\nimport { \n  Bold, \n  Italic, \n  List, \n  ListOrdered, \n  Heading1, \n  Heading2, \n  Link2,\n  AlignLeft,\n  AlignCenter,\n  AlignRight\n} from \"lucide-react\";\nimport { Toggle } from \"../toggle\";\nimport { \n  ToggleGroup, \n  ToggleGroupItem \n} from \"../toggle-group\";\n\ninterface RichTextEditorProps {\n  content: string;\n  onChange: (html: string) => void;\n  placeholder?: string;\n  className?: string;\n  minHeight?: string;\n  rawOutput?: boolean;\n}\n\nexport function RichTextEditor({\n  content,\n  onChange,\n  placeholder = \"Enter content...\",\n  className,\n  minHeight = \"200px\",\n  rawOutput = false\n}: RichTextEditorProps) {\n  \n  const sanitizeContent = (html: string): string => {\n    if (!rawOutput) {\n      const isSimpleText = html.startsWith('<p>') && html.endsWith('</p>') &&\n        !html.includes('<p>', 1) && !html.slice(0, html.length - 4).includes('</p>') &&\n        !/<[a-z][^>]*>/i.test(html.substring(3, html.length - 4));\n        \n      if (isSimpleText) {\n        return html.substring(3, html.length - 4);\n      }\n    }\n    \n    return html;\n  };\n  \n  const editor = useEditor({\n    extensions: [\n      StarterKit,\n      Placeholder.configure({\n        placeholder,\n      }),\n      Heading.configure({\n        levels: [1, 2],\n      }),\n      BulletList,\n      OrderedList,\n      ListItem,\n      Link.configure({\n        openOnClick: true,\n        autolink: true,\n        HTMLAttributes: {\n          target: '_blank',\n          rel: 'noopener noreferrer nofollow',\n        },\n      }),\n    ],\n    content,\n    onUpdate: ({ editor }: { editor: TiptapEditor }) => {\n      const html = editor.getHTML();\n      onChange(sanitizeContent(html));\n    },\n    editorProps: {\n      attributes: {\n        class: 'prose dark:prose-invert prose-sm sm:prose-base prose-stone focus:outline-none max-w-none h-full',\n      },\n    },\n  });\n\n  const setLink = () => {\n    if (!editor) return;\n    \n    const previousUrl = editor.getAttributes('link').href;\n    const url = window.prompt('URL', previousUrl);\n\n    if (url === null) return;\n\n    if (url === '') {\n      editor.chain().focus().extendMarkRange('link').unsetLink().run();\n      return;\n    }\n\n    editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();\n  };\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <div className={cn(\"flex flex-col gap-2\", className)}>\n      <div className=\"flex flex-wrap bg-muted/50 rounded-md border p-1 gap-1\">\n        <ToggleGroup type=\"multiple\">\n          <ToggleGroupItem \n            value=\"bold\" \n            aria-label=\"Bold\" \n            size=\"sm\"\n            data-state={editor.isActive('bold') ? \"on\" : \"off\"}\n            onClick={() => editor.chain().focus().toggleBold().run()}\n          >\n            <Bold className=\"h-4 w-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem \n            value=\"italic\" \n            aria-label=\"Italic\" \n            size=\"sm\"\n            data-state={editor.isActive('italic') ? \"on\" : \"off\"}\n            onClick={() => editor.chain().focus().toggleItalic().run()}\n          >\n            <Italic className=\"h-4 w-4\" />\n          </ToggleGroupItem>\n        </ToggleGroup>\n\n        <div className=\"w-px h-6 bg-border mx-1\" />\n\n        <ToggleGroup type=\"single\" value={editor.isActive('heading', { level: 1 }) ? 'h1' : editor.isActive('heading', { level: 2 }) ? 'h2' : 'p'}>\n          <ToggleGroupItem \n            value=\"h1\" \n            aria-label=\"Heading 1\" \n            size=\"sm\"\n            data-state={editor.isActive('heading', { level: 1 }) ? \"on\" : \"off\"}\n            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n          >\n            <Heading1 className=\"h-4 w-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem \n            value=\"h2\" \n            aria-label=\"Heading 2\" \n            size=\"sm\"\n            data-state={editor.isActive('heading', { level: 2 }) ? \"on\" : \"off\"}\n            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n          >\n            <Heading2 className=\"h-4 w-4\" />\n          </ToggleGroupItem>\n        </ToggleGroup>\n\n        <div className=\"w-px h-6 bg-border mx-1\" />\n\n        <ToggleGroup type=\"multiple\">\n          <ToggleGroupItem \n            value=\"bulletList\" \n            aria-label=\"Bullet List\" \n            size=\"sm\"\n            data-state={editor.isActive('bulletList') ? \"on\" : \"off\"}\n            onClick={() => editor.chain().focus().toggleBulletList().run()}\n          >\n            <List className=\"h-4 w-4\" />\n          </ToggleGroupItem>\n          <ToggleGroupItem \n            value=\"orderedList\" \n            aria-label=\"Ordered List\" \n            size=\"sm\"\n            data-state={editor.isActive('orderedList') ? \"on\" : \"off\"}\n            onClick={() => editor.chain().focus().toggleOrderedList().run()}\n          >\n            <ListOrdered className=\"h-4 w-4\" />\n          </ToggleGroupItem>\n        </ToggleGroup>\n        \n        <div className=\"w-px h-6 bg-border mx-1\" />\n        \n        <Toggle\n          size=\"sm\"\n          pressed={editor.isActive('link')}\n          onClick={setLink}\n          aria-label=\"Link\"\n        >\n          <Link2 className=\"h-4 w-4\" />\n        </Toggle>\n      </div>\n      <div \n        className={cn(\n          \"border rounded-md p-3 overflow-y-auto\",\n          minHeight ? `min-h-[${minHeight}]` : undefined\n        )}\n        style={{ minHeight }}\n      >\n        <EditorContent editor={editor} />\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2127, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/MultipleChoiceEditor.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RichTextEditor } from \"@/components/ui/editor/rich-text-editor\";\nimport { Plus, Save, Trash2, GripVertical } from \"lucide-react\";\nimport { QuestionType } from \"@prisma/client\";\nimport { DragDropContext, Droppable, Draggable, DroppableProvided, DraggableProvided, DropResult } from \"react-beautiful-dnd\";\n\ninterface OptionType {\n  id: string;\n  content: string;\n  isCorrect: boolean;\n  order: number;\n}\n\ninterface MultipleChoiceEditorProps {\n  questionId?: string;\n  initialData?: {\n    content: string;\n    points: number;\n    order: number;\n    explanation?: string | null;\n    options?: OptionType[];\n    metadata?: {\n      allowMultiple?: boolean;\n      shuffleOptions?: boolean;\n    } | null;\n  };\n  onSave: (data: any) => Promise<void>;\n  onCancel: () => void;\n}\n\nexport function MultipleChoiceEditor({\n  questionId,\n  initialData,\n  onSave,\n  onCancel\n}: MultipleChoiceEditorProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"content\");\n  \n  const [content, setContent] = useState(initialData?.content || \"\");\n  const [points, setPoints] = useState(initialData?.points || 10);\n  const [order, setOrder] = useState(initialData?.order || 0);\n  const [explanation, setExplanation] = useState(initialData?.explanation || \"\");\n  \n  // Options\n  const [options, setOptions] = useState<OptionType[]>(\n    initialData?.options || [\n      { id: generateId(), content: \"\", isCorrect: false, order: 0 },\n      { id: generateId(), content: \"\", isCorrect: false, order: 1 },\n      { id: generateId(), content: \"\", isCorrect: false, order: 2 },\n      { id: generateId(), content: \"\", isCorrect: false, order: 3 },\n    ]\n  );\n  \n  // Metadata\n  const [allowMultiple, setAllowMultiple] = useState(\n    initialData?.metadata?.allowMultiple || false\n  );\n  const [shuffleOptions, setShuffleOptions] = useState(\n    initialData?.metadata?.shuffleOptions || false\n  );\n  \n  // Generate a unique ID\n  function generateId() {\n    return `id_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  // Handle adding a new option\n  const addOption = () => {\n    setOptions([\n      ...options,\n      {\n        id: generateId(),\n        content: \"\",\n        isCorrect: false,\n        order: options.length,\n      },\n    ]);\n  };\n  \n  // Handle removing an option\n  const removeOption = (id: string) => {\n    // Don't allow fewer than 2 options\n    if (options.length <= 2) return;\n    \n    const newOptions = options.filter(option => option.id !== id);\n    // Update order to be sequential\n    const reorderedOptions = newOptions.map((option, index) => ({\n      ...option,\n      order: index,\n    }));\n    setOptions(reorderedOptions);\n  };\n  \n  // Handle option content change\n  const handleOptionContentChange = (id: string, content: string) => {\n    setOptions(\n      options.map(option =>\n        option.id === id ? { ...option, content } : option\n      )\n    );\n  };\n  \n  // Handle option correctness change\n  const handleOptionCorrectChange = (id: string, isCorrect: boolean) => {\n    if (!allowMultiple) {\n      // For single choice, deselect all others\n      setOptions(\n        options.map(option =>\n          option.id === id\n            ? { ...option, isCorrect }\n            : { ...option, isCorrect: false }\n        )\n      );\n    } else {\n      // For multiple choice, just toggle the selected one\n      setOptions(\n        options.map(option =>\n          option.id === id ? { ...option, isCorrect } : option\n        )\n      );\n    }\n  };\n  \n  // Handle drag and drop reordering\n  const handleDragEnd = (result: DropResult) => {\n    if (!result.destination) return;\n    \n    const items = Array.from(options);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    \n    // Update order values\n    const reorderedOptions = items.map((item, index) => ({\n      ...item,\n      order: index,\n    }));\n    \n    setOptions(reorderedOptions);\n  };\n  \n  // Handle saving the question\n  const handleSave = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Validate that at least one option is marked as correct\n      const hasCorrectOption = options.some(option => option.isCorrect);\n      \n      if (!hasCorrectOption) {\n        alert(\"Please mark at least one option as correct.\");\n        setIsLoading(false);\n        return;\n      }\n      \n      // Ensure option content is filled\n      const hasEmptyOption = options.some(option => !option.content.trim());\n      \n      if (hasEmptyOption) {\n        alert(\"Please provide content for all options.\");\n        setIsLoading(false);\n        return;\n      }\n      \n      await onSave({\n        type: QuestionType.MULTIPLE_CHOICE,\n        content,\n        points,\n        order,\n        explanation,\n        options: options.map(option => ({\n          id: option.id, // Keep ID for existing options (update case)\n          content: option.content,\n          isCorrect: option.isCorrect,\n          order: option.order,\n        })),\n        metadata: {\n          allowMultiple, // Use consistent naming\n          shuffleOptions,\n          allowPartialCredit: true // Default to allow partial credit\n        },\n      });\n    } catch (error) {\n      console.error(\"Error saving multiple choice question:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>{questionId ? \"Edit Multiple Choice Question\" : \"New Multiple Choice Question\"}</span>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={isLoading}>\n                {isLoading ? (\n                  <>Saving...</>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Question\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"content\">Question Content</TabsTrigger>\n              <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"content\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Question Content</Label>\n                <RichTextEditor \n                  content={content}\n                  onChange={setContent}\n                  placeholder=\"Enter multiple choice question prompt...\"\n                  minHeight=\"150px\"\n                />\n              </div>\n              \n              <div className=\"space-y-4 pt-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-lg font-medium\">Answer Options</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"allowMultiple\"\n                      checked={allowMultiple}\n                      onCheckedChange={setAllowMultiple}\n                    />\n                    <Label htmlFor=\"allowMultiple\">Allow multiple correct answers</Label>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <DragDropContext onDragEnd={handleDragEnd}>\n                    <Droppable droppableId=\"options\" isDropDisabled={false} isCombineEnabled={false}>\n                      {(provided: DroppableProvided) => (\n                        <div\n                          {...provided.droppableProps}\n                          ref={provided.innerRef}\n                          className=\"space-y-2\"\n                        >\n                          {options.map((option, index) => (\n                            <Draggable key={option.id} draggableId={option.id} index={index}>\n                              {(provided: DraggableProvided) => (\n                                <div\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  className=\"flex items-start space-x-2 bg-muted/50 p-2 rounded-md\"\n                                >\n                                  <div\n                                    {...provided.dragHandleProps}\n                                    className=\"mt-3 text-muted-foreground\"\n                                  >\n                                    <GripVertical className=\"h-5 w-5\" />\n                                  </div>\n                                  <Checkbox\n                                    id={`option-${option.id}`}\n                                    checked={option.isCorrect}\n                                    onCheckedChange={(checked) =>\n                                      handleOptionCorrectChange(option.id, checked === true)\n                                    }\n                                    className=\"mt-3\"\n                                  />\n                                  <div className=\"flex-1\">\n                                    <Input\n                                      value={option.content}\n                                      onChange={(e) =>\n                                        handleOptionContentChange(option.id, e.target.value)\n                                      }\n                                      placeholder={`Option ${index + 1}`}\n                                    />\n                                  </div>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"icon\"\n                                    onClick={() => removeOption(option.id)}\n                                    disabled={options.length <= 2}\n                                    className=\"mt-1\"\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              )}\n                            </Draggable>\n                          ))}\n                          {provided.placeholder}\n                        </div>\n                      )}\n                    </Droppable>\n                  </DragDropContext>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addOption}\n                    className=\"mt-2\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Option\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"points\">Points</Label>\n                  <Input\n                    id=\"points\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={points}\n                    onChange={(e) => setPoints(Number(e.target.value))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"order\">Display Order</Label>\n                  <Input\n                    id=\"order\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={order}\n                    onChange={(e) => setOrder(Number(e.target.value))}\n                  />\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"settings\" className=\"space-y-4 pt-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"shuffleOptions\"\n                  checked={shuffleOptions}\n                  onCheckedChange={setShuffleOptions}\n                />\n                <Label htmlFor=\"shuffleOptions\">Shuffle option order for each student</Label>\n              </div>\n              \n              <div className=\"space-y-2 pt-6\">\n                <Label>Answer Explanation (Optional)</Label>\n                <RichTextEditor \n                  content={explanation}\n                  onChange={setExplanation}\n                  placeholder=\"Enter explanation of the correct answer...\"\n                  minHeight=\"150px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  This will be shown to students after the quiz if \"Show Results\" is enabled\n                </p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2799, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/editor/rubric-builder.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface RubricCriterion {\n  id: string;\n  name: string;\n  description: string;\n  pointsAvailable: number;\n  levels: {\n    id: string;\n    name: string;\n    description: string;\n    points: number;\n  }[];\n}\n\ninterface RubricBuilderProps {\n  criteria: RubricCriterion[];\n  onChange: (criteria: RubricCriterion[]) => void;\n  maxPoints?: number;\n  className?: string;\n}\n\nexport function RubricBuilder({\n  criteria,\n  onChange,\n  maxPoints,\n  className\n}: RubricBuilderProps) {\n  // Generate a unique ID\n  const generateId = () => `id_${Math.random().toString(36).substr(2, 9)}`;\n\n  // Add a new criterion\n  const addCriterion = () => {\n    const newCriteria = [\n      ...criteria,\n      {\n        id: generateId(),\n        name: \"\",\n        description: \"\",\n        pointsAvailable: 10,\n        levels: [\n          {\n            id: generateId(),\n            name: \"Excellent\",\n            description: \"\",\n            points: 10\n          },\n          {\n            id: generateId(),\n            name: \"Good\",\n            description: \"\",\n            points: 7\n          },\n          {\n            id: generateId(),\n            name: \"Needs Improvement\",\n            description: \"\",\n            points: 3\n          }\n        ]\n      }\n    ];\n    onChange(newCriteria);\n  };\n\n  // Remove a criterion\n  const removeCriterion = (criterionId: string) => {\n    const newCriteria = criteria.filter(c => c.id !== criterionId);\n    onChange(newCriteria);\n  };\n\n  // Update criterion properties\n  const updateCriterion = (\n    criterionId: string,\n    field: keyof Omit<RubricCriterion, \"id\" | \"levels\">,\n    value: string | number\n  ) => {\n    const newCriteria = criteria.map(criterion => {\n      if (criterion.id === criterionId) {\n        const updatedCriterion = {\n          ...criterion,\n          [field]: value\n        };\n        \n        // Automatically adjust level points based on the new pointsAvailable\n        // Only if the field being updated is pointsAvailable\n        if (field === 'pointsAvailable' && typeof value === 'number') {\n          const maxPoints = value;\n          // Only update if there are 3 levels (default Excellent/Good/Needs Improvement)\n          if (updatedCriterion.levels.length >= 3) {\n            // Apply 100%/70%/30% distribution to the first three levels\n            const newLevels = [...updatedCriterion.levels];\n            newLevels[0].points = maxPoints; // 100% for Excellent\n            newLevels[1].points = Math.round(maxPoints * 0.7); // 70% for Good\n            newLevels[2].points = Math.round(maxPoints * 0.3); // 30% for Needs Improvement\n            updatedCriterion.levels = newLevels;\n          }\n        }\n        \n        return updatedCriterion;\n      }\n      return criterion;\n    });\n    onChange(newCriteria);\n  };\n\n  // Add a level to a criterion\n  const addLevel = (criterionId: string) => {\n    const newCriteria = criteria.map(criterion => {\n      if (criterion.id === criterionId) {\n        return {\n          ...criterion,\n          levels: [\n            ...criterion.levels,\n            {\n              id: generateId(),\n              name: \"New Level\",\n              description: \"\",\n              points: 0\n            }\n          ]\n        };\n      }\n      return criterion;\n    });\n    onChange(newCriteria);\n  };\n\n  // Remove a level from a criterion\n  const removeLevel = (criterionId: string, levelId: string) => {\n    const newCriteria = criteria.map(criterion => {\n      if (criterion.id === criterionId) {\n        return {\n          ...criterion,\n          levels: criterion.levels.filter(level => level.id !== levelId)\n        };\n      }\n      return criterion;\n    });\n    onChange(newCriteria);\n  };\n\n  // Update level properties\n  const updateLevel = (\n    criterionId: string,\n    levelId: string,\n    field: keyof Omit<RubricCriterion[\"levels\"][0], \"id\">,\n    value: string | number\n  ) => {\n    const newCriteria = criteria.map(criterion => {\n      if (criterion.id === criterionId) {\n        return {\n          ...criterion,\n          levels: criterion.levels.map(level => {\n            if (level.id === levelId) {\n              return {\n                ...level,\n                [field]: value\n              };\n            }\n            return level;\n          })\n        };\n      }\n      return criterion;\n    });\n    onChange(newCriteria);\n  };\n\n  // Calculate total points\n  const totalPoints = criteria.reduce((sum, criterion) => \n    sum + criterion.pointsAvailable, 0);\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold\">Rubric Criteria</h3>\n        {maxPoints && (\n          <div className=\"text-sm\">\n            <span className={totalPoints > maxPoints ? \"text-destructive\" : \"\"}>\n              {totalPoints}\n            </span>{\" \"}\n            / {maxPoints} points\n          </div>\n        )}\n      </div>\n\n      {criteria.length === 0 ? (\n        <div className=\"flex flex-col items-center justify-center p-4 border border-dashed rounded-md\">\n          <p className=\"text-muted-foreground mb-2\">No grading criteria defined yet</p>\n          <Button onClick={addCriterion} variant=\"outline\" size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Criterion\n          </Button>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {criteria.map((criterion) => (\n            <Card key={criterion.id} className=\"relative\">\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                className=\"absolute right-2 top-2 h-7 w-7\"\n                onClick={() => removeCriterion(criterion.id)}\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n\n              <CardHeader>\n                <div className=\"grid gap-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Input\n                      placeholder=\"Criterion name\"\n                      value={criterion.name}\n                      onChange={(e) => updateCriterion(criterion.id, \"name\", e.target.value)}\n                      className=\"font-medium\"\n                    />\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm whitespace-nowrap\">Points:</span>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        value={criterion.pointsAvailable}\n                        onChange={(e) => updateCriterion(criterion.id, \"pointsAvailable\", Number(e.target.value))}\n                        className=\"w-16\"\n                      />\n                    </div>\n                  </div>\n                  <Textarea\n                    placeholder=\"Describe this criterion...\"\n                    value={criterion.description}\n                    onChange={(e) => updateCriterion(criterion.id, \"description\", e.target.value)}\n                    rows={2}\n                  />\n                </div>\n              </CardHeader>\n\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <h4 className=\"text-sm font-medium mb-2\">Performance Levels</h4>\n\n                  <div className=\"grid grid-cols-[1fr_1fr_auto] gap-2 items-center text-sm font-medium px-2\">\n                    <div>Level</div>\n                    <div>Description</div>\n                    <div>Points</div>\n                  </div>\n\n                  {criterion.levels.map((level) => (\n                    <div key={level.id} className=\"grid grid-cols-[1fr_1fr_auto_auto] gap-2 items-start\">\n                      <Input\n                        placeholder=\"Level name\"\n                        value={level.name}\n                        onChange={(e) => updateLevel(criterion.id, level.id, \"name\", e.target.value)}\n                      />\n                      <Textarea\n                        placeholder=\"Describe this level...\"\n                        value={level.description}\n                        onChange={(e) => updateLevel(criterion.id, level.id, \"description\", e.target.value)}\n                        className=\"resize-none min-h-[60px]\"\n                      />\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max={criterion.pointsAvailable.toString()}\n                        value={level.points}\n                        onChange={(e) => updateLevel(criterion.id, level.id, \"points\", Number(e.target.value))}\n                        className=\"w-16\"\n                      />\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-8 w-8\"\n                        onClick={() => removeLevel(criterion.id, level.id)}\n                        disabled={criterion.levels.length <= 1}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => addLevel(criterion.id)}\n                    className=\"mt-2\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Level\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n\n          <Button \n            variant=\"outline\" \n            onClick={addCriterion}\n            className=\"w-full\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Another Criterion\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3298, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/calendar.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/40 first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent/10 text-accent-foreground dark:bg-accent/20\",\n        day_outside:\n          \"day-outside text-muted-foreground/70 aria-selected:bg-accent/80 aria-selected:text-accent-foreground aria-selected:opacity-100\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"],"names":[],"mappings":";;;;AAGA;AAAA;AACA;AAEA;AACA;AAPA;;;;;;AAWA,SAAS,SAAS,EAChB,SAAS,EACT,UAAU,EACV,kBAAkB,IAAI,EACtB,GAAG,OACW;IACd,qBACE,6LAAC,iKAAA,CAAA,YAAS;QACR,iBAAiB;QACjB,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,OAAO;QACrB,YAAY;YACV,QAAQ;YACR,OAAO;YACP,SAAS;YACT,eAAe;YACf,KAAK;YACL,YAAY,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACX,CAAA,GAAA,8HAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE,SAAS;YAAU,IACpC;YAEF,qBAAqB;YACrB,iBAAiB;YACjB,OAAO;YACP,UAAU;YACV,WACE;YACF,KAAK;YACL,MAAM;YACN,KAAK,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACJ,CAAA,GAAA,8HAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE,SAAS;YAAQ,IAClC;YAEF,eAAe;YACf,cACE;YACF,WAAW;YACX,aACE;YACF,cAAc;YACd,kBACE;YACF,YAAY;YACZ,GAAG,UAAU;QACf;QACA,YAAY;YACV,UAAU,CAAC,EAAE,GAAG,OAAO,iBAAK,6LAAC,uNAAA,CAAA,cAAW;oBAAC,WAAU;;;;;;YACnD,WAAW,CAAC,EAAE,GAAG,OAAO,iBAAK,6LAAC,yNAAA,CAAA,eAAY;oBAAC,WAAU;;;;;;QACvD;QACC,GAAG,KAAK;;;;;;AAGf;KAnDS;AAoDT,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 3382, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/date-time-picker.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { CalendarIcon, Clock } from \"lucide-react\";\r\nimport { format } from \"date-fns\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Calendar } from \"@/components/ui/calendar\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\n\r\ninterface DateTimePickerProps {\r\n  date: Date | undefined;\r\n  setDate: (date: Date | undefined) => void;\r\n  granularity?: \"day\" | \"minute\" | \"second\";\r\n  className?: string;\r\n}\r\n\r\nexport function DateTimePicker({\r\n  date,\r\n  setDate,\r\n  granularity = \"minute\",\r\n  className,\r\n}: DateTimePickerProps) {\r\n  const [selectedTime, setSelectedTime] = React.useState<{\r\n    hours: string;\r\n    minutes: string;\r\n    seconds: string;\r\n  }>({\r\n    hours: date ? format(date, \"HH\") : \"12\",\r\n    minutes: date ? format(date, \"mm\") : \"00\",\r\n    seconds: date ? format(date, \"ss\") : \"00\",\r\n  });\r\n\r\n  // Update time state when date prop changes\r\n  React.useEffect(() => {\r\n    if (date) {\r\n      setSelectedTime({\r\n        hours: format(date, \"HH\"),\r\n        minutes: format(date, \"mm\"),\r\n        seconds: format(date, \"ss\"),\r\n      });\r\n    }\r\n  }, [date]);\r\n\r\n  // Update the date with the selected time\r\n  const updateDateWithTime = React.useCallback(() => {\r\n    if (!date) return;\r\n\r\n    const hours = parseInt(selectedTime.hours);\r\n    const minutes = parseInt(selectedTime.minutes);\r\n    const seconds = parseInt(selectedTime.seconds);\r\n\r\n    const newDate = new Date(date);\r\n    newDate.setHours(hours);\r\n    newDate.setMinutes(minutes);\r\n    newDate.setSeconds(seconds);\r\n\r\n    setDate(newDate);\r\n  }, [date, selectedTime, setDate]);\r\n\r\n  // Update time when hours, minutes, or seconds change\r\n  React.useEffect(() => {\r\n    if (date) {\r\n      updateDateWithTime();\r\n    }\r\n  }, [selectedTime, updateDateWithTime, date]);\r\n\r\n  // Generate arrays for hours, minutes, and seconds\r\n  const hours = Array.from({ length: 24 }, (_, i) => i.toString().padStart(2, \"0\"));\r\n  const minutes = Array.from({ length: 60 }, (_, i) => i.toString().padStart(2, \"0\"));\r\n  const seconds = Array.from({ length: 60 }, (_, i) => i.toString().padStart(2, \"0\"));\r\n\r\n  // Handle time selection\r\n  const handleSelectTime = (value: string, type: \"hours\" | \"minutes\" | \"seconds\") => {\r\n    setSelectedTime((prev) => ({ ...prev, [type]: value }));\r\n  };\r\n\r\n  // Handle date selection\r\n  const handleSelectDate = (selectedDate: Date | undefined) => {\r\n    if (!selectedDate) {\r\n      setDate(undefined);\r\n      return;\r\n    }\r\n\r\n    if (date) {\r\n      // Keep the existing time when selecting a new date\r\n      const newDate = new Date(selectedDate);\r\n      const hours = parseInt(selectedTime.hours);\r\n      const minutes = parseInt(selectedTime.minutes);\r\n      const seconds = parseInt(selectedTime.seconds);\r\n\r\n      newDate.setHours(hours, minutes, seconds);\r\n      setDate(newDate);\r\n    } else {\r\n      // If there was no date before, set with default time (current time)\r\n      setDate(selectedDate);\r\n    }\r\n  };\r\n\r\n  // Handle clearing the date\r\n  const handleClear = () => {\r\n    setDate(undefined);\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"grid gap-2\", className)}>\r\n      <Popover>\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            id=\"date\"\r\n            variant={\"outline\"}\r\n            className={cn(\r\n              \"w-full justify-start text-left font-normal\",\r\n              !date && \"text-muted-foreground\"\r\n            )}\r\n          >\r\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n            {date ? format(date, \"PPP\") : <span>Pick a date</span>}\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n          <Calendar\r\n            mode=\"single\"\r\n            selected={date}\r\n            onSelect={handleSelectDate}\r\n            initialFocus\r\n          />\r\n          \r\n          {granularity !== \"day\" && date && (\r\n            <div className=\"border-t border-border p-3 flex items-center gap-2\">\r\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n              <div className=\"flex gap-1\">\r\n                <Select\r\n                  value={selectedTime.hours}\r\n                  onValueChange={(value) => handleSelectTime(value, \"hours\")}\r\n                >\r\n                  <SelectTrigger className=\"w-16\">\r\n                    <SelectValue placeholder=\"HH\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent position=\"popper\" className=\"h-48\">\r\n                    {hours.map((hour) => (\r\n                      <SelectItem key={hour} value={hour}>\r\n                        {hour}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                <span className=\"text-muted-foreground self-center\">:</span>\r\n                <Select\r\n                  value={selectedTime.minutes}\r\n                  onValueChange={(value) => handleSelectTime(value, \"minutes\")}\r\n                >\r\n                  <SelectTrigger className=\"w-16\">\r\n                    <SelectValue placeholder=\"MM\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent position=\"popper\" className=\"h-48\">\r\n                    {minutes.map((minute) => (\r\n                      <SelectItem key={minute} value={minute}>\r\n                        {minute}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                \r\n                {granularity === \"second\" && (\r\n                  <>\r\n                    <span className=\"text-muted-foreground self-center\">:</span>\r\n                    <Select\r\n                      value={selectedTime.seconds}\r\n                      onValueChange={(value) => handleSelectTime(value, \"seconds\")}\r\n                    >\r\n                      <SelectTrigger className=\"w-16\">\r\n                        <SelectValue placeholder=\"SS\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent position=\"popper\" className=\"h-48\">\r\n                        {seconds.map((second) => (\r\n                          <SelectItem key={second} value={second}>\r\n                            {second}\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </>\r\n                )}\r\n              </div>\r\n              \r\n              {date && (\r\n                <Button \r\n                  variant=\"ghost\" \r\n                  size=\"sm\" \r\n                  className=\"ml-auto h-8\"\r\n                  onClick={handleClear}\r\n                >\r\n                  Clear\r\n                </Button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </PopoverContent>\r\n      </Popover>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3754, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/EssayQuestionEditor.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RubricBuilder, RubricCriterion } from \"@/components/ui/editor/rubric-builder\";\nimport { RichTextEditor } from \"@/components/ui/editor/rich-text-editor\";\nimport { Pencil, Save, HelpCircle, Calendar } from \"lucide-react\";\nimport { QuestionType } from \"@prisma/client\";\nimport { DateTimePicker } from \"@/components/ui/date-time-picker\";\n\ninterface EssayQuestionEditorProps {\n  questionId?: string;\n  initialData?: {\n    content: string;\n    points: number;\n    order: number;\n    explanation?: string | null;\n    metadata?: {\n      minWords?: number;\n      maxWords?: number;\n      placeholder?: string;\n      richText?: boolean;\n      rubric?: RubricCriterion[];\n      gradingGuide?: string;\n      exampleAnswer?: string;\n      startDate?: string | null;\n      endDate?: string | null;\n      showResults?: boolean;\n    } | null;\n  };\n  onSave: (data: any) => Promise<void>;\n  onCancel: () => void;\n}\n\nexport function EssayQuestionEditor({\n  questionId,\n  initialData,\n  onSave,\n  onCancel\n}: EssayQuestionEditorProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"content\");\n  \n  const [content, setContent] = useState(initialData?.content || \"\");\n  const [points, setPoints] = useState(initialData?.points || 10);\n  const [order, setOrder] = useState(initialData?.order || 0);\n  const [explanation, setExplanation] = useState(initialData?.explanation || \"\");\n  \n  // Metadata\n  const [minWords, setMinWords] = useState(initialData?.metadata?.minWords || 0);\n  const [maxWords, setMaxWords] = useState(initialData?.metadata?.maxWords || 0);\n  const [placeholder, setPlaceholder] = useState(initialData?.metadata?.placeholder || \"Enter your answer here...\");\n  const [richText, setRichText] = useState(initialData?.metadata?.richText || false);\n  const [rubric, setRubric] = useState<RubricCriterion[]>(initialData?.metadata?.rubric || []);\n  const [gradingGuide, setGradingGuide] = useState(initialData?.metadata?.gradingGuide || \"\");\n  const [exampleAnswer, setExampleAnswer] = useState(initialData?.metadata?.exampleAnswer || \"\");\n  \n  // Time and result settings\n  const [startDate, setStartDate] = useState<Date | undefined>(\n    initialData?.metadata?.startDate ? new Date(initialData.metadata.startDate) : undefined\n  );\n  const [endDate, setEndDate] = useState<Date | undefined>(\n    initialData?.metadata?.endDate ? new Date(initialData.metadata.endDate) : undefined\n  );\n  const [showResults, setShowResults] = useState<boolean>(\n    initialData?.metadata?.showResults !== undefined ? initialData.metadata.showResults : true\n  );\n  \n  // Generate a unique ID\n  const generateId = () => `id_${Math.random().toString(36).substr(2, 9)}`;\n  \n  const handleSave = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Create final data structure\n      const finalData = {\n        type: QuestionType.ESSAY,\n        content,\n        points,\n        order,\n        explanation,\n        options: [], // Essay questions don't use options, but API might expect an array\n        metadata: {\n          minWords: minWords > 0 ? minWords : undefined,\n          maxWords: maxWords > 0 ? maxWords : undefined,\n          placeholder,\n          richText,\n          rubric: rubric.length > 0 ? rubric : undefined,\n          gradingGuide: gradingGuide || undefined,\n          exampleAnswer: exampleAnswer || undefined,\n          startDate: startDate ? startDate.toISOString() : null,\n          endDate: endDate ? endDate.toISOString() : null,\n          showResults\n        }\n      };\n      \n      console.log(\"EssayQuestionEditor submitting:\", JSON.stringify(finalData, null, 2));\n      await onSave(finalData);\n    } catch (error) {\n      console.error(\"Error saving essay question:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>{questionId ? \"Edit Essay Question\" : \"New Essay Question\"}</span>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={isLoading}>\n                {isLoading ? (\n                  <>Saving...</>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Question\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"content\">Question Content</TabsTrigger>\n              <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n              <TabsTrigger value=\"rubric\">Rubric</TabsTrigger>\n              <TabsTrigger value=\"grading\">Grading Guide</TabsTrigger>\n              <TabsTrigger value=\"timing\">Time & Results</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"content\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Question Content</Label>\n                <RichTextEditor \n                  content={content}\n                  onChange={setContent}\n                  placeholder=\"Enter essay question prompt...\"\n                  minHeight=\"200px\"\n                  rawOutput={false}\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"points\">Points</Label>\n                  <Input\n                    id=\"points\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={points}\n                    onChange={(e) => setPoints(Number(e.target.value))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"order\">Display Order</Label>\n                  <Input\n                    id=\"order\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={order}\n                    onChange={(e) => setOrder(Number(e.target.value))}\n                  />\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"settings\" className=\"space-y-4 pt-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"minWords\">Minimum Words</Label>\n                  <Input\n                    id=\"minWords\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={minWords}\n                    onChange={(e) => setMinWords(Number(e.target.value))}\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Set to 0 for no minimum\n                  </p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"maxWords\">Maximum Words</Label>\n                  <Input\n                    id=\"maxWords\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={maxWords}\n                    onChange={(e) => setMaxWords(Number(e.target.value))}\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Set to 0 for no maximum\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"placeholder\">Answer Placeholder</Label>\n                <Input\n                  id=\"placeholder\"\n                  value={placeholder}\n                  onChange={(e) => setPlaceholder(e.target.value)}\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Text to show in the answer field before the student starts typing\n                </p>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"richText\"\n                  checked={richText}\n                  onCheckedChange={setRichText}\n                />\n                <Label htmlFor=\"richText\">Enable Rich Text Editor for Students</Label>\n              </div>\n              \n              <div className=\"space-y-2 pt-4\">\n                <Label>Answer Explanation (Optional)</Label>\n                <RichTextEditor \n                  content={explanation}\n                  onChange={setExplanation}\n                  placeholder=\"Enter explanation or sample answer...\"\n                  minHeight=\"150px\"\n                  rawOutput={false}\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  This will be shown to students after the quiz if \"Show Results\" is enabled\n                </p>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"rubric\" className=\"space-y-4 pt-4\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <HelpCircle className=\"h-4 w-4 text-muted-foreground\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  Create a rubric to help with grading this essay question. Define criteria and performance levels.\n                </p>\n              </div>\n              \n              <RubricBuilder\n                criteria={rubric}\n                onChange={setRubric}\n                maxPoints={points}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"grading\" className=\"space-y-4 pt-4\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Pencil className=\"h-4 w-4 text-muted-foreground\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  Create grading guides and example answers to assist with consistent grading.\n                </p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Grading Guide (For Teachers)</Label>\n                <RichTextEditor \n                  content={gradingGuide}\n                  onChange={setGradingGuide}\n                  placeholder=\"Enter guidelines for grading this essay...\"\n                  minHeight=\"150px\"\n                  rawOutput={false}\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  This will only be visible to teachers when grading student responses.\n                </p>\n              </div>\n              \n              <div className=\"space-y-2 mt-6\">\n                <Label>Example Answer</Label>\n                <RichTextEditor \n                  content={exampleAnswer}\n                  onChange={setExampleAnswer}\n                  placeholder=\"Enter an example of an ideal answer...\"\n                  minHeight=\"150px\"\n                  rawOutput={false}\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  This will only be visible to teachers when grading student responses.\n                </p>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"timing\" className=\"space-y-4 pt-4\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  Set optional start and end dates for question availability. Leave blank for always available.\n                </p>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"startDate\">Available From (Optional)</Label>\n                  <DateTimePicker\n                    date={startDate}\n                    setDate={setStartDate}\n                    granularity=\"minute\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"endDate\">Available Until (Optional)</Label>\n                  <DateTimePicker\n                    date={endDate}\n                    setDate={setEndDate}\n                    granularity=\"minute\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2 mt-6\">\n                <Switch\n                  id=\"showResults\"\n                  checked={showResults}\n                  onCheckedChange={setShowResults}\n                />\n                <Label htmlFor=\"showResults\">Show Results to Students After Quiz</Label>\n              </div>\n              <p className=\"text-sm text-muted-foreground pl-7\">\n                When enabled, students will be able to see their answers, scores, and explanations after quiz completion\n              </p>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4563, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/radio-group.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,6LAAC,6KAAA,CAAA,OAAwB;QACvB,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,cAAc;QAC3B,GAAG,KAAK;QACT,KAAK;;;;;;AAGX;;AACA,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,gMACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,YAA6B;YAAC,WAAU;sBACvC,cAAA,6LAAC,yMAAA,CAAA,SAAM;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI1B;;AACA,eAAe,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 4633, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/TrueFalseEditor.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { RichTextEditor } from \"@/components/ui/editor/rich-text-editor\";\nimport { Save } from \"lucide-react\";\nimport { QuestionType } from \"@prisma/client\";\n\ninterface TrueFalseEditorProps {\n  questionId?: string;\n  initialData?: {\n    content: string;\n    points: number;\n    order: number;\n    explanation?: string | null;\n    options?: {\n      id?: string;\n      content: string;\n      isCorrect: boolean;\n      order: number;\n    }[];\n  };\n  onSave: (data: any) => Promise<void>;\n  onCancel: () => void;\n}\n\nexport function TrueFalseEditor({\n  questionId,\n  initialData,\n  onSave,\n  onCancel\n}: TrueFalseEditorProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"content\");\n  \n  const [content, setContent] = useState(initialData?.content || \"\");\n  const [points, setPoints] = useState(initialData?.points || 10);\n  const [order, setOrder] = useState(initialData?.order || 0);\n  const [explanation, setExplanation] = useState(initialData?.explanation || \"\");\n  \n  // Get the correct answer from options\n  const getCorrectAnswer = (): boolean => {\n    if (!initialData?.options || initialData.options.length === 0) {\n      return false; // Default to false if no options\n    }\n    \n    // Find the option with isCorrect = true\n    const correctOption = initialData.options.find(option => option.isCorrect);\n    \n    // In true/false, typically \"True\" is the first option (content \"True\" or order 0)\n    // So if the correct option is the \"True\" option, return true\n    if (correctOption) {\n      return correctOption.content === \"True\" || correctOption.order === 0;\n    }\n    \n    return false;\n  };\n  \n  const [isCorrectAnswer, setIsCorrectAnswer] = useState<boolean>(\n    getCorrectAnswer()\n  );\n  \n  // Handle saving the question\n  const handleSave = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Create options for True and False\n      const options = [\n        {\n          content: \"True\",\n          isCorrect: isCorrectAnswer === true,\n          order: 0\n        },\n        {\n          content: \"False\",\n          isCorrect: isCorrectAnswer === false,\n          order: 1\n        }\n      ];\n      \n      // Creating final data structure\n      const finalData = {\n        type: QuestionType.TRUE_FALSE,\n        content,\n        points,\n        order,\n        explanation,\n        options,\n        // Add required field for API schema\n        correctAnswer: isCorrectAnswer,\n      };\n      \n      console.log(\"TrueFalseEditor submitting:\", JSON.stringify(finalData, null, 2));\n      await onSave(finalData);\n    } catch (error) {\n      console.error(\"Error saving true/false question:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>{questionId ? \"Edit True/False Question\" : \"New True/False Question\"}</span>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={isLoading}>\n                {isLoading ? (\n                  <>Saving...</>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Question\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"content\">Question Content</TabsTrigger>\n              <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"content\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Question Content</Label>\n                <RichTextEditor \n                  content={content}\n                  onChange={setContent}\n                  placeholder=\"Enter a statement that is either true or false...\"\n                  minHeight=\"150px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Write a statement that can be clearly identified as true or false.\n                </p>\n              </div>\n              \n              <div className=\"space-y-4 pt-4\">\n                <Label className=\"text-lg font-medium\">Correct Answer</Label>\n                <RadioGroup \n                  value={isCorrectAnswer ? \"true\" : \"false\"}\n                  onValueChange={(value) => setIsCorrectAnswer(value === \"true\")}\n                  className=\"flex flex-col space-y-1\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"true\" id=\"true\" />\n                    <Label htmlFor=\"true\">True</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"false\" id=\"false\" />\n                    <Label htmlFor=\"false\">False</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"points\">Points</Label>\n                  <Input\n                    id=\"points\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={points}\n                    onChange={(e) => setPoints(Number(e.target.value))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"order\">Display Order</Label>\n                  <Input\n                    id=\"order\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={order}\n                    onChange={(e) => setOrder(Number(e.target.value))}\n                  />\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"settings\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Answer Explanation (Optional)</Label>\n                <RichTextEditor \n                  content={explanation}\n                  onChange={setExplanation}\n                  placeholder=\"Enter explanation of why the answer is true or false...\"\n                  minHeight=\"150px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  This will be shown to students after the quiz if \"Show Results\" is enabled\n                </p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5081, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/ShortAnswerEditor.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { RichTextEditor } from \"@/components/ui/editor/rich-text-editor\";\nimport { Plus, Save, Trash2 } from \"lucide-react\";\nimport { QuestionType } from \"@prisma/client\";\n\ninterface ShortAnswerEditorProps {\n  questionId?: string;\n  initialData?: {\n    content: string;\n    points: number;\n    order: number;\n    explanation?: string | null;\n    options?: {\n      id?: string;\n      content: string;\n      isCorrect: boolean;\n    }[];\n    metadata?: {\n      caseSensitive?: boolean;\n      placeholder?: string;\n    } | null;\n  };\n  onSave: (data: any) => Promise<void>;\n  onCancel: () => void;\n}\n\nexport function ShortAnswerEditor({\n  questionId,\n  initialData,\n  onSave,\n  onCancel\n}: ShortAnswerEditorProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"content\");\n  \n  const [content, setContent] = useState(initialData?.content || \"\");\n  const [points, setPoints] = useState(initialData?.points || 10);\n  const [order, setOrder] = useState(initialData?.order || 0);\n  const [explanation, setExplanation] = useState(initialData?.explanation || \"\");\n  \n  // Correct answers\n  const [correctAnswers, setCorrectAnswers] = useState<string[]>(\n    initialData?.options?.filter(o => o.isCorrect).map(o => o.content) || [\"\"]\n  );\n  \n  // Metadata\n  const [caseSensitive, setCaseSensitive] = useState(\n    initialData?.metadata?.caseSensitive || false\n  );\n  const [placeholder, setPlaceholder] = useState(\n    initialData?.metadata?.placeholder || \"Enter your answer...\"\n  );\n  \n  // Add a new correct answer\n  const addCorrectAnswer = () => {\n    setCorrectAnswers([...correctAnswers, \"\"]);\n  };\n  \n  // Remove a correct answer\n  const removeCorrectAnswer = (index: number) => {\n    if (correctAnswers.length <= 1) return; // Keep at least one correct answer\n    const newAnswers = [...correctAnswers];\n    newAnswers.splice(index, 1);\n    setCorrectAnswers(newAnswers);\n  };\n  \n  // Update a correct answer\n  const updateCorrectAnswer = (index: number, value: string) => {\n    const newAnswers = [...correctAnswers];\n    newAnswers[index] = value;\n    setCorrectAnswers(newAnswers);\n  };\n  \n  // Handle saving the question\n  const handleSave = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Filter out empty answers\n      const filteredAnswers = correctAnswers.filter(answer => answer.trim() !== \"\");\n      \n      if (filteredAnswers.length === 0) {\n        alert(\"Please add at least one correct answer.\");\n        setIsLoading(false);\n        return;\n      }\n      \n      // Create options for correct answers\n      const options = filteredAnswers.map((answer, index) => ({\n        content: answer,\n        isCorrect: true,\n        order: index,\n      }));\n      \n      // Creating final data structure\n      const finalData = {\n        type: QuestionType.SHORT_ANSWER,\n        content,\n        points,\n        order,\n        explanation,\n        options,\n        metadata: {\n          caseSensitive,\n          placeholder\n        }\n      };\n      \n      console.log(\"ShortAnswerEditor submitting:\", JSON.stringify(finalData, null, 2));\n      await onSave(finalData);\n    } catch (error) {\n      console.error(\"Error saving short answer question:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>{questionId ? \"Edit Short Answer Question\" : \"New Short Answer Question\"}</span>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={isLoading}>\n                {isLoading ? (\n                  <>Saving...</>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Question\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"content\">Question Content</TabsTrigger>\n              <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"content\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Question Content</Label>\n                <RichTextEditor \n                  content={content}\n                  onChange={setContent}\n                  placeholder=\"Enter short answer question prompt...\"\n                  minHeight=\"150px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Write a question that requires a brief, specific answer.\n                </p>\n              </div>\n              \n              <div className=\"space-y-2 pt-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-lg font-medium\">Correct Answers</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"caseSensitive\"\n                      checked={caseSensitive}\n                      onCheckedChange={setCaseSensitive}\n                    />\n                    <Label htmlFor=\"caseSensitive\">Case sensitive</Label>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  Add all acceptable answers. Students need to match one of these exactly.\n                </p>\n                \n                <div className=\"space-y-2\">\n                  {correctAnswers.map((answer, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Input\n                        value={answer}\n                        onChange={(e) => updateCorrectAnswer(index, e.target.value)}\n                        placeholder={`Correct answer ${index + 1}`}\n                      />\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => removeCorrectAnswer(index)}\n                        disabled={correctAnswers.length <= 1}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addCorrectAnswer}\n                    className=\"mt-2\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Another Correct Answer\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"points\">Points</Label>\n                  <Input\n                    id=\"points\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={points}\n                    onChange={(e) => setPoints(Number(e.target.value))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"order\">Display Order</Label>\n                  <Input\n                    id=\"order\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={order}\n                    onChange={(e) => setOrder(Number(e.target.value))}\n                  />\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"settings\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"placeholder\">Answer Placeholder</Label>\n                <Input\n                  id=\"placeholder\"\n                  value={placeholder}\n                  onChange={(e) => setPlaceholder(e.target.value)}\n                  placeholder=\"Enter your answer...\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Text to show in the answer field before the student starts typing\n                </p>\n              </div>\n              \n              <div className=\"space-y-2 pt-6\">\n                <Label>Answer Explanation (Optional)</Label>\n                <RichTextEditor \n                  content={explanation}\n                  onChange={setExplanation}\n                  placeholder=\"Enter explanation of the correct answer...\"\n                  minHeight=\"150px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  This will be shown to students after the quiz if \"Show Results\" is enabled\n                </p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5636, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,6LAAC,6KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,6LAAC;;;;;0BACD,6LAAC,6KAAA,CAAA,SAA0B;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,6LAAC,6KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,+GAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;MAjB7C;AAoBN,UAAU,WAAW,GAAG,6KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 5713, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/MatchingEditor.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { RichTextEditor } from \"@/components/ui/editor/rich-text-editor\";\nimport { Plus, Save, Trash2, ArrowUpDown, ArrowRight } from \"lucide-react\";\nimport { QuestionType } from \"@prisma/client\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { toast } from \"@/components/ui/use-toast\";\n\ninterface Premise {\n  id: string;\n  content: string;\n}\n\ninterface Response {\n  id: string;\n  content: string;\n}\n\ninterface CorrectPair {\n  premiseId: string;\n  responseId: string;\n}\n\ninterface MatchingEditorProps {\n  questionId?: string;\n  initialData?: {\n    content: string;\n    points: number;\n    order: number;\n    explanation?: string | null;\n    options?: Array<{\n      id?: string;\n      content: string;\n      group?: string;\n      matchId?: string;\n    }>;\n    metadata?: {\n      shuffleOptions?: boolean;\n    } | null;\n  };\n  onSave: (data: any) => Promise<void>;\n  onCancel: () => void;\n}\n\nexport function MatchingEditor({\n  questionId,\n  initialData,\n  onSave,\n  onCancel\n}: MatchingEditorProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"content\");\n  \n  const [content, setContent] = useState(initialData?.content || \"\");\n  const [points, setPoints] = useState(initialData?.points || 10);\n  const [order, setOrder] = useState(initialData?.order || 0);\n  const [explanation, setExplanation] = useState(initialData?.explanation || \"\");\n  \n  // Generate a unique ID for client-side use only\n  // Format: id_[random string] - this prefix helps us identify client-generated IDs \n  // vs. server-generated IDs when sending data to the API\n  const generateId = () => `id_${Math.random().toString(36).substr(2, 9)}`;\n  \n  // Process existing options if available\n  const processInitialOptions = () => {\n    if (!initialData?.options || initialData.options.length === 0) {\n      return {\n        premises: [\n          { id: generateId(), content: \"\" },\n          { id: generateId(), content: \"\" }\n        ],\n        responses: [\n          { id: generateId(), content: \"\" },\n          { id: generateId(), content: \"\" }\n        ],\n        correctPairs: []\n      };\n    }\n    \n    // Extract premises and responses from options\n    const premises: Premise[] = [];\n    const responses: Response[] = [];\n    const correctPairs: CorrectPair[] = [];\n    \n    // Use consistent group identifiers: 'premise' and 'response'\n    const premiseOptions = initialData.options.filter(o => o.group === 'premise');\n    const responseOptions = initialData.options.filter(o => o.group === 'response');\n    \n    // Compatibility for legacy data (if any) that used 'left'/'right' instead of 'premise'/'response'\n    if (premiseOptions.length === 0) {\n      premiseOptions.push(...initialData.options.filter(o => o.group === 'left'));\n    }\n    if (responseOptions.length === 0) {\n      responseOptions.push(...initialData.options.filter(o => o.group === 'right'));\n    }\n    \n    // Create premises - preserve original IDs from initialData\n    premiseOptions.forEach(option => {\n      premises.push({\n        id: option.id || generateId(), // Keep original ID if exists, generate only if needed\n        content: option.content\n      });\n    });\n    \n    // Create responses - preserve original IDs from initialData\n    responseOptions.forEach(option => {\n      responses.push({\n        id: option.id || generateId(), // Keep original ID if exists, generate only if needed\n        content: option.content\n      });\n    });\n    \n    // Create correct pairs based on matchId from premise options\n    premiseOptions.forEach(premiseOption => {\n      if (premiseOption.matchId) {\n        // Find the premise and response objects using exact ID matches\n        const premise = premises.find(p => p.id === premiseOption.id);\n        \n        // Only create a pair if both premise and matchId exist\n        if (premise) {\n          correctPairs.push({\n            premiseId: premise.id,\n            responseId: premiseOption.matchId\n          });\n        }\n      }\n    });\n    \n    // If we don't have enough items, add empty ones\n    if (premises.length < 2) {\n      while (premises.length < 2) {\n        premises.push({ id: generateId(), content: \"\" });\n      }\n    }\n    \n    if (responses.length < 2) {\n      while (responses.length < 2) {\n        responses.push({ id: generateId(), content: \"\" });\n      }\n    }\n    \n    return { premises, responses, correctPairs };\n  };\n  \n  const initialState = processInitialOptions();\n  \n  // Separate state for premises, responses, and correct pairs\n  const [premises, setPremises] = useState<Premise[]>(initialState.premises);\n  const [responses, setResponses] = useState<Response[]>(initialState.responses);\n  const [correctPairs, setCorrectPairs] = useState<CorrectPair[]>(\n    initialState.correctPairs.length > 0 \n      ? initialState.correctPairs \n      : [{ \n          premiseId: initialState.premises[0]?.id || '', \n          responseId: initialState.responses[0]?.id || '' \n        }]\n  );\n  \n  // Metadata\n  const [shuffleOptions, setShuffleOptions] = useState<boolean>(\n    initialData?.metadata?.shuffleOptions ?? true\n  );\n  \n  // Premise management functions\n  const addPremise = () => {\n    setPremises([...premises, { id: generateId(), content: \"\" }]);\n  };\n\n  const updatePremise = (id: string, content: string) => {\n    setPremises(premises.map(premise => \n      premise.id === id ? { ...premise, content } : premise\n    ));\n  };\n\n  const removePremise = (id: string) => {\n    if (premises.length <= 2) return; // Keep at least two premises\n    \n    // Remove the premise\n    setPremises(premises.filter(premise => premise.id !== id));\n    \n    // Also remove any correct pairs that use this premise\n    setCorrectPairs(correctPairs.filter(pair => pair.premiseId !== id));\n  };\n  \n  // Response management functions\n  const addResponse = () => {\n    setResponses([...responses, { id: generateId(), content: \"\" }]);\n  };\n\n  const updateResponse = (id: string, content: string) => {\n    setResponses(responses.map(response => \n      response.id === id ? { ...response, content } : response\n    ));\n  };\n\n  const removeResponse = (id: string) => {\n    if (responses.length <= 2) return; // Keep at least two responses\n    \n    // Remove the response\n    setResponses(responses.filter(response => response.id !== id));\n    \n    // Also remove any correct pairs that use this response\n    setCorrectPairs(correctPairs.filter(pair => pair.responseId !== id));\n  };\n  \n  // Correct pairs management functions\n  const addCorrectPair = () => {\n    setCorrectPairs([...correctPairs, { \n      premiseId: premises.length > 0 ? premises[0].id : '',\n      responseId: responses.length > 0 ? responses[0].id : ''\n    }]);\n  };\n\n  const updateCorrectPair = (index: number, field: 'premiseId' | 'responseId', value: string) => {\n    const newPairs = [...correctPairs];\n    newPairs[index] = { ...newPairs[index], [field]: value };\n    setCorrectPairs(newPairs);\n  };\n\n  const removeCorrectPair = (index: number) => {\n    if (correctPairs.length <= 1) return; // Keep at least one pair\n    \n    const newPairs = [...correctPairs];\n    newPairs.splice(index, 1);\n    setCorrectPairs(newPairs);\n  };\n\n  // Utility function to get premise/response content by ID\n  const getPremiseContent = (id: string) => {\n    const premise = premises.find(p => p.id === id);\n    return premise ? premise.content : 'Select an item';\n  };\n\n  const getResponseContent = (id: string) => {\n    const response = responses.find(r => r.id === id);\n    return response ? response.content : 'Select a response';\n  };\n  \n  // Handle saving the question\n  const handleSave = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Validate premises and responses\n      const validPremises = premises.filter(p => p.content.trim() !== \"\");\n      const validResponses = responses.filter(r => r.content.trim() !== \"\");\n      \n      if (validPremises.length < 2) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please add at least two items with content.\",\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n        return;\n      }\n      \n      if (validResponses.length < 2) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please add at least two responses with content.\",\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n        return;\n      }\n      \n      // Validate correct pairs\n      const validPairs = correctPairs.filter(\n        pair => \n          pair.premiseId && \n          pair.responseId && \n          validPremises.some(p => p.id === pair.premiseId) &&\n          validResponses.some(r => r.id === pair.responseId)\n      );\n      \n      if (validPairs.length < 1) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Please create at least one valid matching pair.\",\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n        return;\n      }\n      \n      // Format data for API\n      // Convert premises and responses to options format\n      // IMPORTANT: We now preserve ALL IDs, including client-generated ones (id_*)\n      // This allows the server to maintain correct matchId relationships\n      const options = [\n        // Premises (left column)\n        ...validPremises.map((premise, index) => {\n          return {\n            id: premise.id, // Always include ID, even if client-generated\n            content: premise.content,\n            group: 'premise',  // Always use 'premise' as the group identifier\n            order: index\n          };\n        }),\n        \n        // Responses (right column)\n        ...validResponses.map((response, index) => {\n          return {\n            id: response.id, // Always include ID, even if client-generated\n            content: response.content,\n            group: 'response',  // Always use 'response' as the group identifier\n            order: index\n          };\n        })\n      ];\n      \n      // Add matchId to options based on correctPairs\n      const optionsWithMatches = options.map(option => {\n        // For premises, find if they are in a correctPair\n        if (option.group === 'premise') {\n          const premise = validPremises.find(p => p.id === option.id);\n          \n          if (premise) {\n            const pair = validPairs.find(p => p.premiseId === premise.id);\n            if (pair) {\n              // Find the response option that matches this pair\n              const responseOption = options.find(o => \n                o.group === 'response' && o.id === pair.responseId\n              );\n              \n              // Use the response's ID as matchId\n              return {\n                ...option,\n                matchId: pair.responseId // Use the responseId directly from the pair\n              };\n            }\n          }\n        }\n        // For responses, the matchId is not needed (it's set on the premise)\n        return option;\n      });\n      \n      // Metadata\n      const metadata = {\n        shuffleOptions,\n      };\n      \n      // Final data structure\n      const finalData = {\n        type: QuestionType.MATCHING,\n        content,\n        points,\n        order,\n        explanation,\n        options: optionsWithMatches,\n        metadata\n      };\n      \n      await onSave(finalData);\n    } catch (error) {\n      console.error(\"Error saving matching question:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save the matching question. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>{questionId ? \"Edit Matching Question\" : \"New Matching Question\"}</span>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={isLoading}>\n                {isLoading ? (\n                  <>Saving...</>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Question\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"content\">Question Content</TabsTrigger>\n              <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"content\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Question Content</Label>\n                <RichTextEditor \n                  content={content}\n                  onChange={setContent}\n                  placeholder=\"Enter matching question instructions...\"\n                  minHeight=\"150px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Provide instructions for the matching question (e.g., \"Match the terms with their definitions\").\n                </p>\n              </div>\n              \n              <div className=\"space-y-4 pt-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-lg font-medium\">Matching Items</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"shuffleOptions\"\n                      checked={shuffleOptions}\n                      onCheckedChange={(checked: boolean) => setShuffleOptions(checked)}\n                    />\n                    <Label htmlFor=\"shuffleOptions\">Shuffle responses</Label>\n                  </div>\n                </div>\n                \n                {/* Premises Section */}\n                <div className=\"space-y-2 border p-4 rounded-md\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"font-medium\">Premises (Left Column)</Label>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={addPremise}\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Premise\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Create premises for the left column that students will match with responses.\n                  </p>\n                  \n                  <ScrollArea className=\"h-[200px] pr-4\">\n                    <div className=\"space-y-2\">\n                      {premises.map((premise) => (\n                        <div key={premise.id} className=\"flex items-center gap-2\">\n                          <Input\n                            value={premise.content}\n                            onChange={(e) => updatePremise(premise.id, e.target.value)}\n                            placeholder=\"Enter premise text\"\n                            className=\"flex-1\"\n                          />\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => removePremise(premise.id)}\n                            disabled={premises.length <= 2}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </div>\n\n                {/* Responses section will go here */}\n                <div className=\"space-y-2 border p-4 rounded-md\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"font-medium\">Responses (Right Column)</Label>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={addResponse}\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Response\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Create responses for the right column that students will match with premises.\n                  </p>\n                  \n                  <ScrollArea className=\"h-[200px] pr-4\">\n                    <div className=\"space-y-2\">\n                      {responses.map((response) => (\n                        <div key={response.id} className=\"flex items-center gap-2\">\n                          <Input\n                            value={response.content}\n                            onChange={(e) => updateResponse(response.id, e.target.value)}\n                            placeholder=\"Enter response text\"\n                            className=\"flex-1\"\n                          />\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => removeResponse(response.id)}\n                            disabled={responses.length <= 2}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                </div>\n                \n                {/* Correct Pairs section will go here */}\n                <div className=\"space-y-2 border p-4 rounded-md mt-4 bg-muted/30\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"font-medium\">Create Correct Matches</Label>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={addCorrectPair}\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Match\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Define which premises match with which responses (correct answers).\n                  </p>\n                  \n                  <div className=\"space-y-3\">\n                    {correctPairs.length === 0 ? (\n                      <div className=\"text-center p-4 border border-dashed rounded-md text-muted-foreground\">\n                        No matches defined yet. Click \"Add Match\" to create one.\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        <div className=\"grid grid-cols-[1fr_auto_1fr_auto] gap-2 items-center font-medium\">\n                          <div>Premise</div>\n                          <div></div>\n                          <div>Response</div>\n                          <div></div>\n                        </div>\n                        \n                        {correctPairs.map((pair, index) => (\n                          <div key={index} className=\"grid grid-cols-[1fr_auto_1fr_auto] gap-2 items-center\">\n                            {/* Premise selector */}\n                            <Select\n                              value={pair.premiseId}\n                              onValueChange={(value) => updateCorrectPair(index, 'premiseId', value)}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a premise\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {premises.map((premise) => (\n                                  <SelectItem key={premise.id} value={premise.id}>\n                                    {premise.content || \"<Empty premise>\"}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            \n                            {/* Arrow icon */}\n                            <div className=\"flex justify-center\">\n                              <ArrowRight className=\"h-4 w-4\" />\n                            </div>\n                            \n                            {/* Response selector */}\n                            <Select\n                              value={pair.responseId}\n                              onValueChange={(value) => updateCorrectPair(index, 'responseId', value)}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a response\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {responses.map((response) => (\n                                  <SelectItem key={response.id} value={response.id}>\n                                    {response.content || \"<Empty response>\"}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            \n                            {/* Delete button */}\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => removeCorrectPair(index)}\n                              disabled={correctPairs.length <= 1}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"points\">Points</Label>\n                  <Input\n                    id=\"points\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={points}\n                    onChange={(e) => setPoints(Number(e.target.value))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"order\">Display Order</Label>\n                  <Input\n                    id=\"order\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={order}\n                    onChange={(e) => setOrder(Number(e.target.value))}\n                  />\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"settings\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Answer Explanation (Optional)</Label>\n                <RichTextEditor \n                  content={explanation}\n                  onChange={setExplanation}\n                  placeholder=\"Enter explanation of the correct pairs...\"\n                  minHeight=\"150px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  This will be shown to students after the quiz if \"Show Results\" is enabled\n                </p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6820, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/FillBlankEditor.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { RichTextEditor } from \"@/components/ui/editor/rich-text-editor\";\nimport { \n  Save, \n  Plus, \n  PlusCircle, \n  Trash2, \n  AlertCircle \n} from \"lucide-react\";\nimport { QuestionType } from \"@prisma/client\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger,\n  DialogClose\n} from \"@/components/ui/dialog\";\n\ninterface Blank {\n  id: string;\n  correctAnswers: string[];\n  caseSensitive: boolean;\n  points?: number;\n}\n\ninterface FillBlankEditorProps {\n  questionId?: string;\n  initialData?: {\n    content: string;\n    points: number;\n    order: number;\n    explanation?: string | null;\n    blanks?: Blank[];\n    metadata?: {\n      template?: string;\n    } | null;\n  };\n  onSave: (data: any) => Promise<void>;\n  onCancel: () => void;\n}\n\n// Generate a unique ID for blanks\nconst generateId = () => `blank_${Math.random().toString(36).substr(2, 9)}`;\n\nexport function FillBlankEditor({\n  questionId,\n  initialData,\n  onSave,\n  onCancel\n}: FillBlankEditorProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"content\");\n  \n  const [content, setContent] = useState(initialData?.content || \"\");\n  const [points, setPoints] = useState(initialData?.points || 10);\n  const [order, setOrder] = useState(initialData?.order || 0);\n  const [explanation, setExplanation] = useState(initialData?.explanation || \"\");\n  \n  // Template with blank markers like [blank_123]\n  const [template, setTemplate] = useState(initialData?.metadata?.template || \"\");\n  \n  // Blanks with correct answers\n  const [blanks, setBlanks] = useState<Blank[]>(\n    initialData?.blanks || []\n  );\n  \n  // Current blank being edited\n  const [currentBlankId, setCurrentBlankId] = useState<string | null>(null);\n  \n  // Add a new blank\n  const addBlank = useCallback(() => {\n    const newBlankId = generateId();\n    setBlanks([...blanks, {\n      id: newBlankId,\n      correctAnswers: [\"\"],\n      caseSensitive: false\n    }]);\n    \n    // Update template to include the new blank\n    setTemplate(prev => {\n      if (prev.trim() === \"\") {\n        return `[${newBlankId}]`;\n      }\n      return `${prev} [${newBlankId}]`;\n    });\n    \n    // Set this as the current blank being edited\n    setCurrentBlankId(newBlankId);\n  }, [blanks]);\n  \n  // Remove a blank\n  const removeBlank = (id: string) => {\n    setBlanks(blanks.filter(blank => blank.id !== id));\n    \n    // Remove the blank marker from the template\n    setTemplate(prev => prev.replace(`[${id}]`, \"\"));\n    \n    if (currentBlankId === id) {\n      setCurrentBlankId(null);\n    }\n  };\n  \n  // Add a new correct answer for a blank\n  const addCorrectAnswer = (blankId: string) => {\n    setBlanks(blanks.map(blank => {\n      if (blank.id === blankId) {\n        return {\n          ...blank,\n          correctAnswers: [...blank.correctAnswers, \"\"]\n        };\n      }\n      return blank;\n    }));\n  };\n  \n  // Remove a correct answer for a blank\n  const removeCorrectAnswer = (blankId: string, index: number) => {\n    setBlanks(blanks.map(blank => {\n      if (blank.id === blankId && blank.correctAnswers.length > 1) {\n        const newAnswers = [...blank.correctAnswers];\n        newAnswers.splice(index, 1);\n        return {\n          ...blank,\n          correctAnswers: newAnswers\n        };\n      }\n      return blank;\n    }));\n  };\n  \n  // Update a correct answer for a blank\n  const updateCorrectAnswer = (blankId: string, index: number, value: string) => {\n    setBlanks(blanks.map(blank => {\n      if (blank.id === blankId) {\n        const newAnswers = [...blank.correctAnswers];\n        newAnswers[index] = value;\n        return {\n          ...blank,\n          correctAnswers: newAnswers\n        };\n      }\n      return blank;\n    }));\n  };\n  \n  // Toggle case sensitivity for a blank\n  const toggleCaseSensitive = (blankId: string) => {\n    setBlanks(blanks.map(blank => {\n      if (blank.id === blankId) {\n        return {\n          ...blank,\n          caseSensitive: !blank.caseSensitive\n        };\n      }\n      return blank;\n    }));\n  };\n  \n  // Find a blank by ID\n  const getBlankById = (id: string) => {\n    return blanks.find(blank => blank.id === id);\n  };\n  \n  // Handle saving the question\n  const handleSave = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Validate template and blanks\n      if (!template.trim() || blanks.length === 0) {\n        alert(\"Please add at least one blank to your question.\");\n        setIsLoading(false);\n        return;\n      }\n      \n      // Check if all blanks in the template have corresponding data\n      const templateBlankIds = (template.match(/\\[(blank_[a-z0-9]+)\\]/g) || [])\n        .map(match => match.substring(1, match.length - 1));\n      \n      const blankIds = blanks.map(blank => blank.id);\n      \n      const missingTemplateIds = templateBlankIds.filter(id => !blankIds.includes(id));\n      const unusedBlankIds = blankIds.filter(id => !templateBlankIds.includes(id));\n      \n      if (missingTemplateIds.length > 0) {\n        alert(`Template contains blanks that have no definition: ${missingTemplateIds.join(\", \")}`);\n        setIsLoading(false);\n        return;\n      }\n      \n      // Create options for blanks (needed for compatibility with other question types)\n      const options = blanks.map((blank, index) => ({\n        content: blank.correctAnswers.join(\", \"),\n        isCorrect: true,\n        order: index,\n      }));\n      \n      // Create API compatible blanks array \n      const apiCompatibleBlanks = blanks.map(blank => ({\n        id: blank.id,\n        acceptableAnswers: blank.correctAnswers.filter(answer => answer.trim() !== \"\"),\n        caseSensitive: blank.caseSensitive,\n        points: blank.points || 1,\n      }));\n      \n      // Final data structure\n      const finalData = {\n        type: QuestionType.FILL_BLANK,\n        content,\n        points,\n        order,\n        explanation,\n        options,\n        // Add required fields for API schema\n        text: template,\n        blanks: apiCompatibleBlanks\n      };\n      \n      console.log(\"FillBlankEditor submitting:\", JSON.stringify(finalData, null, 2));\n      await onSave(finalData);\n    } catch (error) {\n      console.error(\"Error saving fill-in-the-blank question:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>{questionId ? \"Edit Fill in the Blank Question\" : \"New Fill in the Blank Question\"}</span>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={isLoading}>\n                {isLoading ? (\n                  <>Saving...</>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Question\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"content\">Question Content</TabsTrigger>\n              <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"content\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Question Instructions</Label>\n                <RichTextEditor \n                  content={content}\n                  onChange={setContent}\n                  placeholder=\"Enter instructions for the fill-in-the-blank question...\"\n                  minHeight=\"100px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Provide general instructions for filling in the blanks.\n                </p>\n              </div>\n              \n              <div className=\"space-y-2 pt-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-lg font-medium\">Question Template</Label>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addBlank}\n                  >\n                    <PlusCircle className=\"h-4 w-4 mr-2\" />\n                    Add Blank\n                  </Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  Create your text with blanks designated by [blank_id] markers. Add, edit, or remove blanks.\n                </p>\n                \n                <div className=\"border rounded-md p-4 bg-muted/30 min-h-[100px] whitespace-pre-wrap\">\n                  {template ? (\n                    template.split(/(\\[blank_[a-z0-9]+\\])/).map((part, index) => {\n                      if (part.match(/\\[blank_[a-z0-9]+\\]/)) {\n                        const blankId = part.substring(1, part.length - 1);\n                        return (\n                          <Button\n                            key={index}\n                            variant=\"secondary\"\n                            size=\"sm\"\n                            className=\"mx-1 px-2 py-0 h-7 bg-primary/20 hover:bg-primary/30\"\n                            onClick={() => setCurrentBlankId(blankId)}\n                          >\n                            {`[Blank ${blanks.findIndex(b => b.id === blankId) + 1}]`}\n                          </Button>\n                        );\n                      }\n                      return <span key={index}>{part}</span>;\n                    })\n                  ) : (\n                    <div className=\"text-muted-foreground italic flex items-center justify-center h-full\">\n                      <AlertCircle className=\"h-4 w-4 mr-2\" />\n                      Add blanks to create your template\n                    </div>\n                  )}\n                </div>\n                \n                <Input\n                  value={template}\n                  onChange={(e) => setTemplate(e.target.value)}\n                  placeholder=\"Type or edit your template with [blank_id] markers\"\n                  className=\"font-mono text-sm\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Advanced: You can directly edit the template format above. Use [blank_id] format for blanks.\n                </p>\n              </div>\n              \n              {currentBlankId && (\n                <div className=\"border rounded-md p-4 space-y-4 mt-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-medium\">\n                      Editing Blank {blanks.findIndex(b => b.id === currentBlankId) + 1}\n                    </h3>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => removeBlank(currentBlankId)}\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      Remove Blank\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"caseSensitive\"\n                        checked={getBlankById(currentBlankId)?.caseSensitive || false}\n                        onCheckedChange={() => toggleCaseSensitive(currentBlankId)}\n                      />\n                      <Label htmlFor=\"caseSensitive\">Case sensitive</Label>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label>Correct Answers</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Add all acceptable answers for this blank.\n                      </p>\n                      \n                      {getBlankById(currentBlankId)?.correctAnswers.map((answer, index) => (\n                        <div key={index} className=\"flex items-center space-x-2\">\n                          <Input\n                            value={answer}\n                            onChange={(e) => updateCorrectAnswer(currentBlankId, index, e.target.value)}\n                            placeholder={`Correct answer ${index + 1}`}\n                          />\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => removeCorrectAnswer(currentBlankId, index)}\n                            disabled={getBlankById(currentBlankId)?.correctAnswers.length === 1}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => addCorrectAnswer(currentBlankId)}\n                        className=\"mt-2\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Another Correct Answer\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"points\">Points</Label>\n                  <Input\n                    id=\"points\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={points}\n                    onChange={(e) => setPoints(Number(e.target.value))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"order\">Display Order</Label>\n                  <Input\n                    id=\"order\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={order}\n                    onChange={(e) => setOrder(Number(e.target.value))}\n                  />\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"settings\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Answer Explanation (Optional)</Label>\n                <RichTextEditor \n                  content={explanation}\n                  onChange={setExplanation}\n                  placeholder=\"Enter explanation of the correct answers...\"\n                  minHeight=\"150px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  This will be shown to students after the quiz if \"Show Results\" is enabled\n                </p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7584, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/CodeEditor.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RichTextEditor } from \"@/components/ui/editor/rich-text-editor\";\nimport { Save } from \"lucide-react\";\nimport { QuestionType } from \"@prisma/client\";\n\n// Programming languages supported by the code editor\nconst LANGUAGES = [\n  { value: \"javascript\", label: \"JavaScript\" },\n  { value: \"python\", label: \"Python\" },\n  { value: \"java\", label: \"Java\" },\n  { value: \"csharp\", label: \"C#\" },\n  { value: \"cpp\", label: \"C++\" },\n  { value: \"php\", label: \"PHP\" },\n  { value: \"ruby\", label: \"Ruby\" },\n  { value: \"go\", label: \"Go\" },\n  { value: \"rust\", label: \"Rust\" },\n  { value: \"typescript\", label: \"TypeScript\" },\n  { value: \"swift\", label: \"Swift\" },\n  { value: \"kotlin\", label: \"Kotlin\" },\n  { value: \"sql\", label: \"SQL\" },\n  { value: \"html\", label: \"HTML\" },\n  { value: \"css\", label: \"CSS\" },\n];\n\ninterface CodeEditorProps {\n  questionId?: string;\n  initialData?: {\n    content: string;\n    points: number;\n    order: number;\n    explanation?: string | null;\n    metadata?: {\n      language?: string;\n      starterCode?: string;\n      expectedOutput?: string;\n      testCases?: Array<{\n        input: string;\n        output: string;\n        hidden?: boolean;\n      }>;\n    } | null;\n  };\n  onSave: (data: any) => Promise<void>;\n  onCancel: () => void;\n}\n\nexport function CodeEditor({\n  questionId,\n  initialData,\n  onSave,\n  onCancel\n}: CodeEditorProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"content\");\n  \n  const [content, setContent] = useState(initialData?.content || \"\");\n  const [points, setPoints] = useState(initialData?.points || 10);\n  const [order, setOrder] = useState(initialData?.order || 0);\n  const [explanation, setExplanation] = useState(initialData?.explanation || \"\");\n  \n  // Code-specific metadata\n  const [language, setLanguage] = useState(initialData?.metadata?.language || \"javascript\");\n  const [starterCode, setStarterCode] = useState(initialData?.metadata?.starterCode || \"\");\n  const [expectedOutput, setExpectedOutput] = useState(initialData?.metadata?.expectedOutput || \"\");\n  \n  // Test cases\n  const [testCases, setTestCases] = useState<Array<{\n    input: string;\n    output: string;\n    hidden: boolean;\n    id: string;\n  }>>(\n    initialData?.metadata?.testCases?.map(tc => ({\n      ...tc,\n      hidden: tc.hidden || false,\n      id: Math.random().toString(36).substring(2),\n    })) || [\n      {\n        input: \"\",\n        output: \"\",\n        hidden: false,\n        id: Math.random().toString(36).substring(2),\n      }\n    ]\n  );\n  \n  // Add a new test case\n  const addTestCase = () => {\n    setTestCases([\n      ...testCases,\n      {\n        input: \"\",\n        output: \"\",\n        hidden: false,\n        id: Math.random().toString(36).substring(2),\n      }\n    ]);\n  };\n  \n  // Remove a test case\n  const removeTestCase = (id: string) => {\n    if (testCases.length <= 1) return; // Keep at least one test case\n    setTestCases(testCases.filter(tc => tc.id !== id));\n  };\n  \n  // Update a test case\n  const updateTestCase = (\n    id: string, \n    field: \"input\" | \"output\" | \"hidden\", \n    value: string | boolean\n  ) => {\n    setTestCases(\n      testCases.map(tc => {\n        if (tc.id === id) {\n          return { ...tc, [field]: value };\n        }\n        return tc;\n      })\n    );\n  };\n  \n  // Handle saving the question\n  const handleSave = async () => {\n    setIsLoading(true);\n    \n    try {\n      // Clean up test cases for saving (remove id)\n      const cleanedTestCases = testCases.map(({ id, ...rest }) => rest);\n      \n      // Validate language selection\n      if (!language) {\n        alert(\"Please select a programming language.\");\n        setIsLoading(false);\n        return;\n      }\n      \n      // Create final data structure\n      const finalData = {\n        type: QuestionType.CODE,\n        content,\n        points,\n        order,\n        explanation,\n        options: [], // Code questions don't use standard options, but API might expect an array\n        language, // Add required field for API schema\n        defaultCode: starterCode,\n        solutionCode: expectedOutput || \"// Expected solution would go here\", // Required field for API schema\n          testCases: cleanedTestCases,\n      };\n      \n      console.log(\"CodeEditor submitting:\", JSON.stringify(finalData, null, 2));\n      await onSave(finalData);\n    } catch (error) {\n      console.error(\"Error saving code question:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>{questionId ? \"Edit Code Question\" : \"New Code Question\"}</span>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={isLoading}>\n                {isLoading ? (\n                  <>Saving...</>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Question\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"content\">Question Content</TabsTrigger>\n              <TabsTrigger value=\"code\">Code Setup</TabsTrigger>\n              <TabsTrigger value=\"testing\">Test Cases</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"content\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label>Question Content</Label>\n                <RichTextEditor \n                  content={content}\n                  onChange={setContent}\n                  placeholder=\"Enter coding problem description...\"\n                  minHeight=\"200px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Describe the problem students need to solve with code.\n                </p>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"points\">Points</Label>\n                  <Input\n                    id=\"points\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={points}\n                    onChange={(e) => setPoints(Number(e.target.value))}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"order\">Display Order</Label>\n                  <Input\n                    id=\"order\"\n                    type=\"number\"\n                    min=\"0\"\n                    value={order}\n                    onChange={(e) => setOrder(Number(e.target.value))}\n                  />\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"code\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"language\">Programming Language</Label>\n                <Select \n                  value={language} \n                  onValueChange={setLanguage}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a language\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {LANGUAGES.map((lang) => (\n                      <SelectItem key={lang.value} value={lang.value}>\n                        {lang.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select the programming language for this question.\n                </p>\n              </div>\n              \n              <div className=\"space-y-2 pt-4\">\n                <Label htmlFor=\"starterCode\">Starter Code (Template)</Label>\n                <Textarea\n                  id=\"starterCode\"\n                  placeholder={`// Starter code that will be provided to students\\nfunction solve() {\\n  // TODO: Implement this function\\n  \\n}`}\n                  className=\"font-mono h-40\"\n                  value={starterCode}\n                  onChange={(e) => setStarterCode(e.target.value)}\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Provide starter code for students to begin with. This template will be shown in the code editor.\n                </p>\n              </div>\n              \n              <div className=\"space-y-2 pt-4\">\n                <Label htmlFor=\"expectedOutput\">Expected Output Format (Optional)</Label>\n                <Textarea\n                  id=\"expectedOutput\"\n                  placeholder=\"Describe the expected output format, e.g. 'Return an integer representing...'\"\n                  className=\"h-24\"\n                  value={expectedOutput}\n                  onChange={(e) => setExpectedOutput(e.target.value)}\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Describe the expected format of the output or return value.\n                </p>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"testing\" className=\"space-y-4 pt-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-lg font-medium\">Test Cases</Label>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addTestCase}\n                  >\n                    Add Test Case\n                  </Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  Create test cases to verify student solutions. Hidden test cases are not shown to students.\n                </p>\n                \n                <div className=\"space-y-4\">\n                  {testCases.map((testCase, index) => (\n                    <div key={testCase.id} className=\"border rounded-md p-4 space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"font-medium\">Test Case {index + 1}</h3>\n                        <div className=\"flex gap-2 items-center\">\n                          <Label htmlFor={`hidden-${testCase.id}`} className=\"text-sm\">\n                            Hidden\n                          </Label>\n                          <input\n                            id={`hidden-${testCase.id}`}\n                            type=\"checkbox\"\n                            checked={testCase.hidden}\n                            onChange={(e) => updateTestCase(testCase.id, \"hidden\", e.target.checked)}\n                            className=\"h-4 w-4\"\n                          />\n                          {testCases.length > 1 && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeTestCase(testCase.id)}\n                            >\n                              Remove\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor={`input-${testCase.id}`}>Input</Label>\n                        <Textarea\n                          id={`input-${testCase.id}`}\n                          placeholder=\"Enter test case input data\"\n                          className=\"font-mono h-20\"\n                          value={testCase.input}\n                          onChange={(e) => updateTestCase(testCase.id, \"input\", e.target.value)}\n                        />\n                        <p className=\"text-xs text-muted-foreground\">\n                          Input parameters or data for the test case. Format according to your language.\n                        </p>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor={`output-${testCase.id}`}>Expected Output</Label>\n                        <Textarea\n                          id={`output-${testCase.id}`}\n                          placeholder=\"Enter expected output\"\n                          className=\"font-mono h-20\"\n                          value={testCase.output}\n                          onChange={(e) => updateTestCase(testCase.id, \"output\", e.target.value)}\n                        />\n                        <p className=\"text-xs text-muted-foreground\">\n                          The expected output or return value for this input.\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"space-y-2 pt-4\">\n                <Label>Answer Explanation (Optional)</Label>\n                <RichTextEditor \n                  content={explanation}\n                  onChange={setExplanation}\n                  placeholder=\"Enter explanation of the solution approach...\"\n                  minHeight=\"150px\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  This will be shown to students after the quiz if \"Show Results\" is enabled\n                </p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAZA;;;;;;;;;;;;AAcA,qDAAqD;AACrD,MAAM,YAAY;IAChB;QAAE,OAAO;QAAc,OAAO;IAAa;IAC3C;QAAE,OAAO;QAAU,OAAO;IAAS;IACnC;QAAE,OAAO;QAAQ,OAAO;IAAO;IAC/B;QAAE,OAAO;QAAU,OAAO;IAAK;IAC/B;QAAE,OAAO;QAAO,OAAO;IAAM;IAC7B;QAAE,OAAO;QAAO,OAAO;IAAM;IAC7B;QAAE,OAAO;QAAQ,OAAO;IAAO;IAC/B;QAAE,OAAO;QAAM,OAAO;IAAK;IAC3B;QAAE,OAAO;QAAQ,OAAO;IAAO;IAC/B;QAAE,OAAO;QAAc,OAAO;IAAa;IAC3C;QAAE,OAAO;QAAS,OAAO;IAAQ;IACjC;QAAE,OAAO;QAAU,OAAO;IAAS;IACnC;QAAE,OAAO;QAAO,OAAO;IAAM;IAC7B;QAAE,OAAO;QAAQ,OAAO;IAAO;IAC/B;QAAE,OAAO;QAAO,OAAO;IAAM;CAC9B;AAwBM,SAAS,WAAW,EACzB,UAAU,EACV,WAAW,EACX,MAAM,EACN,QAAQ,EACQ;;IAChB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,aAAa,WAAW;IAC/D,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,aAAa,UAAU;IAC5D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,aAAa,SAAS;IACzD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,aAAa,eAAe;IAE3E,yBAAyB;IACzB,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,aAAa,UAAU,YAAY;IAC5E,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,aAAa,UAAU,eAAe;IACrF,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,aAAa,UAAU,kBAAkB;IAE9F,aAAa;IACb,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAMvC,aAAa,UAAU,WAAW;+BAAI,CAAA,KAAM,CAAC;gBAC3C,GAAG,EAAE;gBACL,QAAQ,GAAG,MAAM,IAAI;gBACrB,IAAI,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC;YAC3C,CAAC;iCAAM;QACL;YACE,OAAO;YACP,QAAQ;YACR,QAAQ;YACR,IAAI,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC;QAC3C;KACD;IAGH,sBAAsB;IACtB,MAAM,cAAc;QAClB,aAAa;eACR;YACH;gBACE,OAAO;gBACP,QAAQ;gBACR,QAAQ;gBACR,IAAI,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC;YAC3C;SACD;IACH;IAEA,qBAAqB;IACrB,MAAM,iBAAiB,CAAC;QACtB,IAAI,UAAU,MAAM,IAAI,GAAG,QAAQ,8BAA8B;QACjE,aAAa,UAAU,MAAM,CAAC,CAAA,KAAM,GAAG,EAAE,KAAK;IAChD;IAEA,qBAAqB;IACrB,MAAM,iBAAiB,CACrB,IACA,OACA;QAEA,aACE,UAAU,GAAG,CAAC,CAAA;YACZ,IAAI,GAAG,EAAE,KAAK,IAAI;gBAChB,OAAO;oBAAE,GAAG,EAAE;oBAAE,CAAC,MAAM,EAAE;gBAAM;YACjC;YACA,OAAO;QACT;IAEJ;IAEA,6BAA6B;IAC7B,MAAM,aAAa;QACjB,aAAa;QAEb,IAAI;YACF,6CAA6C;YAC7C,MAAM,mBAAmB,UAAU,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,GAAK;YAE5D,8BAA8B;YAC9B,IAAI,CAAC,UAAU;gBACb,MAAM;gBACN,aAAa;gBACb;YACF;YAEA,8BAA8B;YAC9B,MAAM,YAAY;gBAChB,MAAM,yJAAA,CAAA,eAAY,CAAC,IAAI;gBACvB;gBACA;gBACA;gBACA;gBACA,SAAS,EAAE;gBACX;gBACA,aAAa;gBACb,cAAc,kBAAkB;gBAC9B,WAAW;YACf;YAEA,QAAQ,GAAG,CAAC,0BAA0B,KAAK,SAAS,CAAC,WAAW,MAAM;YACtE,MAAM,OAAO;QACf,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,+BAA+B;QAC/C,SAAU;YACR,aAAa;QACf;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,4HAAA,CAAA,OAAI;;8BACH,6LAAC,4HAAA,CAAA,aAAU;8BACT,cAAA,6LAAC,4HAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,6LAAC;0CAAM,aAAa,uBAAuB;;;;;;0CAC3C,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,8HAAA,CAAA,SAAM;wCAAC,SAAQ;wCAAU,SAAS;wCAAU,UAAU;kDAAW;;;;;;kDAGlE,6LAAC,8HAAA,CAAA,SAAM;wCAAC,SAAS;wCAAY,UAAU;kDACpC,0BACC;sDAAE;0EAEF;;8DACE,6LAAC,qMAAA,CAAA,OAAI;oDAAC,WAAU;;;;;;gDAAiB;;;;;;;;;;;;;;;;;;;;;;;;;8BAQ7C,6LAAC,4HAAA,CAAA,cAAW;8BACV,cAAA,6LAAC,4HAAA,CAAA,OAAI;wBAAC,OAAO;wBAAW,eAAe;;0CACrC,6LAAC,4HAAA,CAAA,WAAQ;gCAAC,WAAU;;kDAClB,6LAAC,4HAAA,CAAA,cAAW;wCAAC,OAAM;kDAAU;;;;;;kDAC7B,6LAAC,4HAAA,CAAA,cAAW;wCAAC,OAAM;kDAAO;;;;;;kDAC1B,6LAAC,4HAAA,CAAA,cAAW;wCAAC,OAAM;kDAAU;;;;;;;;;;;;0CAG/B,6LAAC,4HAAA,CAAA,cAAW;gCAAC,OAAM;gCAAU,WAAU;;kDACrC,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,6HAAA,CAAA,QAAK;0DAAC;;;;;;0DACP,6LAAC,wJAAA,CAAA,iBAAc;gDACb,SAAS;gDACT,UAAU;gDACV,aAAY;gDACZ,WAAU;;;;;;0DAEZ,6LAAC;gDAAE,WAAU;0DAAgC;;;;;;;;;;;;kDAK/C,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;;kEACb,6LAAC,6HAAA,CAAA,QAAK;wDAAC,SAAQ;kEAAS;;;;;;kEACxB,6LAAC,6HAAA,CAAA,QAAK;wDACJ,IAAG;wDACH,MAAK;wDACL,KAAI;wDACJ,OAAO;wDACP,UAAU,CAAC,IAAM,UAAU,OAAO,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;0DAGpD,6LAAC;gDAAI,WAAU;;kEACb,6LAAC,6HAAA,CAAA,QAAK;wDAAC,SAAQ;kEAAQ;;;;;;kEACvB,6LAAC,6HAAA,CAAA,QAAK;wDACJ,IAAG;wDACH,MAAK;wDACL,KAAI;wDACJ,OAAO;wDACP,UAAU,CAAC,IAAM,SAAS,OAAO,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;;;;;;;;;;;;;0CAMvD,6LAAC,4HAAA,CAAA,cAAW;gCAAC,OAAM;gCAAO,WAAU;;kDAClC,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,6HAAA,CAAA,QAAK;gDAAC,SAAQ;0DAAW;;;;;;0DAC1B,6LAAC,8HAAA,CAAA,SAAM;gDACL,OAAO;gDACP,eAAe;;kEAEf,6LAAC,8HAAA,CAAA,gBAAa;kEACZ,cAAA,6LAAC,8HAAA,CAAA,cAAW;4DAAC,aAAY;;;;;;;;;;;kEAE3B,6LAAC,8HAAA,CAAA,gBAAa;kEACX,UAAU,GAAG,CAAC,CAAC,qBACd,6LAAC,8HAAA,CAAA,aAAU;gEAAkB,OAAO,KAAK,KAAK;0EAC3C,KAAK,KAAK;+DADI,KAAK,KAAK;;;;;;;;;;;;;;;;0DAMjC,6LAAC;gDAAE,WAAU;0DAAgC;;;;;;;;;;;;kDAK/C,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,6HAAA,CAAA,QAAK;gDAAC,SAAQ;0DAAc;;;;;;0DAC7B,6LAAC,gIAAA,CAAA,WAAQ;gDACP,IAAG;gDACH,aAAa,CAAC,gHAAgH,CAAC;gDAC/H,WAAU;gDACV,OAAO;gDACP,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;;;;;;0DAEhD,6LAAC;gDAAE,WAAU;0DAAgC;;;;;;;;;;;;kDAK/C,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,6HAAA,CAAA,QAAK;gDAAC,SAAQ;0DAAiB;;;;;;0DAChC,6LAAC,gIAAA,CAAA,WAAQ;gDACP,IAAG;gDACH,aAAY;gDACZ,WAAU;gDACV,OAAO;gDACP,UAAU,CAAC,IAAM,kBAAkB,EAAE,MAAM,CAAC,KAAK;;;;;;0DAEnD,6LAAC;gDAAE,WAAU;0DAAgC;;;;;;;;;;;;;;;;;;0CAMjD,6LAAC,4HAAA,CAAA,cAAW;gCAAC,OAAM;gCAAU,WAAU;;kDACrC,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;;kEACb,6LAAC,6HAAA,CAAA,QAAK;wDAAC,WAAU;kEAAsB;;;;;;kEACvC,6LAAC,8HAAA,CAAA,SAAM;wDACL,SAAQ;wDACR,MAAK;wDACL,SAAS;kEACV;;;;;;;;;;;;0DAIH,6LAAC;gDAAE,WAAU;0DAAqC;;;;;;0DAIlD,6LAAC;gDAAI,WAAU;0DACZ,UAAU,GAAG,CAAC,CAAC,UAAU,sBACxB,6LAAC;wDAAsB,WAAU;;0EAC/B,6LAAC;gEAAI,WAAU;;kFACb,6LAAC;wEAAG,WAAU;;4EAAc;4EAAW,QAAQ;;;;;;;kFAC/C,6LAAC;wEAAI,WAAU;;0FACb,6LAAC,6HAAA,CAAA,QAAK;gFAAC,SAAS,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE;gFAAE,WAAU;0FAAU;;;;;;0FAG7D,6LAAC;gFACC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE;gFAC3B,MAAK;gFACL,SAAS,SAAS,MAAM;gFACxB,UAAU,CAAC,IAAM,eAAe,SAAS,EAAE,EAAE,UAAU,EAAE,MAAM,CAAC,OAAO;gFACvE,WAAU;;;;;;4EAEX,UAAU,MAAM,GAAG,mBAClB,6LAAC,8HAAA,CAAA,SAAM;gFACL,SAAQ;gFACR,MAAK;gFACL,SAAS,IAAM,eAAe,SAAS,EAAE;0FAC1C;;;;;;;;;;;;;;;;;;0EAOP,6LAAC;gEAAI,WAAU;;kFACb,6LAAC,6HAAA,CAAA,QAAK;wEAAC,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;kFAAE;;;;;;kFACxC,6LAAC,gIAAA,CAAA,WAAQ;wEACP,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;wEAC1B,aAAY;wEACZ,WAAU;wEACV,OAAO,SAAS,KAAK;wEACrB,UAAU,CAAC,IAAM,eAAe,SAAS,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,KAAK;;;;;;kFAEtE,6LAAC;wEAAE,WAAU;kFAAgC;;;;;;;;;;;;0EAK/C,6LAAC;gEAAI,WAAU;;kFACb,6LAAC,6HAAA,CAAA,QAAK;wEAAC,SAAS,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE;kFAAE;;;;;;kFACzC,6LAAC,gIAAA,CAAA,WAAQ;wEACP,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE;wEAC3B,aAAY;wEACZ,WAAU;wEACV,OAAO,SAAS,MAAM;wEACtB,UAAU,CAAC,IAAM,eAAe,SAAS,EAAE,EAAE,UAAU,EAAE,MAAM,CAAC,KAAK;;;;;;kFAEvE,6LAAC;wEAAE,WAAU;kFAAgC;;;;;;;;;;;;;uDAjDvC,SAAS,EAAE;;;;;;;;;;;;;;;;kDA0D3B,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,6HAAA,CAAA,QAAK;0DAAC;;;;;;0DACP,6LAAC,wJAAA,CAAA,iBAAc;gDACb,SAAS;gDACT,UAAU;gDACV,aAAY;gDACZ,WAAU;;;;;;0DAEZ,6LAAC;gDAAE,WAAU;0DAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAU7D;GAxUgB;KAAA","debugId":null}},
    {"offset": {"line": 8394, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/components/DynamicQuestionEditor.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { QuestionType } from \"@prisma/client\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2 } from \"lucide-react\";\nimport { normalizeMetadata, prepareMetadataForDB } from \"@/lib/utils\";\n\n// Import all question editors\nimport { MultipleChoiceEditor } from \"./MultipleChoiceEditor\";\nimport { EssayQuestionEditor } from \"./EssayQuestionEditor\";\nimport { TrueFalseEditor } from \"./TrueFalseEditor\";\nimport { ShortAnswerEditor } from \"./ShortAnswerEditor\";\nimport { MatchingEditor } from \"./MatchingEditor\";\nimport { FillBlankEditor } from \"./FillBlankEditor\";\nimport { CodeEditor } from \"./CodeEditor\";\n\ninterface DynamicQuestionEditorProps {\n  questionType: QuestionType;\n  questionId?: string;\n  initialData?: any;\n  onSave: (data: any) => void;\n  onCancel: () => void;\n}\n\nexport function DynamicQuestionEditor({\n  questionType,\n  questionId,\n  initialData,\n  onSave,\n  onCancel,\n}: DynamicQuestionEditorProps) {\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Process metadata if exists in initialData\n  useEffect(() => {\n    if (initialData?.metadata) {\n      try {\n        // Chuẩn hóa metadata\n        const normalizedMetadata = normalizeMetadata(initialData.metadata);\n        if (normalizedMetadata) {\n          initialData.metadata = normalizedMetadata;\n        }\n      } catch (error) {\n        console.error(\"Failed to parse metadata JSON:\", error);\n        // Giữ metadata ban đầu nếu parsing thất bại\n      }\n    }\n  }, [initialData]);\n\n  // Handle save with common saving logic\n  const handleSave = async (data: any) => {\n    setIsSaving(true);\n    try {\n      // Combine data with question type and id\n      const questionData = {\n        ...data,\n        type: questionType,\n        id: questionId,\n      };\n      \n      // Ensure metadata is properly formatted\n      // For backward compatibility, check if separate metadata properties need to be merged\n      if (questionType === QuestionType.MULTIPLE_CHOICE && !questionData.metadata) {\n        // If MultipleChoiceEditor sent allowMultipleAnswers/shuffleOptions directly instead of in metadata\n        if ('allowMultipleAnswers' in questionData || 'shuffleOptions' in questionData) {\n          questionData.metadata = {\n            allowMultiple: questionData.allowMultipleAnswers || false,\n            shuffleOptions: questionData.shuffleOptions || false,\n          };\n          // Remove redundant properties\n          delete questionData.allowMultipleAnswers;\n          delete questionData.shuffleOptions;\n        }\n      }\n      \n      // Process metadata to ensure it's properly formatted for database\n      if (questionData.metadata) {\n        questionData.metadata = normalizeMetadata(questionData.metadata);\n      }\n      \n      await onSave(questionData);\n    } catch (error) {\n      console.error(\"Error in DynamicQuestionEditor handleSave:\", error);\n      alert(`Failed to save question: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Get editor title based on question type\n  const getEditorTitle = () => {\n    const isEditing = !!questionId;\n    const action = isEditing ? \"Edit\" : \"Add\";\n    \n    switch (questionType) {\n      case QuestionType.MULTIPLE_CHOICE:\n        return `${action} Multiple Choice Question`;\n      case QuestionType.ESSAY:\n        return `${action} Essay Question`;\n      case QuestionType.TRUE_FALSE:\n        return `${action} True/False Question`;\n      case QuestionType.SHORT_ANSWER:\n        return `${action} Short Answer Question`;\n      case QuestionType.MATCHING:\n        return `${action} Matching Question`;\n      case QuestionType.FILL_BLANK:\n        return `${action} Fill in the Blank Question`;\n      case QuestionType.CODE:\n        return `${action} Code Question`;\n      default:\n        return `${action} Question`;\n    }\n  };\n\n  // Render the appropriate editor based on question type\n  const renderQuestionEditor = () => {\n    switch (questionType) {\n      case QuestionType.MULTIPLE_CHOICE:\n        return (\n          <MultipleChoiceEditor\n            initialData={initialData}\n            onSave={handleSave}\n            onCancel={onCancel}\n          />\n        );\n      case QuestionType.ESSAY:\n        return (\n          <EssayQuestionEditor\n            initialData={initialData}\n            onSave={handleSave}\n            onCancel={onCancel}\n          />\n        );\n      case QuestionType.TRUE_FALSE:\n        return (\n          <TrueFalseEditor\n            initialData={initialData}\n            onSave={handleSave}\n            onCancel={onCancel}\n          />\n        );\n      case QuestionType.SHORT_ANSWER:\n        return (\n          <ShortAnswerEditor\n            initialData={initialData}\n            onSave={handleSave}\n            onCancel={onCancel}\n          />\n        );\n      case QuestionType.MATCHING:\n        return (\n          <MatchingEditor\n            initialData={initialData}\n            onSave={handleSave}\n            onCancel={onCancel}\n          />\n        );\n      case QuestionType.FILL_BLANK:\n        return (\n          <FillBlankEditor\n            initialData={initialData}\n            onSave={handleSave}\n            onCancel={onCancel}\n          />\n        );\n      case QuestionType.CODE:\n        return (\n          <CodeEditor\n            initialData={initialData}\n            onSave={handleSave}\n            onCancel={onCancel}\n          />\n        );\n      default:\n        return (\n          <div className=\"p-4 text-center\">\n            <p>Unsupported question type</p>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{getEditorTitle()}</CardTitle>\n        <CardDescription>\n          Configure all options for this question.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"px-0\">\n        {renderQuestionEditor()}\n      </CardContent>\n      <CardFooter className=\"flex justify-between border-t p-6\">\n        <Button\n          variant=\"outline\"\n          onClick={onCancel}\n          disabled={isSaving}\n        >\n          Cancel\n        </Button>\n        <div className=\"flex gap-2\">\n          {isSaving && (\n            <Button disabled>\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              Saving...\n            </Button>\n          )}\n        </div>\n      </CardFooter>\n    </Card>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8694, "column": 0}, "map": {"version":3,"sources":["file:///F:/Github%20Project/quizmaker/my-project/app/dashboard/teacher/quizzes/%5BquizId%5D/edit/QuizEditForm.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { QuestionsList } from \"./components/QuestionsList\";\nimport { QuestionTypeSelector } from \"./components/QuestionTypeSelector\";\nimport { DynamicQuestionEditor } from \"./components/DynamicQuestionEditor\";\nimport { QuestionType } from \"@prisma/client\";\nimport { Loader2, Plus, Save, Eye } from \"lucide-react\";\nimport { normalizeMetadata } from \"@/lib/utils\";\n\n// Định nghĩa interface cho câu hỏi\ninterface Question {\n  id: string;\n  type: QuestionType;\n  content: string;\n  order: number;\n  explanation?: string | null;\n  points: number;\n  options?: Array<{\n    id: string;\n    content: string;\n    isCorrect: boolean;\n    order: number;\n  }>;\n  metadata?: Record<string, any> | null;\n  [key: string]: any;\n}\n\n// Define the form schema\nconst quizFormSchema = z.object({\n  title: z.string().min(3, { message: \"Title must be at least 3 characters\" }).max(100, { message: \"Title must be less than 100 characters\" }),\n  description: z.string().optional(),\n  timeLimit: z.union([\n    z.coerce.number().int().min(1, { message: \"Time limit must be at least 1 minute\" }).max(240, { message: \"Time limit must be less than 240 minutes\" }),\n    z.literal(null)\n  ]),\n  isActive: z.boolean().default(true),\n  classId: z.string().optional(),\n  category: z.string().optional(),\n  passingScore: z.coerce.number().min(0, { message: \"Passing score must be at least 0%\" }).max(100, { message: \"Passing score must be between 0-100%\" }).optional(),\n  maxAttempts: z.coerce.number().int().min(1, { message: \"Max attempts must be at least 1\" }).optional(),\n  showResults: z.boolean().default(true),\n  shuffleQuestions: z.boolean().default(false),\n  isPublic: z.boolean().default(false),\n  startDate: z.string().nullable().optional(),\n  endDate: z.string().nullable().optional(),\n});\n\ntype QuizFormValues = z.infer<typeof quizFormSchema>;\n\ninterface TeacherClass {\n  id: string;\n  name: string;\n  subject: string | null;\n}\n\ninterface QuizEditFormProps {\n  quiz: any; // Replace with proper type\n  classes: TeacherClass[];\n  categories: string[];\n}\n\nexport function QuizEditForm({ quiz, classes, categories }: QuizEditFormProps) {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"details\");\n  const [showQuestionTypeSelector, setShowQuestionTypeSelector] = useState(false);\n  const [editingQuestion, setEditingQuestion] = useState<{\n    id?: string;\n    type: QuestionType;\n    data?: any;\n  } | null>(null);\n  const [questions, setQuestions] = useState<Question[]>(quiz.questions || []);\n  \n  // Initialize the form with quiz values\n  const form = useForm<QuizFormValues>({\n    resolver: zodResolver(quizFormSchema),\n    defaultValues: {\n      title: quiz.title || \"\",\n      description: quiz.description || \"\",\n      timeLimit: quiz.timeLimit || 60,\n      isActive: quiz.isActive ?? true,\n      classId: quiz.classId || undefined,\n      category: quiz.category || undefined,\n      passingScore: quiz.passingScore || undefined,\n      maxAttempts: quiz.maxAttempts || undefined,\n      showResults: quiz.showResults ?? true,\n      shuffleQuestions: quiz.shuffleQuestions ?? false,\n      isPublic: quiz.isPublic ?? false,\n      startDate: quiz.startDate ? new Date(quiz.startDate).toISOString() : null,\n      endDate: quiz.endDate ? new Date(quiz.endDate).toISOString() : null,\n    },\n  });\n  \n  // Handle form submission\n  const onSubmit = async (data: QuizFormValues) => {\n    setIsSubmitting(true);\n    \n    try {\n      // Chuyển đổi classId từ \"none\" thành null\n      const formData = {\n        ...data,\n        classId: data.classId === \"none\" ? null : data.classId\n      };\n      \n      const response = await fetch(`/api/teacher/quizzes/${quiz.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to update quiz\");\n      }\n      \n      toast({\n        title: \"Success\",\n        description: \"Quiz updated successfully.\",\n      });\n      \n      router.refresh();\n    } catch (error) {\n      console.error(\"Error updating quiz:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update quiz. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  // Handle selecting a question type\n  const handleSelectQuestionType = (type: QuestionType) => {\n    setEditingQuestion({ type });\n    setShowQuestionTypeSelector(false);\n  };\n\n  // Handle saving a question\n  const handleSaveQuestion = async (questionData: any) => {\n    try {\n      // Prepare data for API\n      const method = editingQuestion?.id ? \"PUT\" : \"POST\";\n      const url = editingQuestion?.id \n        ? `/api/teacher/quizzes/${quiz.id}/questions/${editingQuestion.id}`\n        : `/api/teacher/quizzes/${quiz.id}/questions`;\n      \n      // Ensure metadata is properly processed\n      if (questionData.metadata) {\n        // Let normalizeMetadata handle the data cleaning and formatting\n        const normalizedMetadata = normalizeMetadata(questionData.metadata);\n        questionData.metadata = normalizedMetadata;\n      }\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(questionData),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        const errorMessage = errorData?.message || `Failed to ${editingQuestion?.id ? \"update\" : \"create\"} question (Status: ${response.status})`;\n        console.error(\"API error response:\", errorData);\n        throw new Error(errorMessage);\n      }\n      \n      const savedQuestion = await response.json();\n      \n      // Update the questions list - ensure complete replacement with server data\n      if (editingQuestion?.id) {\n        // For existing questions, completely replace the old question with the new one from server\n        setQuestions(questions.map((q: Question) => \n          q.id === editingQuestion.id ? savedQuestion : q\n        ));\n      } else {\n        // For new questions, add the complete server response to questions list\n        setQuestions([...questions, savedQuestion]);\n      }\n      \n      toast({\n        title: \"Success\",\n        description: `Question ${editingQuestion?.id ? \"updated\" : \"added\"} successfully.`,\n      });\n      \n      setEditingQuestion(null);\n    } catch (error) {\n      console.error(\"Error saving question:\", error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : `Failed to ${editingQuestion?.id ? \"update\" : \"create\"} question. Please try again.`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle editing a question\n  const handleEditQuestion = (questionId: string) => {\n    const question = questions.find((q: Question) => q.id === questionId);\n    if (question) {\n      // Ensure metadata is an object, not a string\n      const questionData = {\n        ...question,\n        metadata: typeof question.metadata === 'string' \n          ? JSON.parse(question.metadata)\n          : question.metadata\n      };\n      \n      setEditingQuestion({\n        id: questionData.id,\n        type: questionData.type as QuestionType,\n        data: questionData,\n      });\n    }\n  };\n\n  // Handle deleting a question\n  const handleDeleteQuestion = async (questionId: string) => {\n    try {\n      // Kiểm tra xem có học sinh đã làm quiz này chưa\n      const hasAttempts = quiz.attempts && quiz.attempts.length > 0;\n      \n      // Nếu có học sinh đã làm quiz, hiển thị cảnh báo mạnh hơn\n      if (hasAttempts) {\n        const confirmDelete = window.confirm(\n          \"WARNING: This quiz has been attempted by students. Deleting this question will also delete all student answers related to it and may affect their scores. This action cannot be undone. Are you sure you want to continue?\"\n        );\n        \n        if (!confirmDelete) {\n          return; // User cancelled the deletion\n        }\n      }\n      \n      const response = await fetch(`/api/teacher/quizzes/${quiz.id}/questions/${questionId}`, {\n        method: \"DELETE\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to delete question\");\n      }\n      \n      // Update the questions list\n      setQuestions(questions.filter((q: Question) => q.id !== questionId));\n      \n      toast({\n        title: \"Success\",\n        description: \"Question deleted successfully.\",\n      });\n    } catch (error) {\n      console.error(\"Error deleting question:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete question. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle reordering questions\n  const handleReorderQuestions = async (newOrder: { id: string; order: number }[]) => {\n    try {\n      const response = await fetch(`/api/teacher/quizzes/${quiz.id}/questions/reorder`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ order: newOrder }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to reorder questions\");\n      }\n      \n      // Update the questions list with new order\n      const updatedQuestions = [...questions];\n      newOrder.forEach(item => {\n        const question = updatedQuestions.find((q: Question) => q.id === item.id);\n        if (question) question.order = item.order;\n      });\n      updatedQuestions.sort((a, b) => a.order - b.order);\n      setQuestions(updatedQuestions);\n      \n      toast({\n        title: \"Success\",\n        description: \"Questions reordered successfully.\",\n      });\n    } catch (error) {\n      console.error(\"Error reordering questions:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to reorder questions. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle publishing quiz\n  const handlePublishQuiz = async () => {\n    try {\n      const response = await fetch(`/api/teacher/quizzes/${quiz.id}/publish`, {\n        method: \"PUT\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to publish quiz\");\n      }\n      \n      toast({\n        title: \"Success\",\n        description: \"Quiz published successfully.\",\n      });\n      \n      router.push(\"/dashboard/teacher/quizzes\");\n    } catch (error) {\n      console.error(\"Error publishing quiz:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to publish quiz. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n        <h1 className=\"text-xl font-bold tracking-tight\">{quiz.title}</h1>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={() => router.push(`/dashboard/teacher/quizzes/${quiz.id}/preview`)}\n          >\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Preview\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={form.handleSubmit(onSubmit)}\n            disabled={isSubmitting}\n          >\n            {isSubmitting ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Save className=\"h-4 w-4 mr-2\" />\n            )}\n            Save\n          </Button>\n          {!quiz.isPublished && (\n            <Button \n              onClick={handlePublishQuiz}\n              disabled={questions.length === 0}\n            >\n              Publish Quiz\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"details\">Details</TabsTrigger>\n          <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"details\" className=\"space-y-4 mt-4\">\n          <Form {...form}>\n            <form className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quiz Details</CardTitle>\n                  <CardDescription>\n                    Update the basic information for your quiz.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Title*</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter quiz title\" {...field} />\n                        </FormControl>\n                        <FormDescription>\n                          Give your quiz a clear and descriptive title.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Enter a brief description of the quiz\" \n                            className=\"resize-none min-h-[100px]\"\n                            {...field}\n                            value={field.value || \"\"}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Provide more details about what this quiz covers.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <FormControl>\n                            <Select \n                              onValueChange={field.onChange} \n                              defaultValue={field.value} \n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a category\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {categories.map((category) => (\n                                  <SelectItem key={category} value={category}>\n                                    {category}\n                                  </SelectItem>\n                                ))}\n                                {/* Allow custom category input */}\n                                <div className=\"p-2 border-t\">\n                                  <Input\n                                    placeholder=\"Add custom category\"\n                                    onChange={(e) => field.onChange(e.target.value)}\n                                  />\n                                </div>\n                              </SelectContent>\n                            </Select>\n                          </FormControl>\n                          <FormDescription>\n                            Categorize your quiz for organization.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"classId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Class</FormLabel>\n                          <FormControl>\n                            <Select \n                              onValueChange={field.onChange} \n                              defaultValue={field.value || \"none\"}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a class\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"none\">Independent Quiz (No Class)</SelectItem>\n                                {classes.map((cls) => (\n                                  <SelectItem key={cls.id} value={cls.id}>\n                                    {cls.name} {cls.subject ? `(${cls.subject})` : ''}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormControl>\n                          <FormDescription>\n                            Associate this quiz with a class or make it independent.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n                <CardFooter className=\"flex justify-end\">\n                  <Button \n                    type=\"button\" \n                    onClick={form.handleSubmit(onSubmit)}\n                    disabled={isSubmitting}\n                  >\n                    {isSubmitting ? (\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    ) : (\n                      <Save className=\"h-4 w-4 mr-2\" />\n                    )}\n                    Save Details\n                  </Button>\n                </CardFooter>\n              </Card>\n            </form>\n          </Form>\n        </TabsContent>\n        \n        <TabsContent value=\"questions\" className=\"space-y-4 mt-4\">\n          {editingQuestion ? (\n            <DynamicQuestionEditor\n              questionType={editingQuestion.type}\n              questionId={editingQuestion.id}\n              initialData={editingQuestion.data}\n              onSave={handleSaveQuestion}\n              onCancel={() => setEditingQuestion(null)}\n            />\n          ) : (\n            <>\n              {showQuestionTypeSelector ? (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Select Question Type</CardTitle>\n                    <CardDescription>\n                      Choose the type of question you want to add to your quiz.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <QuestionTypeSelector onSelectType={handleSelectQuestionType} />\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"flex justify-end\">\n                  <Button \n                    onClick={() => setShowQuestionTypeSelector(true)}\n                    className=\"mb-4\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Question\n                  </Button>\n                </div>\n              )}\n              \n              <QuestionsList\n                questions={questions}\n                onEditQuestion={handleEditQuestion}\n                onDeleteQuestion={handleDeleteQuestion}\n                onReorderQuestions={handleReorderQuestions}\n              />\n            </>\n          )}\n        </TabsContent>\n        \n        <TabsContent value=\"settings\" className=\"space-y-4 mt-4\">\n          <Form {...form}>\n            <form className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quiz Settings</CardTitle>\n                  <CardDescription>\n                    Configure how your quiz will be presented to students.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"timeLimit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Time Limit (minutes)</FormLabel>\n                          <FormControl>\n                            <div className=\"flex gap-2 items-center\">\n                            <Input \n                              type=\"number\" \n                              placeholder=\"60\"\n                              min={1}\n                              max={240}\n                                disabled={field.value === null}\n                                value={field.value === null ? \"\" : field.value}\n                                onChange={(e) => {\n                                  if (e.target.value === \"\") {\n                                    field.onChange(null);\n                                  } else {\n                                    field.onChange(parseInt(e.target.value));\n                                  }\n                                }}\n                                className=\"flex-1\"\n                              />\n                              <div className=\"flex items-center gap-2\">\n                                <input \n                                  type=\"checkbox\" \n                                  id=\"unlimited-time\" \n                                  checked={field.value === null}\n                                  onChange={(e) => {\n                                    field.onChange(e.target.checked ? null : 60);\n                                  }}\n                                  className=\"rounded border-gray-300\"\n                                />\n                                <label htmlFor=\"unlimited-time\" className=\"text-sm\">Unlimited</label>\n                              </div>\n                            </div>\n                          </FormControl>\n                          <FormDescription>\n                            How much time students have to complete the quiz (check \"Unlimited\" for practice quizzes).\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"maxAttempts\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Maximum Attempts</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"Unlimited\"\n                              min={1}\n                              value={field.value === null ? \"\" : field.value}\n                              onChange={(e) => {\n                                const value = e.target.value === \"\" ? null : parseInt(e.target.value);\n                                field.onChange(value);\n                              }}\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            How many times a student can take this quiz (leave empty for unlimited).\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"passingScore\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Passing Score (%)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"No passing score\"\n                            min={0}\n                            max={100}\n                            value={field.value === null ? \"\" : field.value}\n                            onChange={(e) => {\n                              const value = e.target.value === \"\" ? null : parseInt(e.target.value);\n                              field.onChange(value);\n                            }}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Minimum percentage required to pass the quiz (leave empty if no passing score).\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 border-t pt-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"startDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Start Date (Optional)</FormLabel>\n                          <FormControl>\n                            <div className=\"flex flex-col gap-2\">\n                              <div className=\"flex items-center gap-2\">\n                                <input \n                                  type=\"checkbox\" \n                                  id=\"enable-start-date\" \n                                  checked={field.value !== null}\n                                  onChange={(e) => {\n                                    field.onChange(e.target.checked ? new Date().toISOString() : null);\n                                  }}\n                                  className=\"rounded border-gray-300\"\n                                />\n                                <label htmlFor=\"enable-start-date\" className=\"text-sm\">Set a start date</label>\n                              </div>\n                              {field.value && (\n                                <input \n                                  type=\"datetime-local\" \n                                  value={field.value.split('.')[0]} \n                                  onChange={(e) => field.onChange(new Date(e.target.value).toISOString())}\n                                  className=\"w-full p-2 border rounded-md\"\n                                />\n                              )}\n                            </div>\n                          </FormControl>\n                          <FormDescription>\n                            Quiz will become available to students at this date and time.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"endDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>End Date (Optional)</FormLabel>\n                          <FormControl>\n                            <div className=\"flex flex-col gap-2\">\n                              <div className=\"flex items-center gap-2\">\n                                <input \n                                  type=\"checkbox\" \n                                  id=\"enable-end-date\" \n                                  checked={field.value !== null}\n                                  onChange={(e) => {\n                                    field.onChange(e.target.checked ? new Date().toISOString() : null);\n                                  }}\n                                  className=\"rounded border-gray-300\"\n                                />\n                                <label htmlFor=\"enable-end-date\" className=\"text-sm\">Set an end date</label>\n                              </div>\n                              {field.value && (\n                                <input \n                                  type=\"datetime-local\" \n                                  value={field.value.split('.')[0]} \n                                  onChange={(e) => field.onChange(new Date(e.target.value).toISOString())}\n                                  className=\"w-full p-2 border rounded-md\"\n                                />\n                              )}\n                            </div>\n                          </FormControl>\n                          <FormDescription>\n                            Quiz will become unavailable to students after this date and time.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"shuffleQuestions\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between p-4 border rounded-md\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Shuffle Questions</FormLabel>\n                            <FormDescription>\n                              Randomize the order of questions for each student\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"showResults\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between p-4 border rounded-md\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Show Results</FormLabel>\n                            <FormDescription>\n                              Show students their results after completing the quiz\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"isPublic\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between p-4 border rounded-md\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel className=\"text-base\">Public Quiz</FormLabel>\n                          <FormDescription>\n                            Make this quiz available to anyone with the link\n                          </FormDescription>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n                <CardFooter className=\"flex justify-end\">\n                  <Button \n                    type=\"button\" \n                    onClick={form.handleSubmit(onSubmit)}\n                    disabled={isSubmitting}\n                  >\n                    {isSubmitting ? (\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    ) : (\n                      <Save className=\"h-4 w-4 mr-2\" />\n                    )}\n                    Save Settings\n                  </Button>\n                </CardFooter>\n              </Card>\n            </form>\n          </Form>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}
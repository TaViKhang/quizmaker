generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role          @default(STUDENT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  quizzes       Quiz[]        @relation("CreatedQuizzes")
  attempts      QuizAttempt[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id          String        @id @default(cuid())
  title       String
  description String?
  timeLimit   Int
  authorId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  questions   Question[]
  author      User          @relation("CreatedQuizzes", fields: [authorId], references: [id])
  attempts    QuizAttempt[]
}

model Question {
  id      String       @id @default(cuid())
  quizId  String
  content String
  type    QuestionType
  points  Int          @default(1)
  order   Int
  answers Answer[]
  options Option[]
  quiz    Quiz         @relation(fields: [quizId], references: [id])
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  content    String
  isCorrect  Boolean
  order      Int
  question   Question @relation(fields: [questionId], references: [id])
}

model QuizAttempt {
  id          String    @id @default(cuid())
  quizId      String
  userId      String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Float?
  answers     Answer[]
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Answer {
  id             String      @id @default(cuid())
  attemptId      String
  questionId     String
  selectedOption String?
  textAnswer     String?
  isCorrect      Boolean?
  score          Float?
  attempt        QuizAttempt @relation(fields: [attemptId], references: [id])
  question       Question    @relation(fields: [questionId], references: [id])
}

enum Role {
  TEACHER
  STUDENT
}

enum QuestionType {
  MULTIPLE_CHOICE
  ESSAY
}
